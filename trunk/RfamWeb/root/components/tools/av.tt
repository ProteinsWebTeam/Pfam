
[%
# av.tt
# jt6 20060802 WTSI
# 
# build a page for the AstexViewer applet
#
# $Id: av.tt,v 1.3 2009-06-05 14:31:28 jt6 Exp $

META naked = 1;

#-------------------------------------------------------------------------------
# specify required stylesheets and javascript files 

PROCESS "components/require.tt";

requirements.css.push( "av.css" );
requirements.cssIeAll.push( "av_all_ie.css" );

#-------------------------------------------------------------------------------

USE String;

#----------------------------------------

# build the script for AstexViewer

avScript = BLOCK;

# set the background -%]
background '0xEEEEEE';

[%- # load the PDB file from the server -%]
molecule load mol '[% c.uri_for( "/structure/getpdbfile", pdbId ) %].pdb';

[%- # hide the default wireframe display of atoms -%]
display lines off all;

[%- # colour the whole backbone a dull grey initially -%]
color '0xDDDDDD' aminoacid;

[% # for each Pfam domain on the structure:
   #   colour the backbone according to the colour that we get from the DB
   #   add a surface of the same colour
   #   make the surface slightly transparent

# keep a list of the regions that are assigned to Pfam domains, so that we
# can later invert that to draw surfaces around regions that are not in 
# Pfam domains
unassigned = String.new( "select aminoacid; " );

FOREACH m IN mapping;
  NEXT UNLESS m.hex_colour;

  # add an "exclude" selection command for this region
  CALL unassigned.append( "exclude residue ${m.pdb_res_start} to ${ m.pdb_res_end }" );
  CALL unassigned.append( " and chain '${m.chain}'" ) IF m.chain;
  CALL unassigned.append( "; " );
  
  # build a label for the surface from the chain ID and residue numbers. This
  # label is stuffed into the mapping hash, so that we can use it later when
  # building the key table at the bottom of the [age 
  m.surfLabel = String.new( m.chain );
  CALL m.surfLabel.append( m.pdb_res_start, m.pdb_res_end ) -%]
  
  color 
    '0x[% m.hex_colour ? m.hex_colour : "red" %]' 
    residue [% m.pdb_res_start %] to [% m.pdb_res_end %]
    [% IF m.chain %]and chain '[% m.chain %]'[% END %];
  surface -solid true
    surface_[% m.surfLabel %]
    '0x[% m.hex_colour ? m.hex_colour : "red" %]'
    residue [% m.pdb_res_start %] to [% m.pdb_res_end %]
    [% IF m.chain %]and chain '[% m.chain %]'[% END %];
  object 
    surface_[% m.surfLabel %]
    transparency 200;
[% END;

# calculate the secondary structure composition of the protein -%]
secstruc molecule mol;

[%- # actually draw the secondary structure cartoon. The cartoon will adopt the 
    # colours that we just assigned above -%]
schematic -name cartoonObj molecule mol;

[%- # draw DNA as cylinders, because AV can't draw schematics for nucleic acids -%]
display cylinders on dna;

[%- # if there are markups for individual residues, we add them to the view.
    # First, color all atoms according to their type and set the radius for
    # the bonds to be a little larger than default
IF markups.size %]
  color_by_atom;
  cylinder_radius 10 aminoacid;
[% END;

# and now set the colour for each marked-up residue 
FOREACH markup IN markups;
  IF markup.auto_markup == 1 %]
    color 
      '255,51,102'
      residue [% markup.pdb_seq_number %]
      [% IF markup.chain %]and chain '[% markup.chain %]'[% END %];

  [%- ELSIF markup.auto_markup == 2 %]
    color
      '153,0,204'
      residue [% markup.pdb_seq_number %]
      [% IF markup.chain %]and chain '[% markup.chain %]'[% END %];

  [%- ELSE %]
    select 
      residue [% markup.pdb_seq_number %]
      [% IF markup.chain %]and chain '[% markup.chain %]'[% END %];
  [%- END;
  
  # actually draw the residue -%]
  display 
    sticks
    on 
    residue [% markup.pdb_seq_number %]
    [% IF markup.chain %]and chain '[% markup.chain %]'[% END %];
[%- END;

# as the last thing in the script, put a surface around unassigned residues
# NOTE: not using "CALL" here, because we actually want the output to appear
# in the script
unassigned.append( "surface -solid true surface_unassigned '0xE7E7E7' current; " );

# set the transparency for the "unassigned" surface too -%]
object surface_unassigned transparency 200;

[% END;

#----------------------------------------
# build the page itself

pageContent = BLOCK;

title = "AstexViewer"
# we apparently need to set explicitly the name of the window, otherwise it takes the 
# name of the parent, so targetted links back to the parent wont work
-%]
<script type="text/javascript">
  // <![CDATA[
  window.name = "avWin";
  // ]]>
</script>

<div id="explanation">
<h1>PDB entry [% pdb.pdb_id %]</h1>
<p>
  The applet to the left shows the structure of PDB entry 
  <strong>[% pdb.pdb_id %]</strong>, along with the Rfam families that map 
  onto that structure. 
</p>
<p>
  The <em>RNA backbone</em> is drawn as secondary structure elements, 
  and is coloured according to the Rfam famillies found on the structure.
  Regions of the RNA that represent Rfam families are also surrounded
  by a semi-transparent <em>molecular surface</em>, representing the van 
  der Waal&#39;s surface for the atoms that fall within the domain. Regions 
  of RNA that are not assigned to an Rfam region are shown in grey.
</p>
<p>
  Molecular surfaces can be turned on and off using the buttons in the table 
  below. Details of the mapping between the PDB structure, EMBL sequence and 
  Rfam families are also given in the table.
</p>
<p>
  All surfaces are initially drawn as semi-transparent membranes, but you 
  may find it quicker to manipulate the view if the surfaces are drawn as
  solids. <span class="link" onclick="toggleTransparency();">
    Toggle surface transparency</span>.
</p>
</div>

<!--[if !IE]> Firefox and others will use outer object -->
<object classid="java:MoleculeViewerApplet.class" 
        id="av"
        type="application/x-java-applet"
        archive="[% c.uri_for( '/shared/av/AstexViewer2.jar' ) %]" 
        height="500"
        width="500">
  <!-- Konqueror browser needs the following param -->
  <param name="archive" value="[% c.uri_for( '/shared/av/AstexViewer2.jar' ) %]" />
  <param name="script" value="[% avScript %]" />
<!--<![endif]-->
  <!-- MSIE (Microsoft Internet Explorer) will use inner object --> 
  <object classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
          id="avIE"
          codebase="http://java.sun.com/update/1.5.0/jinstall-1_5_0-windows-i586.cab"
          height="500"
          width="500">
    <param name="archive" value="[% c.uri_for( '/shared/av/AstexViewer2.jar' ) %]" />
    <param name="code" value="MoleculeViewerApplet" />
    <param name="script" value="[% avScript %]" />
    <strong>
      This browser does not have a Java Plug-in.
      <br />
      <a href="http://java.sun.com/products/plugin/downloads/index.html">
        Get the latest Java Plug-in here.
      </a>
    </strong>
  </object> 
<!--[if !IE]> close outer object -->
</object>
<!--<![endif]-->

[% 
imageUri   = c.uri_for( "/static/images" );
showButton = "${imageUri}/showButton.png";
hideButton = "${imageUri}/hideButton.png";
%]

<table class="details wide"
       summary="Mappings from PDB to EMBL to Rfam">
  <thead>
    <tr class="caption">
      <th colspan="3">PDB</th>
      <th colspan="3">EMBL</th>
      <th rowspan="2">Rfam family</th>
      <th rowspan="2">Colour</th>
      <th rowspan="2">Show/hide surface</th>
    </tr>
    <tr class="caption">
      <th>Chain</th>
      <th>Start</th>
      <th>End</th>
      <th>ID</th>
      <th>Start</th>
      <th>End</th>
    </tr>
  </thead>
  <tbody>
    [% oe = 0;
    FOREACH m IN mapping %]
    <tr class="[% oe % 2 ? "odd" : "even"; oe=oe+1 %]">
      <td>[% IF m.chain; m.chain; ELSE %]<span class="inactive">n/a</span>[% END %]</td>
      <td>[% m.pdb_res_start %]</td>
      <td>[% m.pdb_res_end %]</td>
      <td>
        <a href="[% c.uri_for( "/sequence", m.rfamseq_acc ) %]" 
           onclick="opener.location=this.href;return false;">[% m.rfamseq_acc %]</a>
      </td>
      <td>[% m.seq_start %]</td>
      <td>[% m.seq_end %]</td>
      <td>
        <a href="[% c.uri_for( "/family", id=m.auto_rfam.rfam_id ) %]"
          onclick="opener.location=this.href;return false;">
          [% m.auto_rfam.rfam_id %]</a>
        (<a href="[% c.uri_for( "/family", acc=m.auto_rfam.rfam_acc ) %]" 
          onclick="opener.location=this.href;return false;">
          [% m.auto_rfam.rfam_acc %]</a>)
      </td>
      <td style="background: #[% m.hex_colour %]">&nbsp;</td>
      <td>
        <img src="[% hideButton %]" 
             onclick="toggleSurface('surface_[% m.surfLabel %]', this )"
             alt="Show/hide surface" />
      </td>
    </tr>
    [% END %]
    <tr class="[% IF oe % 2 %]odd[% ELSE %]even[% END %][% oe = oe + 1 %]">
      <td colspan="7">Not assigned to an Rfam region</td>
      <td style="background: #e7e7e7">&nbsp;</td>
      <td>
        <img src="[% hideButton %]" 
             onclick="toggleSurface('surface_unassigned', this )"
             alt="Show/hide surface" />
      </td>
    </tr>
  </tbody>
</table>

<div>
  <a href="#" onclick="window.close()" class="closer">Close window</a>
</div>

<script type="text/javascript">
  // <![CDATA[
  function toggleSurface( sId, oSwitch ) {
    var av = document.getElementById( "av" );
    if( av == null ) {
      av = document.getElementById( "avIE" );
    }
    av.execute( "object " + sId + " display toggle;");
    if( '[% showButton %]' == oSwitch.src ) {
      oSwitch.src = '[% hideButton %]';
    } else {
      oSwitch.src = '[% showButton %]';
    }
  }
  var transparent = true;
  function toggleTransparency() {
    var av = document.getElementById( "av" );
    if( av == null ) {
      av = document.getElementById( "avIE" );
    }
    var transparency = transparent ? 255 : 200;
    transparent = ! transparent;
    av.execute( 'object surface_* transparency ' + transparency + ';' );
  }
  // ]]>  
</script>

[% END; # of "pageContent = BLOCK"

PROCESS components/tools/toolWindow.tt %]
[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: Rob Finn (rdf@sanger.ac.uk), John Tate (jt6@sanger.ac.uk)

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
-%]
