
[%
# rest.tt
# jt6 20080326 WTSI
# 
# information on the RESTful interface
#
# $Id: rest.tt,v 1.12 2009-11-19 14:55:04 jt6 Exp $

#-------------------------------------------------------------------------------
# specify required stylesheets and javascript files 

PROCESS "components/require.tt";

sharedRequirements.js.push( "prettify.js" );
sharedRequirements.css.push( "prettify.css" );
sharedRequirements.css.push( "help.css" );

#-------------------------------------------------------------------------------

%]

<!-- start rest block -->

<div class="block" id="helpRestBlock">
  <div class="handle">
    <h1><a name="restTop">RESTful interface</a></h1>
  </div>
  <div class="blockContent">

    <div class="sections">
      <p>Contents:</p>
      <ol>
        <li>
          <span><a class="link" rel="basic">Basic concepts</a></span>
          <ol>
            <li><a class="link" rel="urls">URLs</a></li>
            <li><a class="link" rel="sending">Sending requests</a></li>
            <li><a class="link" rel="retrieving">Retrieving data</a></li>
          </ol>
        </li>
        <li>
          <span><a class="link" rel="search">Sequence searches</a></span>
          <ol>
            <li><a class="link" rel="seqToFile">Save sequence</a></li>
            <li><a class="link" rel="submit">Submit search</a></li>
            <li><a class="link" rel="poll">Wait for completion</a></li>
            <li><a class="link" rel="retrieve">Retrieve results</a></li>
            <li><a class="link" rel="responses">Server responses</a></li>
          </ol>
        </li>
        <li>
          <span><a class="link" rel="services">Available services</a></span>
          <ol>
            <li><a class="link" rel="familyData">Family data</a></li>
            <li><a class="link" rel="phyloTrees">Phylogenetic trees</a></li>
            <li><a class="link" rel="structMapping">Structure mapping</a></li>
            <li><a class="link" rel="alignments">Alignments</a></li>
            <li><a class="link" rel="sequenceSearch">Sequence searches</a></li>
          </ol>
        </li>
      </ol>
    </div>

    <p>
      This is an introduction to the
      &quot;<a class="ext" href="http://www.xfront.com/REST-Web-Services.html">RESTful</a>&quot; 
      interface to the Rfam website. 
      <a class="ext" href="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST</a>
      (or Representation State Transfer) refers to a style of building websites 
      which makes it easy to interact programmatically with the services 
      provided by the site. A programmatic interface, commonly called an
      <a class="ext" href="http://en.wikipedia.org/wiki/Api">Application 
      Programming Interface</a> (API) allows users to write scripts or programs to
      access data, rather than having to rely on a browser to view a site.
    </p>

    <hr />
    
    <h2><a name="basic">Basic concepts</a></h2>

    <h3><a name="urls">URLs</a></h3>

    <p>
      A RESTful service typically sends and receives data over 
      <a class="ext" href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">
      HTTP</a>, the same protocol that&#39;s used by websites and browsers. 
      As such, the services provided through a RESTful interface are identified 
      using URLs.
    </p>
    <p>
      In the Rfam website we use the same basic URL to provide both the 
      standard HTML representation of Rfam data and the alternative  
      <a class="ext" href="http://en.wikipedia.org/wiki/Xml">XML</a> 
      representation. To see the data for a particular Rfam family, you 
      would visit the following URL in your browser:
    </p>
    <pre class="url">
[% c.uri_for( '/family/RF00360' ) %]</pre>
    <p>
      To retrieve the data in XML format, you can either add an "Accept"
      header to your request, or just add an extra parameter, 
      <code>content-type=text/xml</code>, to the URL:
    </p>
    <pre class="url">
[% c.uri_for( '/family/RF00360', 'content-type' = 'text/xml' ) | html %] </pre>
    <p>
      The "/" in "text/xml" has been encoded here to make it safe for a URL.
      The response from the server will now be an XML document, rather than an 
      HTML page.
    </p>
    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="sending">Sending requests</a></h3>

    <h4>Using <code>curl</code></h4>

    <p>
      Although you can use a browser to retrieve family data in XML format, 
      it&#39;s most useful to send requests and retrieve XML programmatically. 
      The simplest way to do this is using a Unix command line tool such as 
      <code>curl</code>:
    </p>
    
    <fieldset class="query">
      <legend>Example</legend>
      <div class="code">
        <pre>shell% curl -H 'Expect:' -H 'Accept: text/xml' '[% c.uri_for( "/family/snoZ107_R87" ) | html %]'</pre>
        <pre class="prettyprint">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- information on Rfam family RF00360 (snoZ107_R87), generated: 10:36:20 13-Mar-2012 --&gt;
&lt;rfam xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="[% c.uri_for('/') %]"
      xsi:schemaLocation="[% c.uri_for('/') %]
                          [% c.uri_for('/') %]/static/documents/schemas/entry_xml.xsd"
      release="10.1" 
      release_date="2011-06-01"&gt;
  &lt;entry entry_type="Rfam" accession="RF00360" id="snoZ107_R87"&gt;
    &lt;description&gt;
&lt;![CDATA[
Small nucleolar RNA Z107/R87
]]&gt;
...</pre>
      </div>
    </fieldset>

    <p>
      <strong>Note:</strong> due to a bug in the web server that serves the
      Rfam site, requests that come from <code>curl</code> are normally 
      rejected. The current work-around is to add an extra parameter to the
      <code>curl</code> command line: <code>-H 'Expect:'</code>. This should
      avoid problems with requests being rejected.
    </p>
    
    <h4>Using a script</h4>

    <p>
      Most programming languages have the ability to send HTTP requests and 
      receive HTTP responses. A Perl script to retrieve data about a Pfam
      family might be as trivial as this:
    </p>

    <fieldset class="query">
      <legend>Example</legend>
      <div class="code">
        <pre class="prettyprint">#!/usr/bin/perl

use strict;
use warnings;

use LWP::UserAgent;

my $ua = LWP::UserAgent-&gt;new;
$ua-&gt;env_proxy;

my $res = $ua-&gt;get( '[% c.uri_for( "/family/snoZ107_R87", 'content-type' = "text/xml" ) | html %]' );

if ( $res-&gt;is_success ) {
  print $res-&gt;content;
}
else {
  print STDERR $res-&gt;status_line, "\n";
}</pre>
      </div>
    </fieldset>
    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="retrieving">Retrieving data</a></h3>

    <p>
      Although XML is just plain text and therefore human-readable, it&#39;s
      intended to be parsed into a data structure. Extending the Perl script 
      above, we can add the ability to parse the XML using an external Perl 
      module, 
      <a class="ext" href="http://search.cpan.org/dist/XML-LibXML/">XML::LibXML</a>:
    </p>

    <fieldset class="query">
      <legend>Example</legend>
      <div class="code">
        <pre class="prettyprint">#!/usr/bin/perl

use strict;
use warnings;

use LWP::UserAgent;
use XML::LibXML;

my $ua = LWP::UserAgent-&gt;new;
$ua-&gt;env_proxy;
$ua-&gt;default_header( 'Accept' =&gt; 'text/xml' ); # set "Accept" header to request XML response

my $res = $ua-&gt;get( '[% c.uri_for( "/family/snoZ107_R87" ) | html %]' );

die "error: failed to retrieve XML: " . $res-&gt;status_line . "\n"
  unless $res-&gt;is_success;

my $xml = $res-&gt;content;
my $xml_parser = XML::LibXML-&gt;new();
my $dom = $xml_parser-&gt;parse_string( $xml );

my $root = $dom-&gt;documentElement();
my ( $entry ) = $root-&gt;getChildrenByTagName( 'entry' );

print 'accession: ' . $entry-&gt;getAttribute( 'accession' ) . "\n";</pre>
      </div>
    </fieldset>

    <p>
      This script now prints out the accession for the family &quot;snoZ107_R87&quot;
      (<a href="[% c.uri_for( '/family/RF00360' ) %]">RF00360</a>).
    </p>
    <p><a class="link" rel="restTop">back to top</a></p>

    <hr />

    <h2><a name="search">Sequence searches</a></h2>
    
    <p>
      The Rfam website includes a 
      <a href="[% c.uri_for( '/search' ) %]">form</a> that allows users to 
      upload a nucleic acid sequence and see a list of the Rfam families that are 
      found on their search sequence. We&#39;ve now implemented a RESTful 
      interface to this search tool, making it possible to run single-sequence 
      Rfam searches programmatically.
    </p>
    <p>
      Running a search is a two step process:
    </p>
    <ol>
      <li>submit the search sequence</li>
      <li>retrieve search results</li>
    </ol>
    <p>
      The reason for separating the operation into two steps rather than  
      performing a search in a single operation is that the time taken to
      perform a sequence search will vary according to the length of the 
      sequence searched. Most web clients, browsers or scripts, will simply 
      time-out if a response is not received within a short time period, 
      usually less than a minute. By submitting a search, waiting and then 
      retrieving results as a separate operation, we avoid the risk of a 
      client reaching a time-out before the results are returned.
    </p>
    <p>
      The following example uses simple command-line tools to submit the search
      and retrieve results, but the whole process is easily transferred to a 
      single script or program.
    </p>

    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="seqToFile">Save your sequence to file</a></h3>

    <p>    
      It is usually most convenient to save your sequence into a plain text
      file, something like this:
    </p>
    
    <fieldset class="query">
      <legend>Example</legend>
    <pre class="prettyprint">shell% cat test.seq 
AGTTACGGCCATACCTCAGAGAATATACCGTATCCCGTTCGATCTGCGAA
GTTAAGCTCTGAAGGGCGTCGTCAGTACTATAGTGGGTGACCATATGGGA
ATACGACGTGCTGTAGCTT</pre>
    </fieldset>

    <p>
      The sequence should contain only valid sequence characters. You can break
      the sequence across multiple lines to make it easier to handle.
    </p>
    
    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="submit">Submit the search</a></h3>

    <p>
      When you send a request to the server, you can specify the format of the
      response. The server supports 
      <a class="ext" href="http://en.wikipedia.org/wiki/JSON">JSON</a>
      (application/json) and XML (text/xml) output. In the examples below we'll
      use the JSON output format by adding an &quot;Accept&quot; header to the
      request, specifying the media type &quot;application/json&quot;. Again,
      you could use the &quot;content-type&quot; parameter on the URL, rather
      than setting a header.
    </p>

    <fieldset class="query">
      <legend>Example</legend>
      <div class="code">
        <pre>shell% curl -H 'Expect:' -F seq='&lt;test.seq' -H "Accept: application/json" [% c.uri_for('/search/sequence') %]</pre>
        <pre class="prettyprint">
{
  "resultURL": "[% c.uri_for( '/search/sequence/d9b451d8-96e6-4234-9dbb-aa4806925353' ) %]",
  "opened": "2012-03-15 16:20:39",
  "estimatedTime": "3",
  "jobId": "d9b451d8-96e6-4234-9dbb-aa4806925353"
}</pre>
      </div>
    </fieldset>
    <p>
      Note that although the JSON string shown here is nicely formatted, the 
      string returned by the server will not be &quot;pretty printed&quot;,
      since it is not intended to be human readable.
    </p>
    
    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="poll">Wait for the search to complete</a></h3>
    <p>
      Having submitted the search, you now need to check the &quot;resultURL&quot;
      given in the response, which will be simply the URL that you used for 
      submitting the search, but with a job identifier appended. 
    </p>
    <p>
      Although you can check for results immediately, if you poll before your
      job has completed you won't receive a full response. Instead, the HTTP
      response will have its status set appropriately and the body of the
      response will contain only string giving the status. You should ideally
      check the HTTP status of the response, rather than relying on the body of
      the response. See <a class="link" rel="responses">below</a> for a table
      showing the response status codes that the server may return.
    </p>
    <p>
      When writing a script to submit searches and retrieve results, please add 
      a short delay between the submission and the first attempt to retrieve 
      results. Most search jobs are returned within four to five seconds of
      submission, depending greatly on the length of the sequence to be 
      searched. The &quot;estimatedTime&quot; given in the response provides
      a very rough estimate of how long your job should take. You may want
      to wait for this period before polling for the first time.
    </p>

    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="retrieve">Retrieve results</a></h3>
    <p>
      The response that was returned from the first query includes a URL from
      which you can now retrieve results:
    </p>

    <fieldset class="query">
      <legend>Example</legend>
      <div class="code">
      <pre>shell% curl -H "Expect:" -H "Accept: application/json" [% c.uri_for('/search/sequence/01d3c704-591a-4a85-b7c1-366496c5a63') %]</pre>
      <pre class="prettyprint">{
   "closed" : "2012-03-16 11:08:25",
   "searchSequence" : "AGTTACGGCCATACCTCAGAGAATATACCGTATCCCGTTCGATCTGCGAAGTTAAGCTCTGAAGGGCGTCGTCAGTACTATAGTGGGTGACCATATGGGAATACGACGTGCTGTAGCTT",
   "hits" : [
      {
         "blocks" : [
            {
               "ss" : "(((((((((,,,,&lt;&lt;-&lt;&lt;&lt;&lt;&lt;---&lt;&lt;--&lt;&lt;&lt;&lt;&lt;&lt;_______&gt;&gt;--&gt;&gt;&gt;&gt;--&gt;&gt;----&gt;&gt;&gt;",
               "user" : {
                  "seq" : "AGUUACGGCCAUACCUCAGAGAAUAUACCGUAUCCCGUUC-GAUCUGCGAAGUUAAGCUC",
                  "end" : "59",
                  "start" : "1"
               },
               "match" : ":: ::C:GCCAUA:C ::G:G+A A ACC: AUCCC U C GA CU :GAA UUAAGC:C",
               "hit" : {
                  "seq" : "gcuggCggccAUAgcaggguggAaaCACCcGauCCCAUccCGaACuCgGAAGuUAAGcac",
                  "end" : "60",
                  "start" : "1"
               }
            },
            {
               "ss" : "&gt;&gt;--&gt;&gt;&lt;&lt;&lt;-&lt;&lt;--.-&lt;-&lt;&lt;-----&lt;&lt;____&gt;&gt;-----&gt;&gt;-&gt;.-&gt;&gt;-&gt;&gt;&gt;,)))))))))",
               "user" : {
                  "seq" : "UGAAGGGCGUCGUCaGUACUAUAGUGGGUGACCAUAUGGGAAuACGACGU-GCUGUAGCU",
                  "end" : "118",
                  "start" : "60"
               },
               "match" : ":: AG:GC: :G+  GUACU++ GUGGGUGACCA+AUGGGAA AC:A:GU GC:G:: ::",
               "hit" : {
                  "seq" : "ccuagcgCcgaggu.GuACuggGgUggGugAccacaUGgGAa.AcuagGucgccGccagc",
                  "end" : "118",
                  "start" : "61"
               }
            },
            {
               "ss" : ":",
               "user" : {
                  "seq" : "U",
                  "end" : "119",
                  "start" : "119"
               },
               "match" : "U",
               "hit" : {
                  "seq" : "u",
                  "end" : "119",
                  "start" : "119"
               }
            }
         ],
         "P" : "4.708e-28",
         "score" : "99.52",
         "E" : "2.072e-26",
         "end" : "119",
         "alignment" : {
            "user_seq" : "         1 AGUUACGGCCAUACCUCAGAGAAUAUACCGUAUCCCGUUC-GAUCUGCGAAGUUAAGCUCUGAAGGGCGUCGUCaGUACUAUAGUGGGUGACCAUAUGGGAAuACGACGU-GCUGUAGCUU 119       ",
            "hit_seq" : "         1 gcuggCggccAUAgcaggguggAaaCACCcGauCCCAUccCGaACuCgGAAGuUAAGcacccuagcgCcgaggu.GuACuggGgUggGugAccacaUGgGAa.AcuagGucgccGccagcu 119       ",
            "ss" : "           (((((((((,,,,&lt;&lt;-&lt;&lt;&lt;&lt;&lt;---&lt;&lt;--&lt;&lt;&lt;&lt;&lt;&lt;_______&gt;&gt;--&gt;&gt;&gt;&gt;--&gt;&gt;----&gt;&gt;&gt;&gt;&gt;--&gt;&gt;&lt;&lt;&lt;-&lt;&lt;--.-&lt;-&lt;&lt;-----&lt;&lt;____&gt;&gt;-----&gt;&gt;-&gt;.-&gt;&gt;-&gt;&gt;&gt;,))))))))):           ",
            "match" : "           :: ::C:GCCAUA:C ::G:G+A A ACC: AUCCC U C GA CU :GAA UUAAGC:C:: AG:GC: :G+  GUACU++ GUGGGUGACCA+AUGGGAA AC:A:GU GC:G:: ::U           "
         },
         "strand" : "+",
         "GC" : "49",
         "family" : "5S_rRNA",
         "start" : "1"
      }
   ],
   "opened" : "2012-03-16 11:08:22",
   "started" : "2012-03-16 11:08:23",
   "jobId" : "01d3c704-591a-4a85-b7c1-366496c5a63c"
}</pre>
      </div>
    </fieldset>
    <p>
      Note that old search results are generally cleared out after some time,
      so if you wait too long before trying to view your hits in the website,
      you may find that they are already gone. However, results will be visible
      for at least one week after completion of the original search.
    </p>

    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="responses">Server responses</a></h3>
    <p>
      Server responses include a standard HTTP status code giving information
      about the current state of your job. These are the possible status
      codes:
    </p>

    <table class="details" summary="Search response status codes">
      <thead>
        <tr>
          <th>HTTP method</th>
          <th>HTTP status<br />code</th>
          <th>Status<br />description</th>
          <th>Response<br />body</th>
          <th>Notes</th>
        </tr>
      </thead>
      <tbody>
        <tr class="even">
          <td>POST</td>
          <td>202</td>
          <td>Accepted</td>
          <td>PEND / RUN</td>
          <td class="left">The job has been accepted by the search system and is 
            either pending (waiting to be started) or running. After a short 
            delay, your script should check for results again.</td>
        </tr>
        <tr class="odd">
          <td>POST</td>
          <td>502</td>
          <td>Bad gateway</td>
          <td>Error message</td>
          <td class="left">There was a problem scheduling or running the job. 
            The job has failed and will not produce results. There is no need
            to check the status again.</td>
        </tr>
        <tr class="even">
          <td>POST</td>
          <td>503</td>
          <td>Service unavailable</td>
          <td>Error message</td>
          <td class="left">Occasionally the search server may become overloaded.
            If the error message suggests that the search queue is full, try
            submitting your search later.</td>
        </tr>
        <tr class="odd">
          <td>GET</td>
          <td>200</td>
          <td>OK</td>
          <td>Search results</td>
          <td class="left">The job completed successfully and the results are
            included in the response body.</td>
        </tr>
        <tr class="even">
          <td>GET</td>
          <td>410</td>
          <td>Gone</td>
          <td>DEL</td>
          <td class="left">Your job was deleted from the search system. This 
            status will not be assigned by the search system, but by an 
            administrator. There was probably a problem with the job and you 
            should contact the help desk for assistance with it.</td>
        </tr>
        <tr class="odd">
          <td>GET</td>
          <td>503</td>
          <td>Service unavailable</td>
          <td>HOLD</td>
          <td class="left">Your job was accepted but is on hold. This status 
            will not be assigned by the search system, but by an administrator. 
            There is probably a problem with the job and you should contact the 
            help desk for assistance with it.</td>
        </tr>
        <tr class="even">
          <td>POST, GET</td>
          <td>500</td>
          <td>Internal server error</td>
          <td>Error message</td>
          <td class="left">There was some problem accepting or running your
            job, but it does not fall into any of the other categories. The body
            of the response will contain an error message from the server.
            Contact the help desk for assistance with the problem.</td>
        </tr>
      </tbody>
    </table>

    <p><a class="link" rel="restTop">back to top</a></p>

    <hr />

    <h2><a name="services">Available services</a></h2>

    <p>
      These are the services that are available from the Rfam website. In the
      method descriptions below {<em>entry</em>} can be either accession, e.g.
      RF00360, or identifier, e.g. snoZ107_R87. 
    </p>

    <h3><a name="familyData">Family data</a></h3>

    [% familyURI = c.uri_for( "/family" ) -%]

    <table id="familyResources"
           class="details"
           summary="Family methods">
      <thead>
        <tr>
          <th>Resource</th>
          <th>URI</th>
          <th>HTTP<br />method</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="odd">
          <td>Family information</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns general information about an Rfam family, such as curation
              details, search parameters, etc.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/html</li>
              <li>text/xml</li>
              <li>application/json</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/RF00360?content-type=text%2Fxml">
                [% familyURI %]/RF00360</a> (XML)</li>
              <li><a href="[% familyURI %]/snoZ107_R87?content-type=application%2Fjson">
                [% familyURI %]/snoZ107_R87</a> (JSON)</li>
            </ul>
          </td>
        </tr>
        <tr class="even">
          <td>Accession to ID</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/id</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the ID for the family with the given accession or ID.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/plain (always returns just the ID)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/snoZ107_R87/acc">
                [% familyURI %]/snoZ107_R87/acc</a></li>
            </ul>
          </td>
        </tr>
        <tr class="odd">
          <td>ID to accession</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/acc</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the accession for the family with the given accession or ID.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/plain (always returns just the accession)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/RF00360/id">
              [% familyURI %]/RF00360/id</a></li>
            </ul>
          </td>
        </tr>
        <tr class="even">
          <td>Secondary structure image</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/image/{type}</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the schematic secondary structure image for the family.
              {<em>type</em>} must be one of:
            </p>
            <ul>
              <li><em>cons</em> (sequence conservation)</li>
              <li><em>fcbp</em> (basepair conservation)</li>
              <li><em>cov</em> (covariation)</li>
              <li><em>ent</em> (relative entropy)</li>
              <li><em>maxcm</em> (maximum CM parse)</li>
              <li><em>norm</em> (normal)</li>
            </ul>
            <h4>Available formats:</h4>
            <ul>
              <li>image/png (always returns PNG image)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/snoZ107_R87/image/norm">
                [% familyURI %]/snoZ107_R87/image/norm</a></li>
              <li><a href="[% familyURI %]/RF00360/image/cov">
                [% familyURI %]/RF00360/image/cov</a></li>
            </ul>
          </td>
        </tr>
        <tr class="odd">
          <td>Covariance model (CM)</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/cm</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the covariance model for the specified family.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/plain (always returns raw CM)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/RF00360/cm">
                [% familyURI %]/RF00360/cm</a></li>
            </ul>
          </td>
        </tr>
        <tr class="even">
          <td>Regions</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/regions</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the list of all sequence regions for the specified
              families. <strong>Note</strong> that some families have too many
              regions to list. The server will return a status of 
              <em>403 Forbidden</em> in these cases. The plain text list is a 
              simple tab-delimited column file.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/plain</li>
              <li>text/xml</li>
              <li>application/json</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/snoZ107_R87/regions?content-type=text%2Fplain">
                [% familyURI %]/snoZ107_R87/regions</a> (plain text)</li>
              <li><a href="[% familyURI %]/RF00360/regions?content-type=text%2Fxml">
                [% familyURI %]/RF00360/regions</a> (XML)</li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>

    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="phyloTrees">Phylogenetic trees</a></h3>

    <p>
      These methods can be used to retrieve the phylogenetic tree data 
      for Rfam families, as well as pre-generated PNG images showing 
      these trees and the HTML image map associated with them.
    </p>

    <table class="details"
           summary="Phylogenetic tree methods">
      <thead>
        <tr>
          <th>Resource</th>
          <th>URI</th>
          <th>HTTP<br />method</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="odd">
          <td>Tree data</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/tree/{<em>alnType</em>}</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the raw data (NHX) for the phylogenetic tree for the specified family
              and alignment. {<em>alnType</em>} must be either <em>seed</em>
              or <em>full</em>.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/plain (always returns raw NHX file)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/RF00360/tree/seed">
                [% familyURI %]/RF00360/tree/seed</a></li>
            </ul>
          </td>
        </tr>
        <tr class="even">
          <td>Tree image</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/tree/{<em>alnType</em>}/label/{<em>label</em>}/image</td>
          <td>GET</td>
          <td class="left">

            <p>
              Returns a PNG image showing the phylogenetic tree for the specified family
              and alignment. The image can be labelled either using species names or
              sequence accessions. {<em>alnType</em>} must be either <em>seed</em> or 
              <em>full</em>. {<em>label</em>} must be either <em>species</em> or
              <em>acc</em>.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>image/png (always returns PNG image)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/RF00360/tree/seed/label/species/image">
                [% familyURI %]/RF00360/tree/seed/label/species/image</a></li>
            </ul>
          </td>
        </tr>
        <tr class="odd">
          <td>Image map</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/tree/{<em>alnType</em>}/label/{<em>label</em>}/map</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the HTML image map that is used in conjunction with the tree image
              to highlight tree nodes in the Rfam website. Note that the HTML snippet
              contains an &lt;img&gt; tag that automatically loads the tree image.
              <em>alnType</em>} must be either <em>seed</em> or <em>full</em>. 
              {<em>label</em>} must be either <em>species</em> or <em>acc</em>.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/html (always returns HTML snippet)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/RF00360/tree/seed/label/acc/map">
                [% familyURI %]/RF00360/tree/seed/label/acc/map</a></li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>

    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="structMapping">Structure mapping</a></h3>

    <p>
      These are methods related to the mapping between Rfam families, EMBL sequences
      and PDB structures.
    </p>

    <table class="details"
           summary="Structure mapping methods">
      <thead>
        <tr>
          <th>Resource</th>
          <th>URI</th>
          <th>HTTP<br />method</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="even">
          <td>Structure mapping</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/structures</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the mapping between an Rfam family, EMBL region and PDB residues.
              The plain text file has a simple, tab-delimited format.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/plain</li>
              <li>text/html</li>
              <li>application/json</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% familyURI %]/RF00002/structures?content-type=application%2Fjson">
                [% familyURI %]/RF00002/structures</a> (JSON)</li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>

    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="alignments">Alignments</a></h3>

    <p>
      The following methods can be used to return family alignments in
      various formats. You can request that the alignment is gzip compressed
      by adding the parameter &quot;<code>gzip=1</code>&quot;.
    </p>

    <table class="details"
           summary="Alignment methods">
      <thead>
        <tr>
          <th>Resource</th>
          <th>URI</th>
          <th>HTTP<br />method</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="odd">
          <td>Stockholm-format alignment</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/alignment</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the Stockholm-format seed alignment for the specified family.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/plain (always returns Stockholm-format alignment)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% c.uri_for( '/family/RF00360/alignment' ) %]">
                [% c.uri_for( '/family/RF00360/alignment' ) %]</a></li>
              <li><a href="[% c.uri_for( '/family/RF00360/alignment', { gzip = 1 } ) %]">
                [% c.uri_for( '/family/RF00360/alignment', { gzip = 1 } ) %]</a></li>
            </ul>
          </td>
        </tr>
        <tr class="even">
          <td>Formatted alignment</td>
          <td class="left">[% familyURI %]/{<em>entry</em>}/alignment/{<em>type</em>}/{<em>format</em>}</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the seed or full alignment for the specified family in the specified
              format. {<em>type</em>} must be either <em>seed</em> or <em>full</em>. 
              {<em>format</em>} must be one of:
            </p>
            <ul>
              <li><em>pfam</em> (Stockholm with sequences on a single line conservation)</li>
              <li><em>fasta</em> (gapped FASTA format)</li>
              <li><em>fastau</em> (ungapped FASTA format)</li>
              <li><em>stockholm</em> (standard Stockholm format)</li>
            </ul>
            <p>
              If {<em>format</em>} is omitted, the output format defaults to Stockholm.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/plain (always returns Stockholm-format alignment)</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% c.uri_for( '/family/RF00360/alignment/seed/fasta' ) %]">
                [% c.uri_for( '/family/RF00360/alignment/seed/fasta' ) %]</a></li>
              <li><a href="[% c.uri_for( '/family/snoZ107_R87/alignment/full/fastau' ) %]">
                [% c.uri_for( '/family/snoZ107_R87/alignment/full/fastau' ) %]</a></li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>

    <p><a class="link" rel="restTop">back to top</a></p>

    <h3><a name="sequenceSearch">Sequence searching</a></h3>

    <p>
      The following methods can be used to submit and retrieve results of
      single-sequence searches.
    </p>

    <table class="details"
           summary="Sequence search methods">
      <thead>
        <tr>
          <th>Resource</th>
          <th>URI</th>
          <th>HTTP<br />method</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="odd">
          <td>Submit search</td>
          <td class="left">[% c.uri_for( '/search/sequence' ) %]</td>
          <td>POST</td>
          <td class="left">
            <p>
              Submits a single-sequence search.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/xml</li>
              <li>application/json</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li>[% c.uri_for( '/search/sequence' ) %]</li>
            </ul>
          </td>
        </tr>
        <tr class="even">
          <td>Retrieve search results</td>
          <td class="left">[% c.uri_for( '/search/sequence' ) %]/{<em>job ID</em>}</td>
          <td>GET</td>
          <td class="left">
            <p>
              Returns the results of the job with specified ID. The job ID
              is provided in the response when submitting a search.
            </p>
            <h4>Available formats:</h4>
            <ul>
              <li>text/xml</li>
              <li>application/json</li>
            </ul>
            <h4>Examples:</h4>
            <ul>
              <li><a href="[% c.uri_for( '/search/sequence/01d3c704-591a-4a85-b7c1-366496c5a63?content-type=application%2Fjson' ) %]">
                [% c.uri_for( '/search/sequence/01d3c704-591a-4a85-b7c1-366496c5a63' ) %]</a> (JSON)</li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>

    <p><a class="link" rel="restTop">back to top</a></p>

  </div>
    
  <script type="text/javascript">
    // <![CDATA[
    document.observe( "dom:loaded", prettyPrint );
    // ]]>  
  </script>

</div>

<!-- end rest block -->
[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: Rob Finn (rdf@sanger.ac.uk), John Tate (jt6@sanger.ac.uk)

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
-%]
