
[%
# phylo.tt
# jt6 20060515 WTSI
#
# block showing the phylogenetic tree for a family
#
# $Id: phylo.tt,v 1.7 2008-07-25 13:30:45 jt6 Exp $

#-------------------------------------------------------------------------------
# specify required stylesheets and javascript files 

PROCESS "components/require.tt";

# the tabs script
sharedRequirements.js.push( "control.tabs.2.1.1.js" );

#-------------------------------------------------------------------------------
%]

<!-- start of phyloBlock -->

<div class="block" id="phyloBlock">
  <div class="handle">
    <h1>Trees</h1>
  </div>
  <div class="blockContent">
    <p>
      This page displays the predicted phylogenetic tree for the given 
      alignment.
      <span onclick="reveal( this, 'phyloNotes', false, true );"
            class="moreLink">
        More...</span>
    </p>
    
    <div id="phyloNotes" style="display: none">
      <p>
        These trees were generated using either a maximum likelihood approach
        or neighbour-joining. If the number of sequences in the alignment was
        less than or equal to 64 then the maximum likelihood approach of Rivas
        and Eddy was used [<a href="#phylo_ref_1">1</a>]. For families with 
        more than 64 sequences in the
        alignment the neighbour-joining approach with F84 distances as
        implemented in phylip was used [<a href="#phylo_ref_2">2</a>].
      </p>
      <div class="citation">
        <span class="title">
          <a name="phylo_ref_1">[1]</a> <a class="ext" href="http://selab.janelia.org/publications.html">
            Probabilistic phylogenetic inference with insertions and deletions</a>:
        </span>
        <span class="authors">
          E. Rivas, S.R. Eddy
        </span>
        <span class="ref">
          <span class="jrnl">In press</span>&nbsp;(2008)
        </span>
      </div>
      <div class="citation">
        <span class="title">
          <a name="phylo_ref_2">[2]</a> PHYLIP (Phylogeny Inference Package) version 3.6:
        </span>
        <span class="authors">
          J. Felsenstein
        </span>
        <span class="ref">
          <span class="jrnl">Distributed by the author</span>
          Department of Genome Sciences, University of Washington, Seattle.
        </span>
      </div>
      <hr />
    </div>

    <div id="treeInfo">

      <ul id="alignmentTabs" class="controlTabList">
        <li><a href="#seed_trees">Seed</a></li>
        <li><a href="#full_trees">Full</a></li>  
      </ul>
      
      <div id="seed_trees"
           class="controlTab controlTabContent">

        <form action="#"
              class="switcher">
          <div>
            [%- treeMethod = rfam.search_related( 'alignments_and_trees', { type => 'seed' } ).treemethod;
            IF treeMethod %]
            <p>
              This tree was built using the 
              <em>[% treeMethod %]</em>
              method.
            </p>
            [%- END %]
            <span>Label the trees using </span>
            <label for="seed_species">
              <input type="radio" 
                     name="seed_tree" 
                     id="seed_species"
                     checked="checked" />
              species names
            </label>
            or
            <label for="seed_acc">
              <input type="radio" 
                     name="seed_tree" 
                     id="seed_acc" />
              accessions.
            </label>
          </div>
        </form>
      
        <div class="treeHolder" id="seed_species_tree"></div>
        <div class="treeHolder" id="seed_acc_tree" style="display: none"></div>

      </div>

      <div id="full_trees"
           class="controlTab controlTabContent"
           style="display: none">

        <form action="#"
              class="switcher">
          <div>
            <p>
              This tree was built using the 
              <em>[% rfam.search_related('alignments_and_trees',{type=>'full'}).treemethod %]</em>
              method.
            </p>
            <span>Label the trees using </span>
            <label for="full_species">
              <input type="radio" 
                     name="full_tree" 
                     id="full_species"
                     checked="checked" />
              species names
            </label>
            or
            <label for="full_acc">
              <input type="radio" 
                     name="full_tree" 
                     id="full_acc" />
              accessions.
            </label>
          </div>
        </form>
      
        <div class="treeHolder" id="full_species_tree"></div>
        <div class="treeHolder" id="full_acc_tree" style="display: none"></div>
        
      </div>

      <p>
        <strong>Note:</strong> You can also download the data files for the
        <a href="[% c.uri_for( '/family', acc, 'tree/seed' ) | html %]">seed</a> or the
        <a href="[% c.uri_for( '/family', acc, 'tree/full' ) | html %]">full</a>
        trees.
      </p>

    </div>

    <div id="treeMissing" style="display: none">
      <p>
        We do not have tree information for this family. This is most likely
        due to the size of the family and the number of species covered. For
        very large families it is too computationally expensive to calculate
        trees and the resulting tree images would be too large to display in 
        a browser.
      </p>
    </div>

    <div id="tip_holder"></div>
    
    <script type="text/javascript">
      // <![CDATA[
      
      // add a listener to load the trees using AJAX once the page has loaded
      var loaded_trees = 4;
      document.observe( "dom:loaded", function() {

        ["seed","full"].each( function( alnType ) {
    
          // submit AJAX requests for each of the label types
          ["species","acc"].each( function(label) {
    
            var ajaxUri = "[% c.uri_for( '/family', acc, 'tree/' ) %]" + alnType 
                          + "/label/" + label
                          + "/map";
            var r = new Ajax.Request(
              ajaxUri,
              { method:     "get",
                onSuccess: function( oResponse ) {
                  $(alnType+"_"+label+"_tree").update( oResponse.responseText );
                },
                onFailure: function( oResponse ) {
                  $("treeInfo").hide();
                  $("treeMissing").show();
                }
              }
            );
            
          } ); // end of "each label"
          
        } ); // end of "each alignment type"
      
      } ); // end of onload function
      
      // add the tab controller
      var alignmentTabsController = new Control.Tabs( "alignmentTabs", 
                                                      { defaultTab: "seed_trees" } );


      // a function to switch the visible tree. We walk up the DOM from the 
      // clicked form element, then select the tree divs below that node
      var switcher = function( e ) {
        // console.debug( "switching form " + e.element().id );
        e.element().up("div",1).select("div.treeHolder").invoke("toggle");
      };

      // add listeners to the tree-switcher forms
      $$("form.switcher").each( function(f) {
        f.observe( "change", switcher );
      } );


      // somewhere to store the node information for the map areas
      var areas = new Hash();
      
      // parse the node name into the components that we can use to build the 
      // tooltip contents
      //
      // 104.02_AC135465.23/41412-41522_Medicago_truncatula_barrel_medic
      // score_accession.version/start-end_species
      //   0       1        2      3    4    5
      var regexp = new RegExp();
      regexp.compile( "^(\\d+\\.\\d+)_(\\w+)\\.(\\d+)\\/(\\d+)\\-(\\d+)\\_(.*)$" );

      // this is a template for the HTML that we'll use to build the tip
      var tipTemplate = new Template( '<div id="tipContents" \
     class="tipContents" \
     title="#{acc}.#{version}" \
     style="display: none"> \
  <dl> \
    <dt>Range:</dt> \
    <dd>#{start} - #{end}</dd> \
    <dt>Score:</dt> \
    <dd>#{score}</dd> \
    <dt>Species:</dt> \
    <dd> \
      <a class="ext" \
         href="http://www.ebi.ac.uk/ena/data/view/#{acc}"> \
        #{species}</a></dd> \
  </dl> \
</div> ' );


      // optimisation: cache the tipContents, floating and fixed divs. Store them in 
      // a hash, keyed on some smaller component of the area id, which is the same
      // for both species- and accession-labelled trees


      // a function to build and show a tip for an area
      var tipVisible = false;
      var showTreeTip = function( area ) {

        // things will get confused if we try to show more tips on multiple
        // nodes, so we maintain a flag to tell us if a tip is visible and
        // bail if so
        if ( tipVisible ) {
          // console.debug( "a tip is already visible; aborting" );
          return;
        }

        // var area = e.element();
        // console.debug( "area '" + area.id + "' coordinates: |" + area.coords + "|" );

        // get the node information for this area
        var nodeInfo = areas.get( area.id );

        // run our compiled regex on it, to get a list of values that we'll 
        // stuff into a div and use later to build a tooltip
        var matches = regexp.exec( nodeInfo );
        var values  = { score:   matches[1],
                        acc:     matches[2],
                        version: matches[3],
                        start:   matches[4],
                        end:     matches[5],
                        species: matches[6].gsub("_"," ") };
        var tipContents = tipTemplate.evaluate( values );

        // two new divs that will be placed over the top of the target area and
        // used as attachment points for Tip objects
        var fixed    = new Element( "div", { "class": "targetArea", id: "fixed" } );
        var floating = new Element( "div", { "class": "targetArea", id: "floating" } );

        // position them using the coordinates of the area
        var coords = [];
        area.coords.scan( /\d+/, function( match ) { coords.push( Number( match[0] ) ) } );
        // console.debug( "coords: |" + coords.inspect() + "|" );

        var width  = coords[2] - coords[0] + 1;
        var height = coords[3] - coords[1] + 1;
        var left   = coords[0];
        var top    = coords[1];

        // console.debug( "XxY+W+H: " + left + "x" + top + "+" + width + "+" + height );

        fixed.setStyle( {
          left:   left+ "px",
          top:    top + "px",
          width:  width + "px",
          height: height + "px"
        } );

        floating.setStyle( {
          left:   left + "px",
          top:    top + "px",
          width:  width + "px",
          height: height + "px"
        } );

        // stuff the new divs into the "treeHolder" div that encloses the 
        // current area. But first, belt-and-braces fashion, get rid of any
        // target areas or tip content divs that might be hanging around, just
        // in case we get confused about which to use
        var holder = area.up("div.treeHolder");
        holder.select( "div.targetArea" ).invoke( "remove" );
        holder.select( "div.tipContents" ).invoke( "remove" );
        holder.insert( { bottom: tipContents } );
        holder.insert( { bottom: fixed } );
        holder.insert( { bottom: floating } );

        // the actual Tip objects
        var fixedTip =
          new Tip( fixed,
                   $("tipContents").cloneNode(true),
                   {
                     hideOn: { element: "closeButton", event: "click" },
                     showOn: "click",
                     style:  "rfam",
                     target: fixed,
                     title:  $("tipContents").title
                   } );
        var floatingTip =
          new Tip( floating,
                   $("tipContents").cloneNode(true),
                   {
                     style:  "rfam",
                     target: floating,
                     title:  $("tipContents").title
                   } );

        // add a bunch of listeners to take care of showing and hiding tips

        // set the "we're showing a tip" flag when one is shown
        floating.observe( "prototip:shown", function() {
          // console.debug( "showing floating tip" );
          tipVisible = true;
        } );

        // watch for the mouse moving out of the floating area; remove
        // both floating and fixed areas, as well as the tip contents node,
        // when we lose focus
        floating.observe( "mouseout", function(e) {
          // console.debug( "mouseout on " + e.element().id );
          $("floating").prototip.remove();
          $("floating").remove();
          $("fixed").remove();
          $("tipContents").remove();
          tipVisible = false;
        } );

        // watch for clicks on the floating div, which really means that the 
        // user clicked on the area; completely remove the floating tip and 
        // show the fixed one
        floating.observe( "click", function(e) {
          // console.debug( "click on " + e.element().id );

          $("floating").prototip.remove();
          $("floating").remove();
          $("fixed").prototip.show();
        } );

        // watch for the fixed tip being closed and then tidy up
        fixed.observe( "prototip:hidden", function() {
          // console.debug( "closed fixed tip" );

          // tear down everything that we just built
          $("fixed").prototip.remove();
          $("fixed").remove();
          $("tipContents").remove();
          tipVisible = false;
        } );

      };

      // ]]>
    </script>

  </div>
</div>

<!-- end of phyloBlock -->
[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: John Tate (jt6@sanger.ac.uk), Paul Gardner (pg5@sanger.ac.uk), 
         Jennifer Daub (jd7@sanger.ac.uk)

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
-%]
