[%
# treeMap.tt
# jt6 20060511 WTSI
#
# format the image map for the species tree.
#
# TODO this needs to be re-factored to walk through the list of nodes only once.
# We should be looping just once and capturing output from the two components
# as we go.
#
# TODO refactor to reduce the number of DOM elements and JS objects that we 
# create
#
# $Id: treeMap.tt,v 1.4 2008-07-16 13:21:05 jt6 Exp $

# tell the wrapper not to add any header or footer
META naked = 1;

# first generate a div for each node, which will be used to build the tooltip 
# body
FOREACH node IN tree.node_array;
  
  # parse the node name into the components that we can use to build the 
  # tooltip contents
  #
  # 104.02_AC135465.23/41412-41522_Medicago_truncatula_barrel_medic
  # score_accession.version/start-end_species
  #   0       1        2      3    4    5

  matches = node.L.match( '^(\d+\.\d+)_(\w+)\.(\d+)\/(\d+)\-(\d+)\_(.*)$' );
    
  # tidy up the species name
  species = matches.5.replace( "\_", " " );
  
  IF node.area AND matches.1 %]
  <div id="tipContents_[% label; "_"; alnType; loop.index %]"
       class="tipContents treetip"
       title="[% matches.1; "."; matches.2 %]"
       style="display: none">
    <dl>
      <dt>Range:</dt>
      <dd>[% matches.3 %] - [% matches.4 %]</dd>
      <dt>Score:</dt>
      <dd>[% matches.0 %]</dd>
      <dt>Species:</dt>
      <dd>
        <a class="ext" 
           href="http://srs.ebi.ac.uk/srsbin/cgi-bin/wgetz?-e+[embl-AccNumber:'[% matches.1 %]']">
          [% species %]</a></dd>
    </dl>
  </div>

  [%- END; # of IF
END;

# we need to add two tooltips for each tree node, one floating, one fixed. Since
# we can only have one tip per DOM element, we need to add two extra DOM
# elements, that we'll use to hang the tips off. So that these extra divs
# don't obscure the areas, we'll add them to a separate wrapper div %]

<div id="tip_holder_[% label; "_"; alnType %]"></div>

[%- # and then the image itself and the map %]

<img src="[% c.uri_for( "/family/tree/image", { acc => acc, alnType => alnType, label => label } ) | html %]"
     id="[% label; "_"; alnType %]_img"
     usemap="#[% label; "_"; alnType %]_map" />

<map id="[% label; "_"; alnType %]_map"
     name="[% label; "_"; alnType %]_map" />

[%- # finally, the javascript that will generate tooltip objects for each node %]
<script type="text/javascript">
  // <![CDATA[

  [%- # we use these for each tip in turn... %]
  var width;
  var height;
  var left;
  var top;
  var fixed;
  var floating;
  var area;
  var contents;

[%- FOREACH node IN tree.node_array;

  # make sure this is a node that will have a tip
  matches = node.L.match( '^(\d+\.\d+)_(\w+)\.(\d+)\/(\d+)\-(\d+)\_(.*)$' );

  NEXT UNLESS node.area AND matches.1;
  
  # we are going to build two tips for each area. One tip will be the floating 
  # one, the other will be the fixed one. Because we can only have one tip 
  # per HTML element, we need two "areas"

  # build the two divs and the area. Give them sensible IDs, so we can add event 
  # observers later %]
  
  fixed    = new Element( "div", 
                          { "class": "targetArea",
                            id:      "fixed_[% label; "_"; alnType; loop.index %]" } );
  floating = new Element( "div", 
                          { "class": "targetArea",
                            id:      "floating_[% label; "_"; alnType; loop.index %]" } ); 
  area     = new Element( "area", 
                          { coords:  "[% node.area.join(',') %]",
                            id:      "area_[% label; "_"; alnType; loop.index %]" } ); 

  $("tip_holder_[% label; "_"; alnType %]").insert( fixed );
  $("tip_holder_[% label; "_"; alnType %]").insert( floating );
  $("[% label; "_"; alnType %]_map").insert( area );

  [%- 
  # and use CSS styles to position them
   
  # get the coordinates of the area straight from the node. Note the 
  # adjustments though; make the area a little taller %]

  width  = [% node.area.2 - node.area.0 %];
  height = [% node.area.3 - node.area.1 %] + 2;
  left   = [% node.area.0 %];
  top    = [% node.area.1 %];

  [%-
  # because they have to be different... this is a fairly arbitrary fix
  # for the offset that happens only in IE. It fails to line up when the font
  # size is anything other than "medium" on my box, but it is marginally better
  # than nothing %]
  if ( Prototype.Browser.IE ) {
    left -= 16;
  }

  fixed.setStyle( {
    left:   left + "px",
    top:    top + "px",
    width:  width + "px",
    height: height + "px",
    backgroundColor: "#F00"
  } );

  floating.setStyle( {
    left:   left - 1 + "px",
    top:    top - 1 + "px",
    width:  width + "px",
    height: height + "px",
    backgroundColor: "#0F0"
  } );

  [%- 
  # and now generate the tips

  # the fixed one is activated by the observer but hidden by a click on its
  # close button

  # this will be the contents of the tip %]

  contents = $("tipContents_[% label; "_"; alnType; loop.index %]");

  var fixed_tip_[% label; "_"; alnType; loop.index %] =
    new Tip( fixed,
             contents.cloneNode(true),
             {
               hideOn: { element: "closeButton", event: "click" },
               showOn: "click",
               style:  "rfam",
               target: fixed,
               title:  contents.title
             } );

  var floating_tip_[% label; "_"; alnType; loop.index %] =
    new Tip( area,
             contents.cloneNode(true),
             {
               style:  "rfam",
               target: floating,
               title:  contents.title
             } );

  [%- 
  # finally, add an observer to hide the floating tip and show the fixed 
  # one when the user clicks on the area %]

  $("area_[% label; "_"; alnType; loop.index %]").observe( "click", function() {
    $("area_[% label; "_"; alnType; loop.index %]").prototip.hide();
    $("fixed_[% label; "_"; alnType; loop.index %]").prototip.show();
  } );

  /* ------------------------------------------------------------------------ */
  
[% END; # of "foreach node" %]

  // ]]>
</script>

[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: John Tate (jt6@sanger.ac.uk), Paul Gardner (pg5@sanger.ac.uk), 
         Jennifer Daub (jd7@sanger.ac.uk)

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
-%]
