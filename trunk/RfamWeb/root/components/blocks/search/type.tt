[%
# type.tt
# jt6 20081121 WTSI
# 
# build the entry type search block
#
# $Id: type.tt,v 1.3 2009-10-08 16:01:49 jt6 Exp $

#-------------------------------------------------------------------------------
# specify required stylesheets and javascript files 

PROCESS "components/require.tt";

requirements.css.push( "search.css" );
requirements.css.push( "forms.css" );
requirements.cssIeAll.push( "forms_all_ie.css" );

sharedRequirements.css.push( "tree.css" );
#sharedRequirements.js.push( "yui/TaskNode.js" );
#sharedRequirements.js.push( "treeTweak.js" );

#-------------------------------------------------------------------------------
%]

<!-- start type search block -->

<div class="block" id="searchTypeBlock">
  <div class="handle">
    <h1>Entry type search</h1>
  </div>
  <div class="blockContent">

    <p>
      Search for Rfam families by type.
      <span class="moreLink" onclick="reveal(this,'typeNotes',false, true)">More...</span>
    </p>
    <div id="typeNotes" style="display: none">
      <p> 
        Each family in Rfam is assigned into a type category. This is based on
        its function. These categories are hierarchical such that something
        classified as a ncRNA 'gene' can be further sub-classified into a
        'gene;snoRNA' which can then be further sub-classified as
        'gene;snoRNA;CD-box'. A full list of the existing 'type' categories we
        have is provided below:
      </p>
      <ul>
        <li>Cis-reg;</li>
        <li>Cis-reg; IRES;</li>
        <li>Cis-reg; frameshift_element;</li>
        <li>Cis-reg; leader;</li>
        <li>Cis-reg; riboswitch;</li>
        <li>Cis-reg; thermoregulator;</li>
        <li>Gene;</li>
        <li>Gene; CRISPR;</li>
        <li>Gene; antisense;</li>
        <li>Gene; miRNA;</li>
        <li>Gene; rRNA;</li>
        <li>Gene; ribozyme;</li>
        <li>Gene; sRNA;</li>
        <li>Gene; snRNA;</li>
        <li>Gene; snRNA; snoRNA; CD-box;</li>
        <li>Gene; snRNA; snoRNA; HACA-box;</li>
        <li>Gene; snRNA; snoRNA; scaRNA;</li>
        <li>Gene; snRNA; splicing;</li>
        <li>Gene; tRNA;</li>
        <li>Intron;</li>
      </ul>
      <p>
        This search by type page allows you to browse the families by these
        categories. The tick boxes at each level in the tree diagram allow you
        to get access to the families assigned at each type level.
      </p>
      <p>
        For example: To obtain all the families of ncRNA
        genes - excluding the snoRNAs- you should tick the box 'gene'. All of the
        boxes for the sub levels of gene will become highlighted.  This would return you all
        families assigned to the following categories.
      </p>
      <ul>
        <li>gene</li>
        <li>gene;antisense</li>
        <li>gene;microRNA</li>
        <li>gene;ribozyme</li>
        <li>gene;sRNA</li>
        <li>gene;snRNA</li>
        <li>gene;snoRNA;CD-box</li>
        <li>gene;snoRNA;HACA-box</li>
        <li>gene;snoRNA;scaRNA</li>
        <li>gene;tRNA</li>
      </ul>
      <p>
        To exclude all the snoRNA you can uncheck the 'snoRNA' box. This will
        provide you with a list of all families which are 'gene' type but not
        include the snoRNAs.
      </p>
      <p>
        <b>You should note</b> that there are some families assigned to the
        'gene' category that are not further sub classified into 'antisense',
        'microRNA', 'snRNA' etc. To obtain only these families you should check
        the gene box and then uncheck all the sub category boxes.
      </p>
      <p>
        Alternatively, if perhaps you are actually only interested in the
        snoRNAs - you can uncheck the 'gene' box and only check the 'snoRNA'
        box. This will return all the snoRNAs in each of the the three snoRNA
        sub categories (CD-box,HACA-box,scaRNA).
      </p>
      <p>
        You can use the flexibility of this tree like structure to select
        for or exclude specific functional groups. The categories you are
        interested in do not need to be within the same branch of the
        tree. You can select categories from various branches such as just
        'riboswitches' and 'scaRNA' to get a list of all the families that are
        scaRNAs or riboswitches.
      </p>
      <p>
        The results table you obtain will list all the families in your
        selected categories by Rfam_accession, ID, type and description. You
        can then sort the results on the column data by clicking on the column headers.
      </p>
      <hr />
    </div>

    <div class="formWrapper">

      [% IF typeSearchError %]
      <div class="error">
        <h2>Error</h2>
        [% typeSearchError %]
      </div>
      [% END %]
  
      <form method="post" 
            id="proteinTypeSearchForm"
            onsubmit="return submitForm();"
            action="[% c.uri_for( "/search/type" ) %]">
    
        <div class="row">
          <label for="q">Entry types</label>
          <div id="treeDiv" class="ygtv-checkbox"></div>
        </div>

        <div class="row">
          <label class="blankLabel">Submit</label>
          <input class="submit"
                 type="submit"
                 name="submit"
                 value="Submit" />
          <input class="reset"
                 type="reset"
                 name="reset"
                 value="Reset" 
                 onclick="tree.getRoot().children.invoke('uncheck');" />
          <input class="example" 
                 type="button" 
                 value="Example"
                 onclick="fillTypeExample();" />

          <input type="hidden"
                 id="typePaths"
                 name="paths" />
        </div>

      </form>
  
    </div>
  
  </div>

  <script type="text/javascript">
    // <![CDATA[

    var treeData = [
      { label: "Gene", path: "Gene;",
        children: [ { label: "CRISPR", path: "Gene; CRISPR;" },
                    { label: "anti-sense", path: "Gene; antisense;" },
                    { label: "microRNA", path: "Gene; miRNA;" },
                    { label: "rRNA", path: "Gene; rRNA;" },
                    { label: "ribozyme", path: "Gene; ribozyme;" },
                    { label: "sRNA", path: "Gene; sRNA;" },
                    { label: "snRNA", path: "Gene; snRNA;",
                      children: [ { label: "snoRNA", path: "Gene; snRNA; snoRNA;",
                                    children: [ { label: "CD-box", path: "Gene; snRNA; snoRNA; CD-box;" },
                                                { label: "HACA-box", path: "Gene; snRNA; snoRNA; HACA-box;" },
                                                { label: "scaRNA", path: "Gene; snRNA; snoRNA; scaRNA;" } ] },
                                  { label: "splicing", path: "Gene; snRNA; splicing;" } ] },
                    { label: "tRNA", path: "Gene; tRNA;" } ] },
      { label: "Intron", path: "Intron;" },
      { label: "Cis-regulatory element", path: "Cis-reg;",
        children: [ { label: "IRES", path: "Cis-reg; IRES;" },
                    { label: "Frameshift element", path: "Cis-reg; frameshift_element;" },
                    { label: "leader", path: "Cis-reg; leader;" },
                    { label: "riboswitch", path: "Cis-reg; riboswitch;" },
                    { label: "thermoregulator", path: "Cis-reg; thermoregulator;" } ] }
    ];
    
    var exampleData = { "sRNA": 1,
                         "riboswitch" : 1 };

    var tree;
    var nodes = [];
    function treeInit() {
      var build = function ( parent, oConfig ) {
        var i, item, node;
        for ( var i = 0; i < oConfig.length; i++ ) {
          item = oConfig[i];
          // node = new YAHOO.widget.HTMLNode(  item.label, parent, item.path, true, false, false );
          node = new YAHOO.widget.HTMLNode( { html: item.label, data: item.path }, parent, true );
          nodes.push( node );
          if ( item.children ) {
            build( node, item.children );
          }
        }
      };
      tree = new YAHOO.widget.TreeView( "treeDiv" );
      build( tree.getRoot(), treeData );
      tree.subscribe( "clickEvent", tree.onEventToggleHighlight );
      tree.setNodesProperty( "propagateHighlightUp",   true );
      tree.setNodesProperty( "propagateHighlightDown", true );

      tree.render();
    }
    YAHOO.util.Event.onDOMReady( treeInit );

    function submitForm() {
      var list = tree.getNodesByProperty( "highlightState", 1 )  // select only highlighted nodes
                     .collect( function( s ) { return s.data } ) // get their "data" property, which stores the type
                     .join( "," );                               // join...
      $("typePaths").setValue( list );                           // and set as a hidden value in the form
      return true;                                               // which can be submitted now
    }

    function fillTypeExample() {
      nodes.each( function( node ) {
        node.uncheck();
        if ( exampleData[node.data] ) {
          node.check();
        }
      } );
    }

    // ]]>
  </script>

</div>

<!-- end type search block -->
[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: Rob Finn (rdf@sanger.ac.uk), John Tate (jt6@sanger.ac.uk)

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
-%]
