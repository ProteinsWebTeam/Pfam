/* Generated by Cython 0.12.1 on Tue Jun 22 12:42:31 2010 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyString_Type                PyUnicode_Type
  #define PyString_CheckExact          PyUnicode_CheckExact
#else
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_CheckExact           PyString_CheckExact
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)

#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#else
  #define _USE_MATH_DEFINES
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#include <math.h>
#define __PYX_HAVE_API__cadda
#include "string.h"
#include "stdlib.h"
#include "stdio.h"
#include "cadda.h"
#include "adda.h"

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #else
    #define CYTHON_INLINE 
  #endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyBytes_FromString          PyString_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyString_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyString_AsString
#else
#define __Pyx_PyBytes_FromString          PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyBytes_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyBytes_AsString
#endif

#define __Pyx_PyBytes_FromUString(s)      __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)        ((unsigned char*) __Pyx_PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

#if !defined(T_PYSSIZET)
#if PY_VERSION_HEX < 0x02050000
#define T_PYSSIZET T_INT
#elif !defined(T_LONGLONG)
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))  ? T_INT  : \
        ((sizeof(Py_ssize_t) == sizeof(long)) ? T_LONG : -1))
#else
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))          ? T_INT      : \
        ((sizeof(Py_ssize_t) == sizeof(long))         ? T_LONG     : \
        ((sizeof(Py_ssize_t) == sizeof(PY_LONG_LONG)) ? T_LONGLONG : -1)))
#endif
#endif


#if !defined(T_ULONGLONG)
#define __Pyx_T_UNSIGNED_INT(x) \
        ((sizeof(x) == sizeof(unsigned char))  ? T_UBYTE : \
        ((sizeof(x) == sizeof(unsigned short)) ? T_USHORT : \
        ((sizeof(x) == sizeof(unsigned int))   ? T_UINT : \
        ((sizeof(x) == sizeof(unsigned long))  ? T_ULONG : -1))))
#else
#define __Pyx_T_UNSIGNED_INT(x) \
        ((sizeof(x) == sizeof(unsigned char))  ? T_UBYTE : \
        ((sizeof(x) == sizeof(unsigned short)) ? T_USHORT : \
        ((sizeof(x) == sizeof(unsigned int))   ? T_UINT : \
        ((sizeof(x) == sizeof(unsigned long))  ? T_ULONG : \
        ((sizeof(x) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))))
#endif
#if !defined(T_LONGLONG)
#define __Pyx_T_SIGNED_INT(x) \
        ((sizeof(x) == sizeof(char))  ? T_BYTE : \
        ((sizeof(x) == sizeof(short)) ? T_SHORT : \
        ((sizeof(x) == sizeof(int))   ? T_INT : \
        ((sizeof(x) == sizeof(long))  ? T_LONG : -1))))
#else
#define __Pyx_T_SIGNED_INT(x) \
        ((sizeof(x) == sizeof(char))  ? T_BYTE : \
        ((sizeof(x) == sizeof(short)) ? T_SHORT : \
        ((sizeof(x) == sizeof(int))   ? T_INT : \
        ((sizeof(x) == sizeof(long))  ? T_LONG : \
        ((sizeof(x) == sizeof(PY_LONG_LONG))   ? T_LONGLONG : -1)))))
#endif

#define __Pyx_T_FLOATING(x) \
        ((sizeof(x) == sizeof(float)) ? T_FLOAT : \
        ((sizeof(x) == sizeof(double)) ? T_DOUBLE : -1))

#if !defined(T_SIZET)
#if !defined(T_ULONGLONG)
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))  ? T_UINT  : \
        ((sizeof(size_t) == sizeof(unsigned long)) ? T_ULONG : -1))
#else
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))          ? T_UINT      : \
        ((sizeof(size_t) == sizeof(unsigned long))         ? T_ULONG     : \
        ((sizeof(size_t) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))
#endif
#endif

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;


/* Type declarations */

/* "/software/pfam/python/adda/src/cadda.pyx":242
 * 
 * ## todo: convert to a class
 * ctypedef struct Neighbour:             # <<<<<<<<<<<<<<
 *     Nid sbjct_nid
 *     float evalue
 */

typedef struct {
  Nid sbjct_nid;
  float evalue;
  uResidue query_start;
  uResidue query_end;
  uResidue sbjct_start;
  uResidue sbjct_end;
  Length query_alen;
  Length sbjct_alen;
  char *query_ali;
  char *sbjct_ali;
} __pyx_t_5cadda_Neighbour;

/* "/software/pfam/python/adda/src/cadda.pyx":262
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)
 * 
 * cdef class PairsDBNeighbourRecord             # <<<<<<<<<<<<<<
 * cdef fromPairsDBNeighbour( Neighbour * dest,
 *                            Nid sbjct_nid,
 */

struct __pyx_obj_5cadda_PairsDBNeighbourRecord {
  PyObject_HEAD
  char *query_token;
  char *sbjct_token;
  float evalue;
  uResidue query_start;
  uResidue query_end;
  uResidue sbjct_start;
  uResidue sbjct_end;
  char *query_ali;
  char *sbjct_ali;
};

/* "/software/pfam/python/adda/src/cadda.pyx":792
 *         return r
 * 
 * cdef class PairsDBNeighbourRecordOldFormat(PairsDBNeighbourRecord):             # <<<<<<<<<<<<<<
 *     """a pairwise alignment in old pairsdb format.
 * 
 */

struct __pyx_obj_5cadda_PairsDBNeighbourRecordOldFormat {
  struct __pyx_obj_5cadda_PairsDBNeighbourRecord __pyx_base;
};

/* "/software/pfam/python/adda/src/cadda.pyx":627
 *     fclose(output_f)
 * 
 * cdef class IndexedNeighbours:             # <<<<<<<<<<<<<<
 *     """access to indexed ADDA graph."""
 * 
 */

struct __pyx_obj_5cadda_IndexedNeighbours {
  PyObject_HEAD
  FILE *mFile;
  FileIndex *mIndex;
  Nid mNids;
};

/* "/software/pfam/python/adda/src/cadda.pyx":802
 *         self.sbjct_start -= 1
 * 
 * cdef class NeighbourProxy:             # <<<<<<<<<<<<<<
 *     '''wrapper for passing around a neighbour.'''
 *     cdef Nid query_nid
 */

struct __pyx_obj_5cadda_NeighbourProxy {
  PyObject_HEAD
  Nid query_nid;
  __pyx_t_5cadda_Neighbour *neighbour;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */

static CYTHON_INLINE int __Pyx_mod_int(int, int); /* proto */


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
    }
    return r;
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    }
    else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE long __Pyx_NegateNonNeg(long b) { return unlikely(b < 0) ? b : !b; }
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}

static PyObject* __Pyx_PyEval_CallObjectWithKeywords(PyObject*, PyObject*, PyObject*); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name, const char *modname); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_Nid(Nid);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uResidue(uResidue);

static CYTHON_INLINE Nid __Pyx_PyInt_from_py_Nid(PyObject *);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from cadda */

static PyTypeObject *__pyx_ptype_5cadda_PairsDBNeighbourRecord = 0;
static PyTypeObject *__pyx_ptype_5cadda_IndexedNeighbours = 0;
static PyTypeObject *__pyx_ptype_5cadda_PairsDBNeighbourRecordOldFormat = 0;
static PyTypeObject *__pyx_ptype_5cadda_NeighbourProxy = 0;
static void __pyx_f_5cadda_init_neighbour(__pyx_t_5cadda_Neighbour *); /*proto*/
static PyObject *__pyx_f_5cadda_destroy_neighbour(__pyx_t_5cadda_Neighbour *); /*proto*/
static PyObject *__pyx_f_5cadda_fromPairsDBNeighbour(__pyx_t_5cadda_Neighbour *, Nid, struct __pyx_obj_5cadda_PairsDBNeighbourRecord *); /*proto*/
static PyObject *__pyx_f_5cadda_toNeighbour(Nid, __pyx_t_5cadda_Neighbour *); /*proto*/
static PyObject *__pyx_f_5cadda_toFile(__pyx_t_5cadda_Neighbour *, FILE *); /*proto*/
static PyObject *__pyx_f_5cadda_fromFile(__pyx_t_5cadda_Neighbour *, FILE *); /*proto*/
static PyObject *__pyx_f_5cadda_toStdout(Nid, __pyx_t_5cadda_Neighbour *); /*proto*/
static unsigned char *__pyx_f_5cadda_toBuffer(__pyx_t_5cadda_Neighbour *, unsigned char *); /*proto*/
static unsigned char *__pyx_f_5cadda_fromBuffer(__pyx_t_5cadda_Neighbour *, unsigned char *); /*proto*/
#define __Pyx_MODULE_NAME "cadda"
int __pyx_module_is_main_cadda = 0;

/* Implementation of cadda */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_StopIteration;
static char __pyx_k_1[] = "\t";
static char __pyx_k_2[] = "AlignmentFormatEmissions";
static char __pyx_k_3[] = "%i\t%i\t%f\t%i\t%i\t%s\t%i\t%i\t%s\n";
static char __pyx_k_4[] = "output_filename_graph";
static char __pyx_k_5[] = "output_filename_index";
static char __pyx_k_6[] = "memory allocation for index failed";
static char __pyx_k_7[] = "opening of file %s failed";
static char __pyx_k_8[] = "indexing progress: %i/%i = %5.1f";
static char __pyx_k_9[] = "memory overflow in indexing: nid=%i, neighbours=%i, used=%i, allocated=%i";
static char __pyx_k_10[] = "error %i while writing compressed buffer to file for nid %i (%i neighbours)";
static char __pyx_k_11[] = "input_filename_graph";
static char __pyx_k_12[] = "error while reading data for %i";
static char __pyx_k_13[] = "could not open index %s ";
static char __pyx_k_14[] = "could not read index from %s";
static char __pyx_k_15[] = "out of memory when allocating index for %i nids";
static char __pyx_k_16[] = "graph is empty";
static char __pyx_k_17[] = "nid %i out of range, maximum is %i";
static char __pyx_k_18[] = "Could not go to file position for nid %i";
static char __pyx_k_19[] = "wrong item count while reading from graph";
static char __pyx_k_20[] = "index returned wrong nid: %i instead of %i";
static char __pyx_k_21[] = "%s\t%s\t%f\t%i\t%i\t%s\t%i\t%i\t%s";
static char __pyx_k_22[] = "parsing error (%i) in line `%s`";
static char __pyx_k_23[] = "#";
static char __pyx_k_24[] = "ignoring invalid alignment: %s";
static char __pyx_k_25[] = "PairsDBNeighbourIterator";
static char __pyx_k_26[] = "PairsDBNeighboursRecord";
static char __pyx_k_27[] = "\nPyrex extension classes used by `cadda.py`.\n";
static char __pyx_k_28[] = "iterate over neighbours in input graph and translate\n    identifiers to nids\n\n    Identifiers not in filter are ignored.\n\n    The iterator returns query_nid and an object of type :class:`Neighbour`\n    for each iteration. The caller takes ownership of the object.\n    ";
static char __pyx_k_29[] = "PairsDBNeighbourIteratorOldFormat";
static char __pyx_k_30[] = "PairsDBNeighboursIterator";
static char __pyx_k_31[] = "setFilenameSegments (line 136)";
static char __pyx_k_32[] = "setFilenameGraph (line 140)";
static char __pyx_k_33[] = "setFilenameIndex (line 144)";
static char __pyx_k_34[] = "setFilenameMst (line 148)";
static char __pyx_k_35[] = "setFilenameNids (line 152)";
static char __pyx_k_36[] = "setFilenameDomains (line 156)";
static char __pyx_k_37[] = "setFilenameDomainGraph (line 160)";
static char __pyx_k_38[] = "setFilenameDomainGraph";
static char __pyx_k_39[] = "setFilenameTransfers (line 164)";
static char __pyx_k_40[] = "setFilenameTransfers";
static char __pyx_k_41[] = "setLogLevel (line 168)";
static char __pyx_k_42[] = "setSigmoidK (line 172)";
static char __pyx_k_43[] = "setSigmoidC (line 176)";
static char __pyx_k_44[] = "setSigmoidMax (line 180)";
static char __pyx_k_45[] = "setSigmoidMin (line 184)";
static char __pyx_k_46[] = "setExponentialE (line 188)";
static char __pyx_k_47[] = "setExponentialF (line 192)";
static char __pyx_k_48[] = "setRelativeOverhang (line 196)";
static char __pyx_k_49[] = "setOnlyQuery (line 200)";
static char __pyx_k_50[] = "setResolution (line 204)";
static char __pyx_k_51[] = "setDescend (line 208)";
static char __pyx_k_52[] = "setDisallowShortening (line 212)";
static char __pyx_k_53[] = "setDisallowShortening";
static char __pyx_k_54[] = "setMaxIterations (line 216)";
static char __pyx_k_55[] = "setReportStep (line 220)";
static char __pyx_k_56[] = "setEvalueThresholdTrustedLinks (line 224)";
static char __pyx_k_57[] = "setEvalueThresholdTrustedLinks";
static char __pyx_k_58[] = "NeighbourRecord.getAlignment (line 294)";
static char __pyx_k_59[] = "indexGraph (line 419)";
static char __pyx_k_60[] = "reindexGraph (line 559)";
static char __pyx_k_61[] = "IndexedNeighbours.getNeighbours (line 658)";
static char __pyx_k_62[] = "PairsDBNeighbourRecord.getAlignment (line 783)";
static char __pyx_k_63[] = "PairsDBNeighbourRecord";
static char __pyx_k_64[] = "PairsDBNeighboursIterator.__init__ (line 881)";
static char __pyx_k__rb[] = "rb";
static char __pyx_k__wb[] = "wb";
static char __pyx_k__map[] = "map";
static char __pyx_k__nid[] = "nid";
static char __pyx_k__copy[] = "copy";
static char __pyx_k__info[] = "info";
static char __pyx_k__join[] = "join";
static char __pyx_k__last[] = "last";
static char __pyx_k__line[] = "line";
static char __pyx_k__next[] = "next";
static char __pyx_k__self[] = "self";
static char __pyx_k__warn[] = "warn";
static char __pyx_k__mFile[] = "mFile";
static char __pyx_k__mNids[] = "mNids";
static char __pyx_k__evalue[] = "evalue";
static char __pyx_k__infile[] = "infile";
static char __pyx_k__logger[] = "logger";
static char __pyx_k__mColTo[] = "mColTo";
static char __pyx_k__mIndex[] = "mIndex";
static char __pyx_k__mRowTo[] = "mRowTo";
static char __pyx_k__object[] = "object";
static char __pyx_k__OSError[] = "OSError";
static char __pyx_k____str__[] = "__str__";
static char __pyx_k__mEvalue[] = "mEvalue";
static char __pyx_k__matches[] = "matches";
static char __pyx_k____init__[] = "__init__";
static char __pyx_k____iter__[] = "__iter__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__alignlib[] = "alignlib";
static char __pyx_k__iterator[] = "iterator";
static char __pyx_k__mColFrom[] = "mColFrom";
static char __pyx_k__mQueryTo[] = "mQueryTo";
static char __pyx_k__mRowFrom[] = "mRowFrom";
static char __pyx_k__mSbjctTo[] = "mSbjctTo";
static char __pyx_k__num_nids[] = "num_nids";
static char __pyx_k__readline[] = "readline";
static char __pyx_k__mQueryAli[] = "mQueryAli";
static char __pyx_k__mSbjctAli[] = "mSbjctAli";
static char __pyx_k__mapId2Nid[] = "mapId2Nid";
static char __pyx_k__neighbour[] = "neighbour";
static char __pyx_k__query_ali[] = "query_ali";
static char __pyx_k__query_end[] = "query_end";
static char __pyx_k__query_nid[] = "query_nid";
static char __pyx_k__sbjct_ali[] = "sbjct_ali";
static char __pyx_k__sbjct_end[] = "sbjct_end";
static char __pyx_k__sbjct_nid[] = "sbjct_nid";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__indexGraph[] = "indexGraph";
static char __pyx_k__mQueryFrom[] = "mQueryFrom";
static char __pyx_k__mSbjctFrom[] = "mSbjctFrom";
static char __pyx_k__query_alen[] = "query_alen";
static char __pyx_k__sbjct_alen[] = "sbjct_alen";
static char __pyx_k__setDescend[] = "setDescend";
static char __pyx_k__startswith[] = "startswith";
static char __pyx_k__MemoryError[] = "MemoryError";
static char __pyx_k__in_filename[] = "in_filename";
static char __pyx_k__mQueryToken[] = "mQueryToken";
static char __pyx_k__mSbjctToken[] = "mSbjctToken";
static char __pyx_k__query_start[] = "query_start";
static char __pyx_k__query_token[] = "query_token";
static char __pyx_k__sbjct_start[] = "sbjct_start";
static char __pyx_k__sbjct_token[] = "sbjct_token";
static char __pyx_k__setLogLevel[] = "setLogLevel";
static char __pyx_k__setSigmoidC[] = "setSigmoidC";
static char __pyx_k__setSigmoidK[] = "setSigmoidK";
static char __pyx_k__getAlignment[] = "getAlignment";
static char __pyx_k__out_filename[] = "out_filename";
static char __pyx_k__reindexGraph[] = "reindexGraph";
static char __pyx_k__setOnlyQuery[] = "setOnlyQuery";
static char __pyx_k__StopIteration[] = "StopIteration";
static char __pyx_k__getNeighbours[] = "getNeighbours";
static char __pyx_k__mColAlignment[] = "mColAlignment";
static char __pyx_k__mRowAlignment[] = "mRowAlignment";
static char __pyx_k__setReportStep[] = "setReportStep";
static char __pyx_k__setResolution[] = "setResolution";
static char __pyx_k__setSigmoidMax[] = "setSigmoidMax";
static char __pyx_k__setSigmoidMin[] = "setSigmoidMin";
static char __pyx_k__filename_graph[] = "filename_graph";
static char __pyx_k__filename_index[] = "filename_index";
static char __pyx_k__graph_iterator[] = "graph_iterator";
static char __pyx_k__record_factory[] = "record_factory";
static char __pyx_k__setFilenameMst[] = "setFilenameMst";
static char __pyx_k__NeighbourRecord[] = "NeighbourRecord";
static char __pyx_k__setExponentialE[] = "setExponentialE";
static char __pyx_k__setExponentialF[] = "setExponentialF";
static char __pyx_k__setFilenameNids[] = "setFilenameNids";
static char __pyx_k__setFilenameGraph[] = "setFilenameGraph";
static char __pyx_k__setFilenameIndex[] = "setFilenameIndex";
static char __pyx_k__setMaxIterations[] = "setMaxIterations";
static char __pyx_k__IndexedNeighbours[] = "IndexedNeighbours";
static char __pyx_k__setFilenameDomains[] = "setFilenameDomains";
static char __pyx_k__makeAlignmentVector[] = "makeAlignmentVector";
static char __pyx_k__setFilenameSegments[] = "setFilenameSegments";
static char __pyx_k__setRelativeOverhang[] = "setRelativeOverhang";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_n_s_11;
static PyObject *__pyx_kp_s_12;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_s_14;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_kp_s_17;
static PyObject *__pyx_kp_s_18;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_23;
static PyObject *__pyx_kp_s_24;
static PyObject *__pyx_n_s_25;
static PyObject *__pyx_n_s_26;
static PyObject *__pyx_kp_s_28;
static PyObject *__pyx_n_s_29;
static PyObject *__pyx_n_s_30;
static PyObject *__pyx_kp_u_31;
static PyObject *__pyx_kp_u_32;
static PyObject *__pyx_kp_u_33;
static PyObject *__pyx_kp_u_34;
static PyObject *__pyx_kp_u_35;
static PyObject *__pyx_kp_u_36;
static PyObject *__pyx_kp_u_37;
static PyObject *__pyx_n_s_38;
static PyObject *__pyx_kp_u_39;
static PyObject *__pyx_n_s_4;
static PyObject *__pyx_n_s_40;
static PyObject *__pyx_kp_u_41;
static PyObject *__pyx_kp_u_42;
static PyObject *__pyx_kp_u_43;
static PyObject *__pyx_kp_u_44;
static PyObject *__pyx_kp_u_45;
static PyObject *__pyx_kp_u_46;
static PyObject *__pyx_kp_u_47;
static PyObject *__pyx_kp_u_48;
static PyObject *__pyx_kp_u_49;
static PyObject *__pyx_n_s_5;
static PyObject *__pyx_kp_u_50;
static PyObject *__pyx_kp_u_51;
static PyObject *__pyx_kp_u_52;
static PyObject *__pyx_n_s_53;
static PyObject *__pyx_kp_u_54;
static PyObject *__pyx_kp_u_55;
static PyObject *__pyx_kp_u_56;
static PyObject *__pyx_n_s_57;
static PyObject *__pyx_kp_u_58;
static PyObject *__pyx_kp_u_59;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_u_60;
static PyObject *__pyx_kp_u_61;
static PyObject *__pyx_kp_u_62;
static PyObject *__pyx_n_s_63;
static PyObject *__pyx_kp_u_64;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__IndexedNeighbours;
static PyObject *__pyx_n_s__MemoryError;
static PyObject *__pyx_n_s__NeighbourRecord;
static PyObject *__pyx_n_s__OSError;
static PyObject *__pyx_n_s__StopIteration;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____init__;
static PyObject *__pyx_n_s____iter__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____str__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__alignlib;
static PyObject *__pyx_n_s__copy;
static PyObject *__pyx_n_s__evalue;
static PyObject *__pyx_n_s__filename_graph;
static PyObject *__pyx_n_s__filename_index;
static PyObject *__pyx_n_s__getAlignment;
static PyObject *__pyx_n_s__getNeighbours;
static PyObject *__pyx_n_s__graph_iterator;
static PyObject *__pyx_n_s__in_filename;
static PyObject *__pyx_n_s__indexGraph;
static PyObject *__pyx_n_s__infile;
static PyObject *__pyx_n_s__info;
static PyObject *__pyx_n_s__iterator;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__last;
static PyObject *__pyx_n_s__line;
static PyObject *__pyx_n_s__logger;
static PyObject *__pyx_n_s__mColAlignment;
static PyObject *__pyx_n_s__mColFrom;
static PyObject *__pyx_n_s__mColTo;
static PyObject *__pyx_n_s__mEvalue;
static PyObject *__pyx_n_s__mFile;
static PyObject *__pyx_n_s__mIndex;
static PyObject *__pyx_n_s__mNids;
static PyObject *__pyx_n_s__mQueryAli;
static PyObject *__pyx_n_s__mQueryFrom;
static PyObject *__pyx_n_s__mQueryTo;
static PyObject *__pyx_n_s__mQueryToken;
static PyObject *__pyx_n_s__mRowAlignment;
static PyObject *__pyx_n_s__mRowFrom;
static PyObject *__pyx_n_s__mRowTo;
static PyObject *__pyx_n_s__mSbjctAli;
static PyObject *__pyx_n_s__mSbjctFrom;
static PyObject *__pyx_n_s__mSbjctTo;
static PyObject *__pyx_n_s__mSbjctToken;
static PyObject *__pyx_n_s__makeAlignmentVector;
static PyObject *__pyx_n_s__map;
static PyObject *__pyx_n_s__mapId2Nid;
static PyObject *__pyx_n_s__matches;
static PyObject *__pyx_n_s__neighbour;
static PyObject *__pyx_n_s__next;
static PyObject *__pyx_n_s__nid;
static PyObject *__pyx_n_s__num_nids;
static PyObject *__pyx_n_s__object;
static PyObject *__pyx_n_s__out_filename;
static PyObject *__pyx_n_s__query_alen;
static PyObject *__pyx_n_s__query_ali;
static PyObject *__pyx_n_s__query_end;
static PyObject *__pyx_n_s__query_nid;
static PyObject *__pyx_n_s__query_start;
static PyObject *__pyx_n_s__query_token;
static PyObject *__pyx_n_s__readline;
static PyObject *__pyx_n_s__record_factory;
static PyObject *__pyx_n_s__reindexGraph;
static PyObject *__pyx_n_s__sbjct_alen;
static PyObject *__pyx_n_s__sbjct_ali;
static PyObject *__pyx_n_s__sbjct_end;
static PyObject *__pyx_n_s__sbjct_nid;
static PyObject *__pyx_n_s__sbjct_start;
static PyObject *__pyx_n_s__sbjct_token;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__setDescend;
static PyObject *__pyx_n_s__setExponentialE;
static PyObject *__pyx_n_s__setExponentialF;
static PyObject *__pyx_n_s__setFilenameDomains;
static PyObject *__pyx_n_s__setFilenameGraph;
static PyObject *__pyx_n_s__setFilenameIndex;
static PyObject *__pyx_n_s__setFilenameMst;
static PyObject *__pyx_n_s__setFilenameNids;
static PyObject *__pyx_n_s__setFilenameSegments;
static PyObject *__pyx_n_s__setLogLevel;
static PyObject *__pyx_n_s__setMaxIterations;
static PyObject *__pyx_n_s__setOnlyQuery;
static PyObject *__pyx_n_s__setRelativeOverhang;
static PyObject *__pyx_n_s__setReportStep;
static PyObject *__pyx_n_s__setResolution;
static PyObject *__pyx_n_s__setSigmoidC;
static PyObject *__pyx_n_s__setSigmoidK;
static PyObject *__pyx_n_s__setSigmoidMax;
static PyObject *__pyx_n_s__setSigmoidMin;
static PyObject *__pyx_n_s__startswith;
static PyObject *__pyx_n_s__warn;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_100000000;

/* "/software/pfam/python/adda/src/cadda.pyx":103
 *     int fromCompressedFile( unsigned char *, size_t, FILE * )
 * 
 * def optimise_iteration():             # <<<<<<<<<<<<<<
 *     return cadda_optimise_iteration()
 * 
 */

static PyObject *__pyx_pf_5cadda_optimise_iteration(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5cadda_optimise_iteration(PyObject *__pyx_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("optimise_iteration");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":104
 * 
 * def optimise_iteration():
 *     return cadda_optimise_iteration()             # <<<<<<<<<<<<<<
 * 
 * def optimise_initialise():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(cadda_optimise_iteration()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cadda.optimise_iteration");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":106
 *     return cadda_optimise_iteration()
 * 
 * def optimise_initialise():             # <<<<<<<<<<<<<<
 *     return cadda_optimise_initialise()
 * 
 */

static PyObject *__pyx_pf_5cadda_optimise_initialise(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5cadda_optimise_initialise(PyObject *__pyx_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("optimise_initialise");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":107
 * 
 * def optimise_initialise():
 *     return cadda_optimise_initialise()             # <<<<<<<<<<<<<<
 * 
 * def optimise_destroy():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(cadda_optimise_initialise()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cadda.optimise_initialise");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":109
 *     return cadda_optimise_initialise()
 * 
 * def optimise_destroy():             # <<<<<<<<<<<<<<
 *     return cadda_optimise_destroy()
 * 
 */

static PyObject *__pyx_pf_5cadda_optimise_destroy(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5cadda_optimise_destroy(PyObject *__pyx_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("optimise_destroy");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":110
 * 
 * def optimise_destroy():
 *     return cadda_optimise_destroy()             # <<<<<<<<<<<<<<
 * 
 * def optimise_get_num_partitions():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(cadda_optimise_destroy()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cadda.optimise_destroy");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":112
 *     return cadda_optimise_destroy()
 * 
 * def optimise_get_num_partitions():             # <<<<<<<<<<<<<<
 *     return cadda_optimise_get_num_partitions()
 * 
 */

static PyObject *__pyx_pf_5cadda_optimise_get_num_partitions(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5cadda_optimise_get_num_partitions(PyObject *__pyx_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("optimise_get_num_partitions");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":113
 * 
 * def optimise_get_num_partitions():
 *     return cadda_optimise_get_num_partitions()             # <<<<<<<<<<<<<<
 * 
 * def optimise_load_partitions( filename ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(cadda_optimise_get_num_partitions()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cadda.optimise_get_num_partitions");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":115
 *     return cadda_optimise_get_num_partitions()
 * 
 * def optimise_load_partitions( filename ):             # <<<<<<<<<<<<<<
 *     return cadda_optimise_load_partitions( filename )
 * 
 */

static PyObject *__pyx_pf_5cadda_optimise_load_partitions(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pf_5cadda_optimise_load_partitions(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("optimise_load_partitions");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":116
 * 
 * def optimise_load_partitions( filename ):
 *     return cadda_optimise_load_partitions( filename )             # <<<<<<<<<<<<<<
 * 
 * def optimise_save_partitions( filename ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(cadda_optimise_load_partitions(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cadda.optimise_load_partitions");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":118
 *     return cadda_optimise_load_partitions( filename )
 * 
 * def optimise_save_partitions( filename ):             # <<<<<<<<<<<<<<
 *     return cadda_optimise_save_partitions( filename )
 * 
 */

static PyObject *__pyx_pf_5cadda_optimise_save_partitions(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pf_5cadda_optimise_save_partitions(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("optimise_save_partitions");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":119
 * 
 * def optimise_save_partitions( filename ):
 *     return cadda_optimise_save_partitions( filename )             # <<<<<<<<<<<<<<
 * 
 * def convert( filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(cadda_optimise_save_partitions(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cadda.optimise_save_partitions");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":121
 *     return cadda_optimise_save_partitions( filename )
 * 
 * def convert( filename):             # <<<<<<<<<<<<<<
 *     return cadda_convert( filename )
 * 
 */

static PyObject *__pyx_pf_5cadda_convert(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pf_5cadda_convert(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("convert");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":122
 * 
 * def convert( filename):
 *     return cadda_convert( filename )             # <<<<<<<<<<<<<<
 * 
 * def build_mst( out_filename, in_filename ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(cadda_convert(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cadda.convert");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":124
 *     return cadda_convert( filename )
 * 
 * def build_mst( out_filename, in_filename ):             # <<<<<<<<<<<<<<
 *     return cadda_build_mst( out_filename, in_filename )
 * 
 */

static PyObject *__pyx_pf_5cadda_build_mst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5cadda_build_mst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_out_filename = 0;
  PyObject *__pyx_v_in_filename = 0;
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__out_filename,&__pyx_n_s__in_filename,0};
  __Pyx_RefNannySetupContext("build_mst");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__out_filename);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__in_filename);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("build_mst", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "build_mst") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_out_filename = values[0];
    __pyx_v_in_filename = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_out_filename = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_in_filename = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("build_mst", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.build_mst");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/software/pfam/python/adda/src/cadda.pyx":125
 * 
 * def build_mst( out_filename, in_filename ):
 *     return cadda_build_mst( out_filename, in_filename )             # <<<<<<<<<<<<<<
 * 
 * def build_index():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_out_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_in_filename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(cadda_build_mst(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cadda.build_mst");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":127
 *     return cadda_build_mst( out_filename, in_filename )
 * 
 * def build_index():             # <<<<<<<<<<<<<<
 *     return cadda_build_index()
 * 
 */

static PyObject *__pyx_pf_5cadda_build_index(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5cadda_build_index(PyObject *__pyx_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("build_index");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":128
 * 
 * def build_index():
 *     return cadda_build_index()             # <<<<<<<<<<<<<<
 * 
 * def check_index():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(cadda_build_index()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cadda.build_index");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":130
 *     return cadda_build_index()
 * 
 * def check_index():             # <<<<<<<<<<<<<<
 *     return cadda_check_index()
 * 
 */

static PyObject *__pyx_pf_5cadda_check_index(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5cadda_check_index(PyObject *__pyx_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("check_index");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":131
 * 
 * def check_index():
 *     return cadda_check_index()             # <<<<<<<<<<<<<<
 * 
 * def dump_parameters():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(cadda_check_index()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cadda.check_index");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":133
 *     return cadda_check_index()
 * 
 * def dump_parameters():             # <<<<<<<<<<<<<<
 *     cadda_dump_parameters()
 * 
 */

static PyObject *__pyx_pf_5cadda_dump_parameters(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5cadda_dump_parameters(PyObject *__pyx_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("dump_parameters");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":134
 * 
 * def dump_parameters():
 *     cadda_dump_parameters()             # <<<<<<<<<<<<<<
 * 
 * def setFilenameSegments(v):
 */
  cadda_dump_parameters();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":136
 *     cadda_dump_parameters()
 * 
 * def setFilenameSegments(v):             # <<<<<<<<<<<<<<
 *     """set input filename with segments."""
 *     cadda_setFilenameSegments(v)
 */

static PyObject *__pyx_pf_5cadda_setFilenameSegments(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setFilenameSegments[] = "set input filename with segments.";
static PyObject *__pyx_pf_5cadda_setFilenameSegments(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("setFilenameSegments");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":138
 * def setFilenameSegments(v):
 *     """set input filename with segments."""
 *     cadda_setFilenameSegments(v)             # <<<<<<<<<<<<<<
 * 
 * def setFilenameGraph(v):
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_v); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setFilenameSegments(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setFilenameSegments");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":140
 *     cadda_setFilenameSegments(v)
 * 
 * def setFilenameGraph(v):             # <<<<<<<<<<<<<<
 *     """set input filename with graph."""
 *     cadda_setFilenameGraph(v)
 */

static PyObject *__pyx_pf_5cadda_setFilenameGraph(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setFilenameGraph[] = "set input filename with graph.";
static PyObject *__pyx_pf_5cadda_setFilenameGraph(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("setFilenameGraph");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":142
 * def setFilenameGraph(v):
 *     """set input filename with graph."""
 *     cadda_setFilenameGraph(v)             # <<<<<<<<<<<<<<
 * 
 * def setFilenameIndex(v):
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_v); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setFilenameGraph(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setFilenameGraph");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":144
 *     cadda_setFilenameGraph(v)
 * 
 * def setFilenameIndex(v):             # <<<<<<<<<<<<<<
 *     """set input filename with index."""
 *     cadda_setFilenameIndex(v)
 */

static PyObject *__pyx_pf_5cadda_setFilenameIndex(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setFilenameIndex[] = "set input filename with index.";
static PyObject *__pyx_pf_5cadda_setFilenameIndex(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("setFilenameIndex");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":146
 * def setFilenameIndex(v):
 *     """set input filename with index."""
 *     cadda_setFilenameIndex(v)             # <<<<<<<<<<<<<<
 * 
 * def setFilenameMst(v):
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_v); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setFilenameIndex(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setFilenameIndex");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":148
 *     cadda_setFilenameIndex(v)
 * 
 * def setFilenameMst(v):             # <<<<<<<<<<<<<<
 *     """set filename with mst."""
 *     cadda_setFilenameMst(v)
 */

static PyObject *__pyx_pf_5cadda_setFilenameMst(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setFilenameMst[] = "set filename with mst.";
static PyObject *__pyx_pf_5cadda_setFilenameMst(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("setFilenameMst");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":150
 * def setFilenameMst(v):
 *     """set filename with mst."""
 *     cadda_setFilenameMst(v)             # <<<<<<<<<<<<<<
 * 
 * def setFilenameNids(v):
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_v); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setFilenameMst(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setFilenameMst");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":152
 *     cadda_setFilenameMst(v)
 * 
 * def setFilenameNids(v):             # <<<<<<<<<<<<<<
 *     """set input filename with nids."""
 *     cadda_setFilenameNids(v)
 */

static PyObject *__pyx_pf_5cadda_setFilenameNids(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setFilenameNids[] = "set input filename with nids.";
static PyObject *__pyx_pf_5cadda_setFilenameNids(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("setFilenameNids");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":154
 * def setFilenameNids(v):
 *     """set input filename with nids."""
 *     cadda_setFilenameNids(v)             # <<<<<<<<<<<<<<
 * 
 * def setFilenameDomains(v):
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_v); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setFilenameNids(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setFilenameNids");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":156
 *     cadda_setFilenameNids(v)
 * 
 * def setFilenameDomains(v):             # <<<<<<<<<<<<<<
 *     """set input filename with domains."""
 *     cadda_setFilenameDomains(v)
 */

static PyObject *__pyx_pf_5cadda_setFilenameDomains(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setFilenameDomains[] = "set input filename with domains.";
static PyObject *__pyx_pf_5cadda_setFilenameDomains(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("setFilenameDomains");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":158
 * def setFilenameDomains(v):
 *     """set input filename with domains."""
 *     cadda_setFilenameDomains(v)             # <<<<<<<<<<<<<<
 * 
 * def setFilenameDomainGraph(v):
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_v); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setFilenameDomains(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setFilenameDomains");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":160
 *     cadda_setFilenameDomains(v)
 * 
 * def setFilenameDomainGraph(v):             # <<<<<<<<<<<<<<
 *     """set filename of domain graph."""
 *     cadda_setFilenameDomainGraph(v)
 */

static PyObject *__pyx_pf_5cadda_setFilenameDomainGraph(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setFilenameDomainGraph[] = "set filename of domain graph.";
static PyObject *__pyx_pf_5cadda_setFilenameDomainGraph(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("setFilenameDomainGraph");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":162
 * def setFilenameDomainGraph(v):
 *     """set filename of domain graph."""
 *     cadda_setFilenameDomainGraph(v)             # <<<<<<<<<<<<<<
 * 
 * def setFilenameTransfers(v):
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_v); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setFilenameDomainGraph(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setFilenameDomainGraph");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":164
 *     cadda_setFilenameDomainGraph(v)
 * 
 * def setFilenameTransfers(v):             # <<<<<<<<<<<<<<
 *     """set input filename with transfer data."""
 *     cadda_setFilenameTransfers(v)
 */

static PyObject *__pyx_pf_5cadda_setFilenameTransfers(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setFilenameTransfers[] = "set input filename with transfer data.";
static PyObject *__pyx_pf_5cadda_setFilenameTransfers(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("setFilenameTransfers");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":166
 * def setFilenameTransfers(v):
 *     """set input filename with transfer data."""
 *     cadda_setFilenameTransfers(v)             # <<<<<<<<<<<<<<
 * 
 * def setLogLevel(v):
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_v); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setFilenameTransfers(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setFilenameTransfers");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":168
 *     cadda_setFilenameTransfers(v)
 * 
 * def setLogLevel(v):             # <<<<<<<<<<<<<<
 *     """set the logging level."""
 *     cadda_setLogLevel(v)
 */

static PyObject *__pyx_pf_5cadda_setLogLevel(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setLogLevel[] = "set the logging level.";
static PyObject *__pyx_pf_5cadda_setLogLevel(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setLogLevel");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":170
 * def setLogLevel(v):
 *     """set the logging level."""
 *     cadda_setLogLevel(v)             # <<<<<<<<<<<<<<
 * 
 * def setSigmoidK(v):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setLogLevel(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setLogLevel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":172
 *     cadda_setLogLevel(v)
 * 
 * def setSigmoidK(v):             # <<<<<<<<<<<<<<
 *     """set parameter K: smoothness of sigmoid."""
 *     cadda_setK(v)
 */

static PyObject *__pyx_pf_5cadda_setSigmoidK(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setSigmoidK[] = "set parameter K: smoothness of sigmoid.";
static PyObject *__pyx_pf_5cadda_setSigmoidK(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("setSigmoidK");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":174
 * def setSigmoidK(v):
 *     """set parameter K: smoothness of sigmoid."""
 *     cadda_setK(v)             # <<<<<<<<<<<<<<
 * 
 * def setSigmoidC(v):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setK(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setSigmoidK");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":176
 *     cadda_setK(v)
 * 
 * def setSigmoidC(v):             # <<<<<<<<<<<<<<
 *     """set parameter C: inflection point of sigmoid."""
 *     cadda_setC(v)
 */

static PyObject *__pyx_pf_5cadda_setSigmoidC(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setSigmoidC[] = "set parameter C: inflection point of sigmoid.";
static PyObject *__pyx_pf_5cadda_setSigmoidC(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("setSigmoidC");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":178
 * def setSigmoidC(v):
 *     """set parameter C: inflection point of sigmoid."""
 *     cadda_setC(v)             # <<<<<<<<<<<<<<
 * 
 * def setSigmoidMax(v):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setC(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setSigmoidC");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":180
 *     cadda_setC(v)
 * 
 * def setSigmoidMax(v):             # <<<<<<<<<<<<<<
 *     """set parameter M: maximum sigmoid."""
 *     cadda_setMax(v)
 */

static PyObject *__pyx_pf_5cadda_setSigmoidMax(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setSigmoidMax[] = "set parameter M: maximum sigmoid.";
static PyObject *__pyx_pf_5cadda_setSigmoidMax(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("setSigmoidMax");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":182
 * def setSigmoidMax(v):
 *     """set parameter M: maximum sigmoid."""
 *     cadda_setMax(v)             # <<<<<<<<<<<<<<
 * 
 * def setSigmoidMin(v):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setMax(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setSigmoidMax");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":184
 *     cadda_setMax(v)
 * 
 * def setSigmoidMin(v):             # <<<<<<<<<<<<<<
 *     """set parameter N: minimum sigmoid."""
 *     cadda_setMin(v)
 */

static PyObject *__pyx_pf_5cadda_setSigmoidMin(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setSigmoidMin[] = "set parameter N: minimum sigmoid.";
static PyObject *__pyx_pf_5cadda_setSigmoidMin(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("setSigmoidMin");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":186
 * def setSigmoidMin(v):
 *     """set parameter N: minimum sigmoid."""
 *     cadda_setMin(v)             # <<<<<<<<<<<<<<
 * 
 * def setExponentialE(v):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setMin(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setSigmoidMin");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":188
 *     cadda_setMin(v)
 * 
 * def setExponentialE(v):             # <<<<<<<<<<<<<<
 *     """set parameter E: exponential decay rate."""
 *     cadda_setE(v)
 */

static PyObject *__pyx_pf_5cadda_setExponentialE(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setExponentialE[] = "set parameter E: exponential decay rate.";
static PyObject *__pyx_pf_5cadda_setExponentialE(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("setExponentialE");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":190
 * def setExponentialE(v):
 *     """set parameter E: exponential decay rate."""
 *     cadda_setE(v)             # <<<<<<<<<<<<<<
 * 
 * def setExponentialF(v):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setE(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setExponentialE");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":192
 *     cadda_setE(v)
 * 
 * def setExponentialF(v):             # <<<<<<<<<<<<<<
 *     """set parameter F: exponential decay scale."""
 *     cadda_setF(v)
 */

static PyObject *__pyx_pf_5cadda_setExponentialF(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setExponentialF[] = "set parameter F: exponential decay scale.";
static PyObject *__pyx_pf_5cadda_setExponentialF(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("setExponentialF");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":194
 * def setExponentialF(v):
 *     """set parameter F: exponential decay scale."""
 *     cadda_setF(v)             # <<<<<<<<<<<<<<
 * 
 * def setRelativeOverhang(v):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setF(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setExponentialF");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":196
 *     cadda_setF(v)
 * 
 * def setRelativeOverhang(v):             # <<<<<<<<<<<<<<
 *     """if true, use relative overhang."""
 *     cadda_setRelativeOverhang( v )
 */

static PyObject *__pyx_pf_5cadda_setRelativeOverhang(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setRelativeOverhang[] = "if true, use relative overhang.";
static PyObject *__pyx_pf_5cadda_setRelativeOverhang(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setRelativeOverhang");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":198
 * def setRelativeOverhang(v):
 *     """if true, use relative overhang."""
 *     cadda_setRelativeOverhang( v )             # <<<<<<<<<<<<<<
 * 
 * def setOnlyQuery(v):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setRelativeOverhang(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setRelativeOverhang");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":200
 *     cadda_setRelativeOverhang( v )
 * 
 * def setOnlyQuery(v):             # <<<<<<<<<<<<<<
 *     """if true, use only the score based on the query."""
 *     cadda_setOnlyQuery( v )
 */

static PyObject *__pyx_pf_5cadda_setOnlyQuery(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setOnlyQuery[] = "if true, use only the score based on the query.";
static PyObject *__pyx_pf_5cadda_setOnlyQuery(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setOnlyQuery");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":202
 * def setOnlyQuery(v):
 *     """if true, use only the score based on the query."""
 *     cadda_setOnlyQuery( v )             # <<<<<<<<<<<<<<
 * 
 * def setResolution(v):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setOnlyQuery(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setOnlyQuery");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":204
 *     cadda_setOnlyQuery( v )
 * 
 * def setResolution(v):             # <<<<<<<<<<<<<<
 *     """resolution to use."""
 *     cadda_setResolution( v )
 */

static PyObject *__pyx_pf_5cadda_setResolution(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setResolution[] = "resolution to use.";
static PyObject *__pyx_pf_5cadda_setResolution(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setResolution");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":206
 * def setResolution(v):
 *     """resolution to use."""
 *     cadda_setResolution( v )             # <<<<<<<<<<<<<<
 * 
 * def setDescend(v):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setResolution(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setResolution");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":208
 *     cadda_setResolution( v )
 * 
 * def setDescend(v):             # <<<<<<<<<<<<<<
 *     """if true, descend."""
 *     cadda_setDescend( v )
 */

static PyObject *__pyx_pf_5cadda_setDescend(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setDescend[] = "if true, descend.";
static PyObject *__pyx_pf_5cadda_setDescend(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setDescend");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":210
 * def setDescend(v):
 *     """if true, descend."""
 *     cadda_setDescend( v )             # <<<<<<<<<<<<<<
 * 
 * def setDisallowShortening(v):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setDescend(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setDescend");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":212
 *     cadda_setDescend( v )
 * 
 * def setDisallowShortening(v):             # <<<<<<<<<<<<<<
 *     """if true, disallow shortening."""
 *     cadda_setDisallowShortening( v )
 */

static PyObject *__pyx_pf_5cadda_setDisallowShortening(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setDisallowShortening[] = "if true, disallow shortening.";
static PyObject *__pyx_pf_5cadda_setDisallowShortening(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setDisallowShortening");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":214
 * def setDisallowShortening(v):
 *     """if true, disallow shortening."""
 *     cadda_setDisallowShortening( v )             # <<<<<<<<<<<<<<
 * 
 * def setMaxIterations(v):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setDisallowShortening(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setDisallowShortening");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":216
 *     cadda_setDisallowShortening( v )
 * 
 * def setMaxIterations(v):             # <<<<<<<<<<<<<<
 *     """set the maximum number of iterations."""
 *     cadda_setMaxIterations( v )
 */

static PyObject *__pyx_pf_5cadda_setMaxIterations(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setMaxIterations[] = "set the maximum number of iterations.";
static PyObject *__pyx_pf_5cadda_setMaxIterations(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setMaxIterations");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":218
 * def setMaxIterations(v):
 *     """set the maximum number of iterations."""
 *     cadda_setMaxIterations( v )             # <<<<<<<<<<<<<<
 * 
 * def setReportStep(v):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setMaxIterations(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setMaxIterations");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":220
 *     cadda_setMaxIterations( v )
 * 
 * def setReportStep(v):             # <<<<<<<<<<<<<<
 *     """set reporting interval."""
 *     cadda_setReportStep(v)
 */

static PyObject *__pyx_pf_5cadda_setReportStep(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setReportStep[] = "set reporting interval.";
static PyObject *__pyx_pf_5cadda_setReportStep(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setReportStep");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":222
 * def setReportStep(v):
 *     """set reporting interval."""
 *     cadda_setReportStep(v)             # <<<<<<<<<<<<<<
 * 
 * def setEvalueThresholdTrustedLinks( v ):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setReportStep(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setReportStep");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":224
 *     cadda_setReportStep(v)
 * 
 * def setEvalueThresholdTrustedLinks( v ):             # <<<<<<<<<<<<<<
 *     """set evalue threshold for trusted links."""
 *     cadda_setEvalueThresholdTrustedLinks( v )
 */

static PyObject *__pyx_pf_5cadda_setEvalueThresholdTrustedLinks(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5cadda_setEvalueThresholdTrustedLinks[] = "set evalue threshold for trusted links.";
static PyObject *__pyx_pf_5cadda_setEvalueThresholdTrustedLinks(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("setEvalueThresholdTrustedLinks");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":226
 * def setEvalueThresholdTrustedLinks( v ):
 *     """set evalue threshold for trusted links."""
 *     cadda_setEvalueThresholdTrustedLinks( v )             # <<<<<<<<<<<<<<
 * 
 * import alignlib
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  cadda_setEvalueThresholdTrustedLinks(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.setEvalueThresholdTrustedLinks");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":254
 *     char * sbjct_ali
 * 
 * cdef void init_neighbour( Neighbour * n):             # <<<<<<<<<<<<<<
 *     n.query_ali = NULL
 *     n.sbjct_ali = NULL
 */

static  void __pyx_f_5cadda_init_neighbour(__pyx_t_5cadda_Neighbour *__pyx_v_n) {
  __Pyx_RefNannySetupContext("init_neighbour");

  /* "/software/pfam/python/adda/src/cadda.pyx":255
 * 
 * cdef void init_neighbour( Neighbour * n):
 *     n.query_ali = NULL             # <<<<<<<<<<<<<<
 *     n.sbjct_ali = NULL
 * 
 */
  __pyx_v_n->query_ali = NULL;

  /* "/software/pfam/python/adda/src/cadda.pyx":256
 * cdef void init_neighbour( Neighbour * n):
 *     n.query_ali = NULL
 *     n.sbjct_ali = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef destroy_neighbour( Neighbour * n):
 */
  __pyx_v_n->sbjct_ali = NULL;

  __Pyx_RefNannyFinishContext();
}

/* "/software/pfam/python/adda/src/cadda.pyx":258
 *     n.sbjct_ali = NULL
 * 
 * cdef destroy_neighbour( Neighbour * n):             # <<<<<<<<<<<<<<
 *     if n.query_ali != NULL: free( n.query_ali)
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)
 */

static  PyObject *__pyx_f_5cadda_destroy_neighbour(__pyx_t_5cadda_Neighbour *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("destroy_neighbour");

  /* "/software/pfam/python/adda/src/cadda.pyx":259
 * 
 * cdef destroy_neighbour( Neighbour * n):
 *     if n.query_ali != NULL: free( n.query_ali)             # <<<<<<<<<<<<<<
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)
 * 
 */
  __pyx_t_1 = (__pyx_v_n->query_ali != NULL);
  if (__pyx_t_1) {
    free(__pyx_v_n->query_ali);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/software/pfam/python/adda/src/cadda.pyx":260
 * cdef destroy_neighbour( Neighbour * n):
 *     if n.query_ali != NULL: free( n.query_ali)
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)             # <<<<<<<<<<<<<<
 * 
 * cdef class PairsDBNeighbourRecord
 */
  __pyx_t_1 = (__pyx_v_n->sbjct_ali != NULL);
  if (__pyx_t_1) {
    free(__pyx_v_n->sbjct_ali);
    goto __pyx_L4;
  }
  __pyx_L4:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":263
 * 
 * cdef class PairsDBNeighbourRecord
 * cdef fromPairsDBNeighbour( Neighbour * dest,             # <<<<<<<<<<<<<<
 *                            Nid sbjct_nid,
 *                            PairsDBNeighbourRecord src ):
 */

static  PyObject *__pyx_f_5cadda_fromPairsDBNeighbour(__pyx_t_5cadda_Neighbour *__pyx_v_dest, Nid __pyx_v_sbjct_nid, struct __pyx_obj_5cadda_PairsDBNeighbourRecord *__pyx_v_src) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("fromPairsDBNeighbour");
  __Pyx_INCREF((PyObject *)__pyx_v_src);

  /* "/software/pfam/python/adda/src/cadda.pyx":267
 *                            PairsDBNeighbourRecord src ):
 *     '''load data from neighbour.'''
 *     if dest.query_ali != NULL: free( dest.query_ali)             # <<<<<<<<<<<<<<
 *     if dest.sbjct_ali != NULL: free( dest.sbjct_ali)
 *     dest.sbjct_nid = sbjct_nid
 */
  __pyx_t_1 = (__pyx_v_dest->query_ali != NULL);
  if (__pyx_t_1) {
    free(__pyx_v_dest->query_ali);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/software/pfam/python/adda/src/cadda.pyx":268
 *     '''load data from neighbour.'''
 *     if dest.query_ali != NULL: free( dest.query_ali)
 *     if dest.sbjct_ali != NULL: free( dest.sbjct_ali)             # <<<<<<<<<<<<<<
 *     dest.sbjct_nid = sbjct_nid
 *     dest.query_start = src.query_start
 */
  __pyx_t_1 = (__pyx_v_dest->sbjct_ali != NULL);
  if (__pyx_t_1) {
    free(__pyx_v_dest->sbjct_ali);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/software/pfam/python/adda/src/cadda.pyx":269
 *     if dest.query_ali != NULL: free( dest.query_ali)
 *     if dest.sbjct_ali != NULL: free( dest.sbjct_ali)
 *     dest.sbjct_nid = sbjct_nid             # <<<<<<<<<<<<<<
 *     dest.query_start = src.query_start
 *     dest.query_end = src.query_end
 */
  __pyx_v_dest->sbjct_nid = __pyx_v_sbjct_nid;

  /* "/software/pfam/python/adda/src/cadda.pyx":270
 *     if dest.sbjct_ali != NULL: free( dest.sbjct_ali)
 *     dest.sbjct_nid = sbjct_nid
 *     dest.query_start = src.query_start             # <<<<<<<<<<<<<<
 *     dest.query_end = src.query_end
 *     dest.sbjct_start = src.sbjct_start
 */
  __pyx_v_dest->query_start = __pyx_v_src->query_start;

  /* "/software/pfam/python/adda/src/cadda.pyx":271
 *     dest.sbjct_nid = sbjct_nid
 *     dest.query_start = src.query_start
 *     dest.query_end = src.query_end             # <<<<<<<<<<<<<<
 *     dest.sbjct_start = src.sbjct_start
 *     dest.sbjct_end = src.sbjct_end
 */
  __pyx_v_dest->query_end = __pyx_v_src->query_end;

  /* "/software/pfam/python/adda/src/cadda.pyx":272
 *     dest.query_start = src.query_start
 *     dest.query_end = src.query_end
 *     dest.sbjct_start = src.sbjct_start             # <<<<<<<<<<<<<<
 *     dest.sbjct_end = src.sbjct_end
 *     dest.evalue = src.evalue
 */
  __pyx_v_dest->sbjct_start = __pyx_v_src->sbjct_start;

  /* "/software/pfam/python/adda/src/cadda.pyx":273
 *     dest.query_end = src.query_end
 *     dest.sbjct_start = src.sbjct_start
 *     dest.sbjct_end = src.sbjct_end             # <<<<<<<<<<<<<<
 *     dest.evalue = src.evalue
 *     dest.query_alen = strlen( src.query_ali )
 */
  __pyx_v_dest->sbjct_end = __pyx_v_src->sbjct_end;

  /* "/software/pfam/python/adda/src/cadda.pyx":274
 *     dest.sbjct_start = src.sbjct_start
 *     dest.sbjct_end = src.sbjct_end
 *     dest.evalue = src.evalue             # <<<<<<<<<<<<<<
 *     dest.query_alen = strlen( src.query_ali )
 *     dest.sbjct_alen = strlen( src.sbjct_ali )
 */
  __pyx_v_dest->evalue = __pyx_v_src->evalue;

  /* "/software/pfam/python/adda/src/cadda.pyx":275
 *     dest.sbjct_end = src.sbjct_end
 *     dest.evalue = src.evalue
 *     dest.query_alen = strlen( src.query_ali )             # <<<<<<<<<<<<<<
 *     dest.sbjct_alen = strlen( src.sbjct_ali )
 *     # copy string explicitely, as lifetime of python object neighbours
 */
  __pyx_v_dest->query_alen = strlen(__pyx_v_src->query_ali);

  /* "/software/pfam/python/adda/src/cadda.pyx":276
 *     dest.evalue = src.evalue
 *     dest.query_alen = strlen( src.query_ali )
 *     dest.sbjct_alen = strlen( src.sbjct_ali )             # <<<<<<<<<<<<<<
 *     # copy string explicitely, as lifetime of python object neighbours
 *     # is no guaranteed.
 */
  __pyx_v_dest->sbjct_alen = strlen(__pyx_v_src->sbjct_ali);

  /* "/software/pfam/python/adda/src/cadda.pyx":279
 *     # copy string explicitely, as lifetime of python object neighbours
 *     # is no guaranteed.
 *     dest.query_ali = <char*>calloc( dest.query_alen + 1, sizeof(char) )             # <<<<<<<<<<<<<<
 *     dest.sbjct_ali = <char*>calloc( dest.sbjct_alen + 1, sizeof(char) )
 * 
 */
  __pyx_v_dest->query_ali = ((char *)calloc((__pyx_v_dest->query_alen + 1), (sizeof(char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":280
 *     # is no guaranteed.
 *     dest.query_ali = <char*>calloc( dest.query_alen + 1, sizeof(char) )
 *     dest.sbjct_ali = <char*>calloc( dest.sbjct_alen + 1, sizeof(char) )             # <<<<<<<<<<<<<<
 * 
 *     strncpy( dest.query_ali, src.query_ali, dest.query_alen + 1)
 */
  __pyx_v_dest->sbjct_ali = ((char *)calloc((__pyx_v_dest->sbjct_alen + 1), (sizeof(char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":282
 *     dest.sbjct_ali = <char*>calloc( dest.sbjct_alen + 1, sizeof(char) )
 * 
 *     strncpy( dest.query_ali, src.query_ali, dest.query_alen + 1)             # <<<<<<<<<<<<<<
 *     strncpy( dest.sbjct_ali, src.sbjct_ali, dest.sbjct_alen + 1)
 * 
 */
  strncpy(__pyx_v_dest->query_ali, __pyx_v_src->query_ali, (__pyx_v_dest->query_alen + 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":283
 * 
 *     strncpy( dest.query_ali, src.query_ali, dest.query_alen + 1)
 *     strncpy( dest.sbjct_ali, src.sbjct_ali, dest.sbjct_alen + 1)             # <<<<<<<<<<<<<<
 * 
 * class NeighbourRecord(object):
 */
  strncpy(__pyx_v_dest->sbjct_ali, __pyx_v_src->sbjct_ali, (__pyx_v_dest->sbjct_alen + 1));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_DECREF((PyObject *)__pyx_v_src);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":287
 * class NeighbourRecord(object):
 * 
 *     def __str__( self ):             # <<<<<<<<<<<<<<
 * 
 *         return "\t".join( map(str, (
 */

static PyObject *__pyx_pf_5cadda_15NeighbourRecord___str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5cadda_15NeighbourRecord___str__ = {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pf_5cadda_15NeighbourRecord___str__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5cadda_15NeighbourRecord___str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__str__");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":289
 *     def __str__( self ):
 * 
 *         return "\t".join( map(str, (             # <<<<<<<<<<<<<<
 *             self.mQueryToken, self.mSbjctToken, self.mEvalue,
 *             self.mQueryFrom, self.mQueryTo,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_1), __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/software/pfam/python/adda/src/cadda.pyx":290
 * 
 *         return "\t".join( map(str, (
 *             self.mQueryToken, self.mSbjctToken, self.mEvalue,             # <<<<<<<<<<<<<<
 *             self.mQueryFrom, self.mQueryTo,
 *             self.mSbjctFrom, self.mSbjctTo )))
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryToken); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctToken); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mEvalue); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "/software/pfam/python/adda/src/cadda.pyx":291
 *         return "\t".join( map(str, (
 *             self.mQueryToken, self.mSbjctToken, self.mEvalue,
 *             self.mQueryFrom, self.mQueryTo,             # <<<<<<<<<<<<<<
 *             self.mSbjctFrom, self.mSbjctTo )))
 * 
 */
  __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryFrom); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryTo); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "/software/pfam/python/adda/src/cadda.pyx":292
 *             self.mQueryToken, self.mSbjctToken, self.mEvalue,
 *             self.mQueryFrom, self.mQueryTo,
 *             self.mSbjctFrom, self.mSbjctTo )))             # <<<<<<<<<<<<<<
 * 
 *     def getAlignment(self ):
 */
  __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctFrom); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctTo); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(7); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(((PyObject *)((PyObject*)&PyString_Type)));
  PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)((PyObject*)&PyString_Type)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyString_Type)));
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_builtin_map, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cadda.NeighbourRecord.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":294
 *             self.mSbjctFrom, self.mSbjctTo )))
 * 
 *     def getAlignment(self ):             # <<<<<<<<<<<<<<
 *         """parse alignment into a AlignmentVector object."""
 *         r = alignlib.makeAlignmentVector()
 */

static PyObject *__pyx_pf_5cadda_15NeighbourRecord_getAlignment(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5cadda_15NeighbourRecord_getAlignment[] = "parse alignment into a AlignmentVector object.";
static PyMethodDef __pyx_mdef_5cadda_15NeighbourRecord_getAlignment = {__Pyx_NAMESTR("getAlignment"), (PyCFunction)__pyx_pf_5cadda_15NeighbourRecord_getAlignment, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_15NeighbourRecord_getAlignment)};
static PyObject *__pyx_pf_5cadda_15NeighbourRecord_getAlignment(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_f;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getAlignment");
  __pyx_self = __pyx_self;
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_f = Py_None; __Pyx_INCREF(Py_None);

  /* "/software/pfam/python/adda/src/cadda.pyx":296
 *     def getAlignment(self ):
 *         """parse alignment into a AlignmentVector object."""
 *         r = alignlib.makeAlignmentVector()             # <<<<<<<<<<<<<<
 *         f = alignlib.AlignmentFormatEmissions()
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__alignlib); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__makeAlignmentVector); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_r);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":297
 *         """parse alignment into a AlignmentVector object."""
 *         r = alignlib.makeAlignmentVector()
 *         f = alignlib.AlignmentFormatEmissions()             # <<<<<<<<<<<<<<
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__alignlib); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_f);
  __pyx_v_f = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":298
 *         r = alignlib.makeAlignmentVector()
 *         f = alignlib.AlignmentFormatEmissions()
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli             # <<<<<<<<<<<<<<
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli
 *         f.copy( r )
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryFrom); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryTo); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryAli); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mRowFrom, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mRowTo, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mRowAlignment, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":299
 *         f = alignlib.AlignmentFormatEmissions()
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli             # <<<<<<<<<<<<<<
 *         f.copy( r )
 *         return r
 */
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctFrom); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctTo); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctAli); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mColFrom, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mColTo, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mColAlignment, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":300
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli
 *         f.copy( r )             # <<<<<<<<<<<<<<
 *         return r
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_f, __pyx_n_s__copy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":301
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli
 *         f.copy( r )
 *         return r             # <<<<<<<<<<<<<<
 * 
 * cdef toNeighbour( Nid query_nid, Neighbour * n ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_r);
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cadda.NeighbourRecord.getAlignment");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":303
 *         return r
 * 
 * cdef toNeighbour( Nid query_nid, Neighbour * n ):             # <<<<<<<<<<<<<<
 *     '''load data from neighbour.'''
 * 
 */

static  PyObject *__pyx_f_5cadda_toNeighbour(Nid __pyx_v_query_nid, __pyx_t_5cadda_Neighbour *__pyx_v_n) {
  PyObject *__pyx_v_dest;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("toNeighbour");
  __pyx_v_dest = Py_None; __Pyx_INCREF(Py_None);

  /* "/software/pfam/python/adda/src/cadda.pyx":306
 *     '''load data from neighbour.'''
 * 
 *     dest = NeighbourRecord()             # <<<<<<<<<<<<<<
 * 
 *     dest.mQueryToken = query_nid
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NeighbourRecord); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_v_dest);
  __pyx_v_dest = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":308
 *     dest = NeighbourRecord()
 * 
 *     dest.mQueryToken = query_nid             # <<<<<<<<<<<<<<
 *     dest.mSbjctToken = n.sbjct_nid
 *     dest.mEvalue = n.evalue
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_Nid(__pyx_v_query_nid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mQueryToken, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":309
 * 
 *     dest.mQueryToken = query_nid
 *     dest.mSbjctToken = n.sbjct_nid             # <<<<<<<<<<<<<<
 *     dest.mEvalue = n.evalue
 *     dest.mQueryFrom = n.query_start
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_Nid(__pyx_v_n->sbjct_nid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mSbjctToken, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":310
 *     dest.mQueryToken = query_nid
 *     dest.mSbjctToken = n.sbjct_nid
 *     dest.mEvalue = n.evalue             # <<<<<<<<<<<<<<
 *     dest.mQueryFrom = n.query_start
 *     dest.mQueryTo = n.query_end
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_n->evalue); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mEvalue, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":311
 *     dest.mSbjctToken = n.sbjct_nid
 *     dest.mEvalue = n.evalue
 *     dest.mQueryFrom = n.query_start             # <<<<<<<<<<<<<<
 *     dest.mQueryTo = n.query_end
 *     dest.mQueryAli = n.query_ali
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uResidue(__pyx_v_n->query_start); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mQueryFrom, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":312
 *     dest.mEvalue = n.evalue
 *     dest.mQueryFrom = n.query_start
 *     dest.mQueryTo = n.query_end             # <<<<<<<<<<<<<<
 *     dest.mQueryAli = n.query_ali
 *     dest.mSbjctFrom = n.sbjct_start
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uResidue(__pyx_v_n->query_end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mQueryTo, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":313
 *     dest.mQueryFrom = n.query_start
 *     dest.mQueryTo = n.query_end
 *     dest.mQueryAli = n.query_ali             # <<<<<<<<<<<<<<
 *     dest.mSbjctFrom = n.sbjct_start
 *     dest.mSbjctTo = n.sbjct_end
 */
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_n->query_ali); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mQueryAli, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":314
 *     dest.mQueryTo = n.query_end
 *     dest.mQueryAli = n.query_ali
 *     dest.mSbjctFrom = n.sbjct_start             # <<<<<<<<<<<<<<
 *     dest.mSbjctTo = n.sbjct_end
 *     dest.mSbjctAli = n.sbjct_ali
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uResidue(__pyx_v_n->sbjct_start); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mSbjctFrom, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":315
 *     dest.mQueryAli = n.query_ali
 *     dest.mSbjctFrom = n.sbjct_start
 *     dest.mSbjctTo = n.sbjct_end             # <<<<<<<<<<<<<<
 *     dest.mSbjctAli = n.sbjct_ali
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uResidue(__pyx_v_n->sbjct_end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mSbjctTo, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":316
 *     dest.mSbjctFrom = n.sbjct_start
 *     dest.mSbjctTo = n.sbjct_end
 *     dest.mSbjctAli = n.sbjct_ali             # <<<<<<<<<<<<<<
 * 
 *     return dest
 */
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_n->sbjct_ali); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetAttr(__pyx_v_dest, __pyx_n_s__mSbjctAli, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":318
 *     dest.mSbjctAli = n.sbjct_ali
 * 
 *     return dest             # <<<<<<<<<<<<<<
 * 
 * cdef toFile( Neighbour * n, FILE * output_f ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dest);
  __pyx_r = __pyx_v_dest;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cadda.toNeighbour");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_dest);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":320
 *     return dest
 * 
 * cdef toFile( Neighbour * n, FILE * output_f ):             # <<<<<<<<<<<<<<
 *     '''write neighbour to file'''
 *     fwrite( &n.sbjct_nid, sizeof(Nid), 1, output_f )
 */

static  PyObject *__pyx_f_5cadda_toFile(__pyx_t_5cadda_Neighbour *__pyx_v_n, FILE *__pyx_v_output_f) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("toFile");

  /* "/software/pfam/python/adda/src/cadda.pyx":322
 * cdef toFile( Neighbour * n, FILE * output_f ):
 *     '''write neighbour to file'''
 *     fwrite( &n.sbjct_nid, sizeof(Nid), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( &n.evalue, sizeof(float), 1, output_f )
 *     fwrite( &n.query_start, sizeof(uResidue), 1, output_f )
 */
  fwrite((&__pyx_v_n->sbjct_nid), (sizeof(Nid)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":323
 *     '''write neighbour to file'''
 *     fwrite( &n.sbjct_nid, sizeof(Nid), 1, output_f )
 *     fwrite( &n.evalue, sizeof(float), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( &n.query_start, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.query_end, sizeof(uResidue), 1, output_f )
 */
  fwrite((&__pyx_v_n->evalue), (sizeof(float)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":324
 *     fwrite( &n.sbjct_nid, sizeof(Nid), 1, output_f )
 *     fwrite( &n.evalue, sizeof(float), 1, output_f )
 *     fwrite( &n.query_start, sizeof(uResidue), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( &n.query_end, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.sbjct_start, sizeof(uResidue), 1, output_f )
 */
  fwrite((&__pyx_v_n->query_start), (sizeof(uResidue)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":325
 *     fwrite( &n.evalue, sizeof(float), 1, output_f )
 *     fwrite( &n.query_start, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.query_end, sizeof(uResidue), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( &n.sbjct_start, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.sbjct_end, sizeof(uResidue), 1, output_f )
 */
  fwrite((&__pyx_v_n->query_end), (sizeof(uResidue)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":326
 *     fwrite( &n.query_start, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.query_end, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.sbjct_start, sizeof(uResidue), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( &n.sbjct_end, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.query_alen, sizeof(Length), 1, output_f )
 */
  fwrite((&__pyx_v_n->sbjct_start), (sizeof(uResidue)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":327
 *     fwrite( &n.query_end, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.sbjct_start, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.sbjct_end, sizeof(uResidue), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( &n.query_alen, sizeof(Length), 1, output_f )
 *     fwrite( &n.sbjct_alen, sizeof(Length), 1, output_f )
 */
  fwrite((&__pyx_v_n->sbjct_end), (sizeof(uResidue)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":328
 *     fwrite( &n.sbjct_start, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.sbjct_end, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.query_alen, sizeof(Length), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( &n.sbjct_alen, sizeof(Length), 1, output_f )
 *     fwrite( n.query_ali, sizeof( char ), n.query_alen, output_f )
 */
  fwrite((&__pyx_v_n->query_alen), (sizeof(Length)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":329
 *     fwrite( &n.sbjct_end, sizeof(uResidue), 1, output_f )
 *     fwrite( &n.query_alen, sizeof(Length), 1, output_f )
 *     fwrite( &n.sbjct_alen, sizeof(Length), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( n.query_ali, sizeof( char ), n.query_alen, output_f )
 *     fwrite( n.sbjct_ali, sizeof( char ), n.sbjct_alen, output_f )
 */
  fwrite((&__pyx_v_n->sbjct_alen), (sizeof(Length)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":330
 *     fwrite( &n.query_alen, sizeof(Length), 1, output_f )
 *     fwrite( &n.sbjct_alen, sizeof(Length), 1, output_f )
 *     fwrite( n.query_ali, sizeof( char ), n.query_alen, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( n.sbjct_ali, sizeof( char ), n.sbjct_alen, output_f )
 * 
 */
  fwrite(__pyx_v_n->query_ali, (sizeof(char)), __pyx_v_n->query_alen, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":331
 *     fwrite( &n.sbjct_alen, sizeof(Length), 1, output_f )
 *     fwrite( n.query_ali, sizeof( char ), n.query_alen, output_f )
 *     fwrite( n.sbjct_ali, sizeof( char ), n.sbjct_alen, output_f )             # <<<<<<<<<<<<<<
 * 
 * cdef fromFile( Neighbour * n, FILE * input_f ):
 */
  fwrite(__pyx_v_n->sbjct_ali, (sizeof(char)), __pyx_v_n->sbjct_alen, __pyx_v_output_f);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":333
 *     fwrite( n.sbjct_ali, sizeof( char ), n.sbjct_alen, output_f )
 * 
 * cdef fromFile( Neighbour * n, FILE * input_f ):             # <<<<<<<<<<<<<<
 *     '''read neighbour from file'''
 *     if n.query_ali != NULL: free( n.query_ali)
 */

static  PyObject *__pyx_f_5cadda_fromFile(__pyx_t_5cadda_Neighbour *__pyx_v_n, FILE *__pyx_v_input_f) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("fromFile");

  /* "/software/pfam/python/adda/src/cadda.pyx":335
 * cdef fromFile( Neighbour * n, FILE * input_f ):
 *     '''read neighbour from file'''
 *     if n.query_ali != NULL: free( n.query_ali)             # <<<<<<<<<<<<<<
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)
 *     fread( &n.sbjct_nid, sizeof(Nid), 1, input_f )
 */
  __pyx_t_1 = (__pyx_v_n->query_ali != NULL);
  if (__pyx_t_1) {
    free(__pyx_v_n->query_ali);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/software/pfam/python/adda/src/cadda.pyx":336
 *     '''read neighbour from file'''
 *     if n.query_ali != NULL: free( n.query_ali)
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)             # <<<<<<<<<<<<<<
 *     fread( &n.sbjct_nid, sizeof(Nid), 1, input_f )
 *     fread( &n.evalue, sizeof(float), 1, input_f )
 */
  __pyx_t_1 = (__pyx_v_n->sbjct_ali != NULL);
  if (__pyx_t_1) {
    free(__pyx_v_n->sbjct_ali);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/software/pfam/python/adda/src/cadda.pyx":337
 *     if n.query_ali != NULL: free( n.query_ali)
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)
 *     fread( &n.sbjct_nid, sizeof(Nid), 1, input_f )             # <<<<<<<<<<<<<<
 *     fread( &n.evalue, sizeof(float), 1, input_f )
 *     fread( &n.query_start, sizeof(uResidue), 1, input_f )
 */
  fread((&__pyx_v_n->sbjct_nid), (sizeof(Nid)), 1, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":338
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)
 *     fread( &n.sbjct_nid, sizeof(Nid), 1, input_f )
 *     fread( &n.evalue, sizeof(float), 1, input_f )             # <<<<<<<<<<<<<<
 *     fread( &n.query_start, sizeof(uResidue), 1, input_f )
 *     fread( &n.query_end, sizeof(uResidue), 1, input_f )
 */
  fread((&__pyx_v_n->evalue), (sizeof(float)), 1, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":339
 *     fread( &n.sbjct_nid, sizeof(Nid), 1, input_f )
 *     fread( &n.evalue, sizeof(float), 1, input_f )
 *     fread( &n.query_start, sizeof(uResidue), 1, input_f )             # <<<<<<<<<<<<<<
 *     fread( &n.query_end, sizeof(uResidue), 1, input_f )
 *     fread( &n.sbjct_start, sizeof(uResidue), 1, input_f )
 */
  fread((&__pyx_v_n->query_start), (sizeof(uResidue)), 1, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":340
 *     fread( &n.evalue, sizeof(float), 1, input_f )
 *     fread( &n.query_start, sizeof(uResidue), 1, input_f )
 *     fread( &n.query_end, sizeof(uResidue), 1, input_f )             # <<<<<<<<<<<<<<
 *     fread( &n.sbjct_start, sizeof(uResidue), 1, input_f )
 *     fread( &n.sbjct_end, sizeof(uResidue), 1, input_f )
 */
  fread((&__pyx_v_n->query_end), (sizeof(uResidue)), 1, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":341
 *     fread( &n.query_start, sizeof(uResidue), 1, input_f )
 *     fread( &n.query_end, sizeof(uResidue), 1, input_f )
 *     fread( &n.sbjct_start, sizeof(uResidue), 1, input_f )             # <<<<<<<<<<<<<<
 *     fread( &n.sbjct_end, sizeof(uResidue), 1, input_f )
 *     fread( &n.query_alen, sizeof(Length), 1, input_f )
 */
  fread((&__pyx_v_n->sbjct_start), (sizeof(uResidue)), 1, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":342
 *     fread( &n.query_end, sizeof(uResidue), 1, input_f )
 *     fread( &n.sbjct_start, sizeof(uResidue), 1, input_f )
 *     fread( &n.sbjct_end, sizeof(uResidue), 1, input_f )             # <<<<<<<<<<<<<<
 *     fread( &n.query_alen, sizeof(Length), 1, input_f )
 *     fread( &n.sbjct_alen, sizeof(Length), 1, input_f )
 */
  fread((&__pyx_v_n->sbjct_end), (sizeof(uResidue)), 1, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":343
 *     fread( &n.sbjct_start, sizeof(uResidue), 1, input_f )
 *     fread( &n.sbjct_end, sizeof(uResidue), 1, input_f )
 *     fread( &n.query_alen, sizeof(Length), 1, input_f )             # <<<<<<<<<<<<<<
 *     fread( &n.sbjct_alen, sizeof(Length), 1, input_f )
 *     n.query_ali = <char*>calloc( n.query_alen + 1, sizeof(char) )
 */
  fread((&__pyx_v_n->query_alen), (sizeof(Length)), 1, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":344
 *     fread( &n.sbjct_end, sizeof(uResidue), 1, input_f )
 *     fread( &n.query_alen, sizeof(Length), 1, input_f )
 *     fread( &n.sbjct_alen, sizeof(Length), 1, input_f )             # <<<<<<<<<<<<<<
 *     n.query_ali = <char*>calloc( n.query_alen + 1, sizeof(char) )
 *     n.sbjct_ali = <char*>calloc( n.sbjct_alen + 1, sizeof(char) )
 */
  fread((&__pyx_v_n->sbjct_alen), (sizeof(Length)), 1, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":345
 *     fread( &n.query_alen, sizeof(Length), 1, input_f )
 *     fread( &n.sbjct_alen, sizeof(Length), 1, input_f )
 *     n.query_ali = <char*>calloc( n.query_alen + 1, sizeof(char) )             # <<<<<<<<<<<<<<
 *     n.sbjct_ali = <char*>calloc( n.sbjct_alen + 1, sizeof(char) )
 *     fread( n.query_ali, sizeof( char ), n.query_alen, input_f )
 */
  __pyx_v_n->query_ali = ((char *)calloc((__pyx_v_n->query_alen + 1), (sizeof(char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":346
 *     fread( &n.sbjct_alen, sizeof(Length), 1, input_f )
 *     n.query_ali = <char*>calloc( n.query_alen + 1, sizeof(char) )
 *     n.sbjct_ali = <char*>calloc( n.sbjct_alen + 1, sizeof(char) )             # <<<<<<<<<<<<<<
 *     fread( n.query_ali, sizeof( char ), n.query_alen, input_f )
 *     fread( n.sbjct_ali, sizeof( char ), n.sbjct_alen, input_f )
 */
  __pyx_v_n->sbjct_ali = ((char *)calloc((__pyx_v_n->sbjct_alen + 1), (sizeof(char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":347
 *     n.query_ali = <char*>calloc( n.query_alen + 1, sizeof(char) )
 *     n.sbjct_ali = <char*>calloc( n.sbjct_alen + 1, sizeof(char) )
 *     fread( n.query_ali, sizeof( char ), n.query_alen, input_f )             # <<<<<<<<<<<<<<
 *     fread( n.sbjct_ali, sizeof( char ), n.sbjct_alen, input_f )
 * 
 */
  fread(__pyx_v_n->query_ali, (sizeof(char)), __pyx_v_n->query_alen, __pyx_v_input_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":348
 *     n.sbjct_ali = <char*>calloc( n.sbjct_alen + 1, sizeof(char) )
 *     fread( n.query_ali, sizeof( char ), n.query_alen, input_f )
 *     fread( n.sbjct_ali, sizeof( char ), n.sbjct_alen, input_f )             # <<<<<<<<<<<<<<
 * 
 * cdef toStdout( Nid query_nid, Neighbour * n ):
 */
  fread(__pyx_v_n->sbjct_ali, (sizeof(char)), __pyx_v_n->sbjct_alen, __pyx_v_input_f);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":350
 *     fread( n.sbjct_ali, sizeof( char ), n.sbjct_alen, input_f )
 * 
 * cdef toStdout( Nid query_nid, Neighbour * n ):             # <<<<<<<<<<<<<<
 *     '''print neighbour to stdout in pairsdb format'''
 *     printf("%i\t%i\t%f\t%i\t%i\t%s\t%i\t%i\t%s\n",
 */

static  PyObject *__pyx_f_5cadda_toStdout(Nid __pyx_v_query_nid, __pyx_t_5cadda_Neighbour *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("toStdout");

  /* "/software/pfam/python/adda/src/cadda.pyx":361
 *            n.sbjct_start,
 *            n.sbjct_end,
 *            n.sbjct_ali)             # <<<<<<<<<<<<<<
 * 
 * cdef unsigned char * toBuffer( Neighbour * n, unsigned char * buffer):
 */
  printf(__pyx_k_3, __pyx_v_query_nid, __pyx_v_n->sbjct_nid, __pyx_v_n->evalue, __pyx_v_n->query_start, __pyx_v_n->query_end, __pyx_v_n->query_ali, __pyx_v_n->sbjct_start, __pyx_v_n->sbjct_end, __pyx_v_n->sbjct_ali);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":363
 *            n.sbjct_ali)
 * 
 * cdef unsigned char * toBuffer( Neighbour * n, unsigned char * buffer):             # <<<<<<<<<<<<<<
 *     '''copy information in *n* into buffer.
 * 
 */

static  unsigned char *__pyx_f_5cadda_toBuffer(__pyx_t_5cadda_Neighbour *__pyx_v_n, unsigned char *__pyx_v_buffer) {
  size_t __pyx_v_s;
  unsigned char *__pyx_r;
  __Pyx_RefNannySetupContext("toBuffer");

  /* "/software/pfam/python/adda/src/cadda.pyx":369
 *     '''
 *     cdef size_t s
 *     s = sizeof( Neighbour ) - 2 * sizeof( char * )             # <<<<<<<<<<<<<<
 *     memcpy( buffer, n, s )
 *     buffer += s
 */
  __pyx_v_s = ((sizeof(__pyx_t_5cadda_Neighbour)) - (2 * (sizeof(char *))));

  /* "/software/pfam/python/adda/src/cadda.pyx":370
 *     cdef size_t s
 *     s = sizeof( Neighbour ) - 2 * sizeof( char * )
 *     memcpy( buffer, n, s )             # <<<<<<<<<<<<<<
 *     buffer += s
 * 
 */
  memcpy(__pyx_v_buffer, __pyx_v_n, __pyx_v_s);

  /* "/software/pfam/python/adda/src/cadda.pyx":371
 *     s = sizeof( Neighbour ) - 2 * sizeof( char * )
 *     memcpy( buffer, n, s )
 *     buffer += s             # <<<<<<<<<<<<<<
 * 
 *     s = sizeof( char ) * (n.query_alen + 1)
 */
  __pyx_v_buffer += __pyx_v_s;

  /* "/software/pfam/python/adda/src/cadda.pyx":373
 *     buffer += s
 * 
 *     s = sizeof( char ) * (n.query_alen + 1)             # <<<<<<<<<<<<<<
 *     memcpy( buffer, n.query_ali, s )
 *     buffer += s
 */
  __pyx_v_s = ((sizeof(char)) * (__pyx_v_n->query_alen + 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":374
 * 
 *     s = sizeof( char ) * (n.query_alen + 1)
 *     memcpy( buffer, n.query_ali, s )             # <<<<<<<<<<<<<<
 *     buffer += s
 * 
 */
  memcpy(__pyx_v_buffer, __pyx_v_n->query_ali, __pyx_v_s);

  /* "/software/pfam/python/adda/src/cadda.pyx":375
 *     s = sizeof( char ) * (n.query_alen + 1)
 *     memcpy( buffer, n.query_ali, s )
 *     buffer += s             # <<<<<<<<<<<<<<
 * 
 *     s = sizeof( char ) * (n.sbjct_alen + 1)
 */
  __pyx_v_buffer += __pyx_v_s;

  /* "/software/pfam/python/adda/src/cadda.pyx":377
 *     buffer += s
 * 
 *     s = sizeof( char ) * (n.sbjct_alen + 1)             # <<<<<<<<<<<<<<
 *     memcpy( buffer, n.sbjct_ali, s )
 *     buffer += s
 */
  __pyx_v_s = ((sizeof(char)) * (__pyx_v_n->sbjct_alen + 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":378
 * 
 *     s = sizeof( char ) * (n.sbjct_alen + 1)
 *     memcpy( buffer, n.sbjct_ali, s )             # <<<<<<<<<<<<<<
 *     buffer += s
 * 
 */
  memcpy(__pyx_v_buffer, __pyx_v_n->sbjct_ali, __pyx_v_s);

  /* "/software/pfam/python/adda/src/cadda.pyx":379
 *     s = sizeof( char ) * (n.sbjct_alen + 1)
 *     memcpy( buffer, n.sbjct_ali, s )
 *     buffer += s             # <<<<<<<<<<<<<<
 * 
 *     return buffer
 */
  __pyx_v_buffer += __pyx_v_s;

  /* "/software/pfam/python/adda/src/cadda.pyx":381
 *     buffer += s
 * 
 *     return buffer             # <<<<<<<<<<<<<<
 * 
 * cdef unsigned char * fromBuffer( Neighbour * n, unsigned char * buffer):
 */
  __pyx_r = __pyx_v_buffer;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":383
 *     return buffer
 * 
 * cdef unsigned char * fromBuffer( Neighbour * n, unsigned char * buffer):             # <<<<<<<<<<<<<<
 *     '''copy data from buffer into *n*.
 * 
 */

static  unsigned char *__pyx_f_5cadda_fromBuffer(__pyx_t_5cadda_Neighbour *__pyx_v_n, unsigned char *__pyx_v_buffer) {
  size_t __pyx_v_s;
  unsigned char *__pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("fromBuffer");

  /* "/software/pfam/python/adda/src/cadda.pyx":388
 *     returns pointer to position in buffer after reading one entry
 *     '''
 *     if n.query_ali != NULL: free( n.query_ali)             # <<<<<<<<<<<<<<
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)
 * 
 */
  __pyx_t_1 = (__pyx_v_n->query_ali != NULL);
  if (__pyx_t_1) {
    free(__pyx_v_n->query_ali);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/software/pfam/python/adda/src/cadda.pyx":389
 *     '''
 *     if n.query_ali != NULL: free( n.query_ali)
 *     if n.sbjct_ali != NULL: free( n.sbjct_ali)             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t s
 */
  __pyx_t_1 = (__pyx_v_n->sbjct_ali != NULL);
  if (__pyx_t_1) {
    free(__pyx_v_n->sbjct_ali);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/software/pfam/python/adda/src/cadda.pyx":392
 * 
 *     cdef size_t s
 *     s = sizeof( Neighbour ) - 2 * sizeof( char * )             # <<<<<<<<<<<<<<
 *     memcpy( n, buffer, s )
 *     buffer += s
 */
  __pyx_v_s = ((sizeof(__pyx_t_5cadda_Neighbour)) - (2 * (sizeof(char *))));

  /* "/software/pfam/python/adda/src/cadda.pyx":393
 *     cdef size_t s
 *     s = sizeof( Neighbour ) - 2 * sizeof( char * )
 *     memcpy( n, buffer, s )             # <<<<<<<<<<<<<<
 *     buffer += s
 * 
 */
  memcpy(__pyx_v_n, __pyx_v_buffer, __pyx_v_s);

  /* "/software/pfam/python/adda/src/cadda.pyx":394
 *     s = sizeof( Neighbour ) - 2 * sizeof( char * )
 *     memcpy( n, buffer, s )
 *     buffer += s             # <<<<<<<<<<<<<<
 * 
 *     n.query_ali = <char*>calloc( n.query_alen + 1, sizeof(char) )
 */
  __pyx_v_buffer += __pyx_v_s;

  /* "/software/pfam/python/adda/src/cadda.pyx":396
 *     buffer += s
 * 
 *     n.query_ali = <char*>calloc( n.query_alen + 1, sizeof(char) )             # <<<<<<<<<<<<<<
 *     n.sbjct_ali = <char*>calloc( n.sbjct_alen + 1, sizeof(char) )
 * 
 */
  __pyx_v_n->query_ali = ((char *)calloc((__pyx_v_n->query_alen + 1), (sizeof(char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":397
 * 
 *     n.query_ali = <char*>calloc( n.query_alen + 1, sizeof(char) )
 *     n.sbjct_ali = <char*>calloc( n.sbjct_alen + 1, sizeof(char) )             # <<<<<<<<<<<<<<
 * 
 *     s = sizeof( char ) * ( n.query_alen + 1)
 */
  __pyx_v_n->sbjct_ali = ((char *)calloc((__pyx_v_n->sbjct_alen + 1), (sizeof(char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":399
 *     n.sbjct_ali = <char*>calloc( n.sbjct_alen + 1, sizeof(char) )
 * 
 *     s = sizeof( char ) * ( n.query_alen + 1)             # <<<<<<<<<<<<<<
 *     memcpy( n.query_ali, buffer, s )
 *     buffer += s
 */
  __pyx_v_s = ((sizeof(char)) * (__pyx_v_n->query_alen + 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":400
 * 
 *     s = sizeof( char ) * ( n.query_alen + 1)
 *     memcpy( n.query_ali, buffer, s )             # <<<<<<<<<<<<<<
 *     buffer += s
 * 
 */
  memcpy(__pyx_v_n->query_ali, __pyx_v_buffer, __pyx_v_s);

  /* "/software/pfam/python/adda/src/cadda.pyx":401
 *     s = sizeof( char ) * ( n.query_alen + 1)
 *     memcpy( n.query_ali, buffer, s )
 *     buffer += s             # <<<<<<<<<<<<<<
 * 
 *     s = sizeof( char ) * (n.sbjct_alen + 1)
 */
  __pyx_v_buffer += __pyx_v_s;

  /* "/software/pfam/python/adda/src/cadda.pyx":403
 *     buffer += s
 * 
 *     s = sizeof( char ) * (n.sbjct_alen + 1)             # <<<<<<<<<<<<<<
 *     memcpy( n.sbjct_ali, buffer, s )
 *     buffer += s
 */
  __pyx_v_s = ((sizeof(char)) * (__pyx_v_n->sbjct_alen + 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":404
 * 
 *     s = sizeof( char ) * (n.sbjct_alen + 1)
 *     memcpy( n.sbjct_ali, buffer, s )             # <<<<<<<<<<<<<<
 *     buffer += s
 * 
 */
  memcpy(__pyx_v_n->sbjct_ali, __pyx_v_buffer, __pyx_v_s);

  /* "/software/pfam/python/adda/src/cadda.pyx":405
 *     s = sizeof( char ) * (n.sbjct_alen + 1)
 *     memcpy( n.sbjct_ali, buffer, s )
 *     buffer += s             # <<<<<<<<<<<<<<
 * 
 *     return buffer
 */
  __pyx_v_buffer += __pyx_v_s;

  /* "/software/pfam/python/adda/src/cadda.pyx":407
 *     buffer += s
 * 
 *     return buffer             # <<<<<<<<<<<<<<
 * 
 * DEF Z_OK           = 0
 */
  __pyx_r = __pyx_v_buffer;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":419
 * DEF Z_VERSION_ERROR = (-6)
 * 
 * def indexGraph( graph_iterator, num_nids, output_filename_graph, output_filename_index, logger ):             # <<<<<<<<<<<<<<
 *     """translate the pairsdb input graph into an ADDA formatted graph.
 * 
 */

static PyObject *__pyx_pf_5cadda_indexGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5cadda_indexGraph[] = "translate the pairsdb input graph into an ADDA formatted graph.\n    \n    This method reformats and indexes a neighbourhood graph.\n\n    The number of nids must be known beforehand and the nids are assumed\n    to be contiguous from 1 to num_nids.\n\n    The ADDA graph format is binary and consists of records of\n    neighbourhood lists. Each record starts with:\n\n    Nid query_nid\n    size_t nneighbours\n    Neigbour [] neighbours\n    \n    where Neighbour is a struct of:\n\n    Nid sbjct_nid \n    float evalue\n    uResidue query_start\n    uResidue query_end\n    uResidues bjct_start\n    uResidue sbjct_end\n    Length query_ali_len\n    Length sbjct_ali_lon\n    char [] query_ali  \n    char [] sbjc_ali\n    \n    query_ali and sbjct_ali are `\000` terminated strings.\n    \n    Each neighbour-record is gzipped.\n\n    The index format is:\n    Nid number of nids\n    FileIndex [] index\n\n    ";
static PyObject *__pyx_pf_5cadda_indexGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph_iterator = 0;
  PyObject *__pyx_v_num_nids = 0;
  PyObject *__pyx_v_output_filename_graph = 0;
  PyObject *__pyx_v_output_filename_index = 0;
  PyObject *__pyx_v_logger = 0;
  FileIndex *__pyx_v_index;
  Nid __pyx_v_nnids;
  FILE *__pyx_v_output_f;
  Nid __pyx_v_query_nid;
  FileIndex __pyx_v_pos;
  __pyx_t_5cadda_Neighbour *__pyx_v_neighbour;
  size_t __pyx_v_nneighbours;
  unsigned char *__pyx_v_buffer;
  unsigned char *__pyx_v_p1;
  size_t __pyx_v_used;
  int __pyx_v_x;
  int __pyx_v_iteration;
  int __pyx_v_report_step;
  struct __pyx_obj_5cadda_NeighbourProxy *__pyx_v_g;
  PyObject *__pyx_v_nskipped;
  PyObject *__pyx_v_neighbours;
  PyObject *__pyx_v_err;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Nid __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  size_t __pyx_t_13;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph_iterator,&__pyx_n_s__num_nids,&__pyx_n_s_4,&__pyx_n_s_5,&__pyx_n_s__logger,0};
  __Pyx_RefNannySetupContext("indexGraph");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph_iterator);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num_nids);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("indexGraph", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_4);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("indexGraph", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_5);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("indexGraph", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__logger);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("indexGraph", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "indexGraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_graph_iterator = values[0];
    __pyx_v_num_nids = values[1];
    __pyx_v_output_filename_graph = values[2];
    __pyx_v_output_filename_index = values[3];
    __pyx_v_logger = values[4];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_graph_iterator = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_num_nids = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_output_filename_graph = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_output_filename_index = PyTuple_GET_ITEM(__pyx_args, 3);
    __pyx_v_logger = PyTuple_GET_ITEM(__pyx_args, 4);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indexGraph", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.indexGraph");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_graph_iterator);
  __Pyx_INCREF(__pyx_v_num_nids);
  __Pyx_INCREF(__pyx_v_output_filename_graph);
  __Pyx_INCREF(__pyx_v_output_filename_index);
  __Pyx_INCREF(__pyx_v_logger);
  __pyx_v_g = ((struct __pyx_obj_5cadda_NeighbourProxy *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_nskipped = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_neighbours = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_err = Py_None; __Pyx_INCREF(Py_None);

  /* "/software/pfam/python/adda/src/cadda.pyx":461
 *     cdef Nid nnids
 *     # add 1 for nid=0
 *     nnids = num_nids + 1             # <<<<<<<<<<<<<<
 *     # sets file positions for unknown ids to 0.
 *     index = <FileIndex*>calloc( nnids, sizeof( FileIndex ) )
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_num_nids, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_Nid(__pyx_t_1); if (unlikely((__pyx_t_2 == (Nid)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nnids = __pyx_t_2;

  /* "/software/pfam/python/adda/src/cadda.pyx":463
 *     nnids = num_nids + 1
 *     # sets file positions for unknown ids to 0.
 *     index = <FileIndex*>calloc( nnids, sizeof( FileIndex ) )             # <<<<<<<<<<<<<<
 *     if index == NULL:
 *         raise ValueError( "memory allocation for index failed" )
 */
  __pyx_v_index = ((FileIndex *)calloc(__pyx_v_nnids, (sizeof(FileIndex))));

  /* "/software/pfam/python/adda/src/cadda.pyx":464
 *     # sets file positions for unknown ids to 0.
 *     index = <FileIndex*>calloc( nnids, sizeof( FileIndex ) )
 *     if index == NULL:             # <<<<<<<<<<<<<<
 *         raise ValueError( "memory allocation for index failed" )
 * 
 */
  __pyx_t_3 = (__pyx_v_index == NULL);
  if (__pyx_t_3) {

    /* "/software/pfam/python/adda/src/cadda.pyx":465
 *     index = <FileIndex*>calloc( nnids, sizeof( FileIndex ) )
 *     if index == NULL:
 *         raise ValueError( "memory allocation for index failed" )             # <<<<<<<<<<<<<<
 * 
 *     # open output file
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_6));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_6));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_6));
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/software/pfam/python/adda/src/cadda.pyx":470
 *     cdef FILE * output_f
 * 
 *     output_f = fopen( output_filename_graph, "wb" );             # <<<<<<<<<<<<<<
 *     if output_f == NULL:
 *         free(index)
 */
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_v_output_filename_graph); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_output_f = fopen(__pyx_t_5, __pyx_k__wb);

  /* "/software/pfam/python/adda/src/cadda.pyx":471
 * 
 *     output_f = fopen( output_filename_graph, "wb" );
 *     if output_f == NULL:             # <<<<<<<<<<<<<<
 *         free(index)
 *         raise ValueError( "opening of file %s failed" % output_filename_graph )
 */
  __pyx_t_3 = (__pyx_v_output_f == NULL);
  if (__pyx_t_3) {

    /* "/software/pfam/python/adda/src/cadda.pyx":472
 *     output_f = fopen( output_filename_graph, "wb" );
 *     if output_f == NULL:
 *         free(index)             # <<<<<<<<<<<<<<
 *         raise ValueError( "opening of file %s failed" % output_filename_graph )
 * 
 */
    free(__pyx_v_index);

    /* "/software/pfam/python/adda/src/cadda.pyx":473
 *     if output_f == NULL:
 *         free(index)
 *         raise ValueError( "opening of file %s failed" % output_filename_graph )             # <<<<<<<<<<<<<<
 * 
 *     # iterate over graph
 */
    __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_7), __pyx_v_output_filename_graph); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/software/pfam/python/adda/src/cadda.pyx":482
 *     cdef size_t nneighbours
 *     cdef unsigned char * buffer
 *     buffer = <unsigned char *>calloc( MAX_BUFFER_SIZE, sizeof(unsigned char) )             # <<<<<<<<<<<<<<
 *     cdef unsigned char * p1
 *     cdef size_t used
 */
  __pyx_v_buffer = ((unsigned char *)calloc(100000000, (sizeof(unsigned char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":490
 *     # write empty entry with nid 0. This is a place-holder
 *     # for entries without neighbours
 *     nneighbours = 0             # <<<<<<<<<<<<<<
 *     query_nid = 0
 *     nskipped = 0
 */
  __pyx_v_nneighbours = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":491
 *     # for entries without neighbours
 *     nneighbours = 0
 *     query_nid = 0             # <<<<<<<<<<<<<<
 *     nskipped = 0
 *     fgetpos( output_f, &pos )
 */
  __pyx_v_query_nid = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":492
 *     nneighbours = 0
 *     query_nid = 0
 *     nskipped = 0             # <<<<<<<<<<<<<<
 *     fgetpos( output_f, &pos )
 *     index[query_nid] = pos
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_DECREF(__pyx_v_nskipped);
  __pyx_v_nskipped = __pyx_int_0;

  /* "/software/pfam/python/adda/src/cadda.pyx":493
 *     query_nid = 0
 *     nskipped = 0
 *     fgetpos( output_f, &pos )             # <<<<<<<<<<<<<<
 *     index[query_nid] = pos
 *     fwrite( &query_nid, sizeof( Nid ), 1, output_f )
 */
  fgetpos(__pyx_v_output_f, (&__pyx_v_pos));

  /* "/software/pfam/python/adda/src/cadda.pyx":494
 *     nskipped = 0
 *     fgetpos( output_f, &pos )
 *     index[query_nid] = pos             # <<<<<<<<<<<<<<
 *     fwrite( &query_nid, sizeof( Nid ), 1, output_f )
 *     fwrite( &nneighbours, sizeof( size_t ), 1, output_f )
 */
  (__pyx_v_index[__pyx_v_query_nid]) = __pyx_v_pos;

  /* "/software/pfam/python/adda/src/cadda.pyx":495
 *     fgetpos( output_f, &pos )
 *     index[query_nid] = pos
 *     fwrite( &query_nid, sizeof( Nid ), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( &nneighbours, sizeof( size_t ), 1, output_f )
 * 
 */
  fwrite((&__pyx_v_query_nid), (sizeof(Nid)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":496
 *     index[query_nid] = pos
 *     fwrite( &query_nid, sizeof( Nid ), 1, output_f )
 *     fwrite( &nneighbours, sizeof( size_t ), 1, output_f )             # <<<<<<<<<<<<<<
 * 
 *     iteration = 0
 */
  fwrite((&__pyx_v_nneighbours), (sizeof(size_t)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":498
 *     fwrite( &nneighbours, sizeof( size_t ), 1, output_f )
 * 
 *     iteration = 0             # <<<<<<<<<<<<<<
 *     report_step = nnids / 1000
 * 
 */
  __pyx_v_iteration = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":499
 * 
 *     iteration = 0
 *     report_step = nnids / 1000             # <<<<<<<<<<<<<<
 * 
 *     for neighbours in graph_iterator:
 */
  __pyx_v_report_step = __Pyx_div_long(__pyx_v_nnids, 1000);

  /* "/software/pfam/python/adda/src/cadda.pyx":501
 *     report_step = nnids / 1000
 * 
 *     for neighbours in graph_iterator:             # <<<<<<<<<<<<<<
 * 
 *         if neighbours == None: break
 */
  if (PyList_CheckExact(__pyx_v_graph_iterator) || PyTuple_CheckExact(__pyx_v_graph_iterator)) {
    __pyx_t_6 = 0; __pyx_t_4 = __pyx_v_graph_iterator; __Pyx_INCREF(__pyx_t_4);
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_graph_iterator); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  }
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_4))) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_4))) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_4);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_neighbours);
    __pyx_v_neighbours = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "/software/pfam/python/adda/src/cadda.pyx":503
 *     for neighbours in graph_iterator:
 * 
 *         if neighbours == None: break             # <<<<<<<<<<<<<<
 *         iteration += 1
 *         if iteration % report_step == 0:
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_neighbours, Py_None, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {
      goto __pyx_L9_break;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "/software/pfam/python/adda/src/cadda.pyx":504
 * 
 *         if neighbours == None: break
 *         iteration += 1             # <<<<<<<<<<<<<<
 *         if iteration % report_step == 0:
 *             logger.info( "indexing progress: %i/%i = %5.1f" % (iteration, nnids, 100.0 * iteration/nnids) )
 */
    __pyx_v_iteration += 1;

    /* "/software/pfam/python/adda/src/cadda.pyx":505
 *         if neighbours == None: break
 *         iteration += 1
 *         if iteration % report_step == 0:             # <<<<<<<<<<<<<<
 *             logger.info( "indexing progress: %i/%i = %5.1f" % (iteration, nnids, 100.0 * iteration/nnids) )
 * 
 */
    if (unlikely(__pyx_v_report_step == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = (__Pyx_mod_int(__pyx_v_iteration, __pyx_v_report_step) == 0);
    if (__pyx_t_3) {

      /* "/software/pfam/python/adda/src/cadda.pyx":506
 *         iteration += 1
 *         if iteration % report_step == 0:
 *             logger.info( "indexing progress: %i/%i = %5.1f" % (iteration, nnids, 100.0 * iteration/nnids) )             # <<<<<<<<<<<<<<
 * 
 *         query_nid = neighbours.query_nid
 */
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_logger, __pyx_n_s__info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyInt_FromLong(__pyx_v_iteration); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_to_py_Nid(__pyx_v_nnids); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = (100.0 * __pyx_v_iteration);
      if (unlikely(__pyx_v_nnids == 0)) {
        PyErr_Format(PyExc_ZeroDivisionError, "float division");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_10 = PyFloat_FromDouble((__pyx_t_9 / __pyx_v_nnids)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_8), __pyx_t_11); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "/software/pfam/python/adda/src/cadda.pyx":508
 *             logger.info( "indexing progress: %i/%i = %5.1f" % (iteration, nnids, 100.0 * iteration/nnids) )
 * 
 *         query_nid = neighbours.query_nid             # <<<<<<<<<<<<<<
 *         # save index position
 *         fgetpos( output_f, &pos )
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_neighbours, __pyx_n_s__query_nid); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = __Pyx_PyInt_from_py_Nid(__pyx_t_10); if (unlikely((__pyx_t_2 == (Nid)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_query_nid = __pyx_t_2;

    /* "/software/pfam/python/adda/src/cadda.pyx":510
 *         query_nid = neighbours.query_nid
 *         # save index position
 *         fgetpos( output_f, &pos )             # <<<<<<<<<<<<<<
 *         index[query_nid] = pos
 * 
 */
    fgetpos(__pyx_v_output_f, (&__pyx_v_pos));

    /* "/software/pfam/python/adda/src/cadda.pyx":511
 *         # save index position
 *         fgetpos( output_f, &pos )
 *         index[query_nid] = pos             # <<<<<<<<<<<<<<
 * 
 *         # convert neighbours
 */
    (__pyx_v_index[__pyx_v_query_nid]) = __pyx_v_pos;

    /* "/software/pfam/python/adda/src/cadda.pyx":514
 * 
 *         # convert neighbours
 *         nneighbours = len(neighbours.matches)             # <<<<<<<<<<<<<<
 * 
 *         # write record to file
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_neighbours, __pyx_n_s__matches); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_nneighbours = __pyx_t_12;

    /* "/software/pfam/python/adda/src/cadda.pyx":517
 * 
 *         # write record to file
 *         fwrite( &query_nid, sizeof( Nid ), 1, output_f )             # <<<<<<<<<<<<<<
 *         fwrite( &nneighbours, sizeof( size_t), 1, output_f )
 * 
 */
    fwrite((&__pyx_v_query_nid), (sizeof(Nid)), 1, __pyx_v_output_f);

    /* "/software/pfam/python/adda/src/cadda.pyx":518
 *         # write record to file
 *         fwrite( &query_nid, sizeof( Nid ), 1, output_f )
 *         fwrite( &nneighbours, sizeof( size_t), 1, output_f )             # <<<<<<<<<<<<<<
 * 
 *         p1 = buffer
 */
    fwrite((&__pyx_v_nneighbours), (sizeof(size_t)), 1, __pyx_v_output_f);

    /* "/software/pfam/python/adda/src/cadda.pyx":520
 *         fwrite( &nneighbours, sizeof( size_t), 1, output_f )
 * 
 *         p1 = buffer             # <<<<<<<<<<<<<<
 * 
 *         for x from 0 <= x < nneighbours:
 */
    __pyx_v_p1 = __pyx_v_buffer;

    /* "/software/pfam/python/adda/src/cadda.pyx":522
 *         p1 = buffer
 * 
 *         for x from 0 <= x < nneighbours:             # <<<<<<<<<<<<<<
 *             g = <NeighbourProxy>neighbours.matches[x]
 *             neighbour = g.neighbour
 */
    __pyx_t_13 = __pyx_v_nneighbours;
    for (__pyx_v_x = 0; __pyx_v_x < __pyx_t_13; __pyx_v_x++) {

      /* "/software/pfam/python/adda/src/cadda.pyx":523
 * 
 *         for x from 0 <= x < nneighbours:
 *             g = <NeighbourProxy>neighbours.matches[x]             # <<<<<<<<<<<<<<
 *             neighbour = g.neighbour
 *             p1 = toBuffer( neighbour, p1 )
 */
      __pyx_t_10 = PyObject_GetAttr(__pyx_v_neighbours, __pyx_n_s__matches); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_10, __pyx_v_x, sizeof(int), PyInt_FromLong); if (!__pyx_t_11) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_INCREF(((PyObject *)((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_t_11)));
      __Pyx_DECREF(((PyObject *)__pyx_v_g));
      __pyx_v_g = ((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "/software/pfam/python/adda/src/cadda.pyx":524
 *         for x from 0 <= x < nneighbours:
 *             g = <NeighbourProxy>neighbours.matches[x]
 *             neighbour = g.neighbour             # <<<<<<<<<<<<<<
 *             p1 = toBuffer( neighbour, p1 )
 * 
 */
      __pyx_v_neighbour = __pyx_v_g->neighbour;

      /* "/software/pfam/python/adda/src/cadda.pyx":525
 *             g = <NeighbourProxy>neighbours.matches[x]
 *             neighbour = g.neighbour
 *             p1 = toBuffer( neighbour, p1 )             # <<<<<<<<<<<<<<
 * 
 *             # print query_nid, nneighbours, neighbour.sbjct_nid, neighbour.sbjct_ali
 */
      __pyx_v_p1 = __pyx_f_5cadda_toBuffer(__pyx_v_neighbour, __pyx_v_p1);

      /* "/software/pfam/python/adda/src/cadda.pyx":530
 * 
 *             # destroy_neighbour( neighbour )
 *             used = p1 - buffer             # <<<<<<<<<<<<<<
 *             if used > MAX_BUFFER_SIZE:
 *                 free(index)
 */
      __pyx_v_used = (__pyx_v_p1 - __pyx_v_buffer);

      /* "/software/pfam/python/adda/src/cadda.pyx":531
 *             # destroy_neighbour( neighbour )
 *             used = p1 - buffer
 *             if used > MAX_BUFFER_SIZE:             # <<<<<<<<<<<<<<
 *                 free(index)
 *                 free(buffer)
 */
      __pyx_t_3 = (__pyx_v_used > 100000000);
      if (__pyx_t_3) {

        /* "/software/pfam/python/adda/src/cadda.pyx":532
 *             used = p1 - buffer
 *             if used > MAX_BUFFER_SIZE:
 *                 free(index)             # <<<<<<<<<<<<<<
 *                 free(buffer)
 *                 raise MemoryError( "memory overflow in indexing: nid=%i, neighbours=%i, used=%i, allocated=%i" % (query_nid, nneighbours, used, MAX_BUFFER_SIZE) )
 */
        free(__pyx_v_index);

        /* "/software/pfam/python/adda/src/cadda.pyx":533
 *             if used > MAX_BUFFER_SIZE:
 *                 free(index)
 *                 free(buffer)             # <<<<<<<<<<<<<<
 *                 raise MemoryError( "memory overflow in indexing: nid=%i, neighbours=%i, used=%i, allocated=%i" % (query_nid, nneighbours, used, MAX_BUFFER_SIZE) )
 * 
 */
        free(__pyx_v_buffer);

        /* "/software/pfam/python/adda/src/cadda.pyx":534
 *                 free(index)
 *                 free(buffer)
 *                 raise MemoryError( "memory overflow in indexing: nid=%i, neighbours=%i, used=%i, allocated=%i" % (query_nid, nneighbours, used, MAX_BUFFER_SIZE) )             # <<<<<<<<<<<<<<
 * 
 *         err = toCompressedFile( buffer, used, output_f )
 */
        __pyx_t_11 = __Pyx_PyInt_to_py_Nid(__pyx_v_query_nid); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = __Pyx_PyInt_FromSize_t(__pyx_v_nneighbours); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_used); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_int_100000000);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_int_100000000);
        __Pyx_GIVEREF(__pyx_int_100000000);
        __pyx_t_11 = 0;
        __pyx_t_10 = 0;
        __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_9), __pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L14;
      }
      __pyx_L14:;
    }

    /* "/software/pfam/python/adda/src/cadda.pyx":536
 *                 raise MemoryError( "memory overflow in indexing: nid=%i, neighbours=%i, used=%i, allocated=%i" % (query_nid, nneighbours, used, MAX_BUFFER_SIZE) )
 * 
 *         err = toCompressedFile( buffer, used, output_f )             # <<<<<<<<<<<<<<
 *         if err:
 *             free(index)
 */
    __pyx_t_1 = PyInt_FromLong(toCompressedFile(__pyx_v_buffer, __pyx_v_used, __pyx_v_output_f)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_err);
    __pyx_v_err = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "/software/pfam/python/adda/src/cadda.pyx":537
 * 
 *         err = toCompressedFile( buffer, used, output_f )
 *         if err:             # <<<<<<<<<<<<<<
 *             free(index)
 *             free(buffer)
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_err); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_3) {

      /* "/software/pfam/python/adda/src/cadda.pyx":538
 *         err = toCompressedFile( buffer, used, output_f )
 *         if err:
 *             free(index)             # <<<<<<<<<<<<<<
 *             free(buffer)
 *             raise ValueError( "error %i while writing compressed buffer to file for nid %i (%i neighbours)" % (err, query_nid, nneighbours) )
 */
      free(__pyx_v_index);

      /* "/software/pfam/python/adda/src/cadda.pyx":539
 *         if err:
 *             free(index)
 *             free(buffer)             # <<<<<<<<<<<<<<
 *             raise ValueError( "error %i while writing compressed buffer to file for nid %i (%i neighbours)" % (err, query_nid, nneighbours) )
 * 
 */
      free(__pyx_v_buffer);

      /* "/software/pfam/python/adda/src/cadda.pyx":540
 *             free(index)
 *             free(buffer)
 *             raise ValueError( "error %i while writing compressed buffer to file for nid %i (%i neighbours)" % (err, query_nid, nneighbours) )             # <<<<<<<<<<<<<<
 * 
 *     # clean up part 1
 */
      __pyx_t_1 = __Pyx_PyInt_to_py_Nid(__pyx_v_query_nid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_nneighbours); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_err);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_err);
      __Pyx_GIVEREF(__pyx_v_err);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_1 = 0;
      __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_10), __pyx_t_10); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L15;
    }
    __pyx_L15:;
  }
  __pyx_L9_break:;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":544
 *     # clean up part 1
 *     # destroy_neighbour( &neighbour )
 *     free(buffer)             # <<<<<<<<<<<<<<
 *     fclose( output_f )
 * 
 */
  free(__pyx_v_buffer);

  /* "/software/pfam/python/adda/src/cadda.pyx":545
 *     # destroy_neighbour( &neighbour )
 *     free(buffer)
 *     fclose( output_f )             # <<<<<<<<<<<<<<
 * 
 *     # save index
 */
  fclose(__pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":548
 * 
 *     # save index
 *     output_f = fopen( output_filename_index, "wb" );             # <<<<<<<<<<<<<<
 *     if output_f == NULL:
 *         free(index)
 */
  __pyx_t_5 = __Pyx_PyBytes_AsString(__pyx_v_output_filename_index); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_output_f = fopen(__pyx_t_5, __pyx_k__wb);

  /* "/software/pfam/python/adda/src/cadda.pyx":549
 *     # save index
 *     output_f = fopen( output_filename_index, "wb" );
 *     if output_f == NULL:             # <<<<<<<<<<<<<<
 *         free(index)
 *         raise ValueError( "opening of file %s failed" % output_filename_index )
 */
  __pyx_t_3 = (__pyx_v_output_f == NULL);
  if (__pyx_t_3) {

    /* "/software/pfam/python/adda/src/cadda.pyx":550
 *     output_f = fopen( output_filename_index, "wb" );
 *     if output_f == NULL:
 *         free(index)             # <<<<<<<<<<<<<<
 *         raise ValueError( "opening of file %s failed" % output_filename_index )
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )
 */
    free(__pyx_v_index);

    /* "/software/pfam/python/adda/src/cadda.pyx":551
 *     if output_f == NULL:
 *         free(index)
 *         raise ValueError( "opening of file %s failed" % output_filename_index )             # <<<<<<<<<<<<<<
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )
 *     fwrite( index, sizeof( FileIndex ), nnids, output_f )
 */
    __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_7), __pyx_v_output_filename_index); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L16;
  }
  __pyx_L16:;

  /* "/software/pfam/python/adda/src/cadda.pyx":552
 *         free(index)
 *         raise ValueError( "opening of file %s failed" % output_filename_index )
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( index, sizeof( FileIndex ), nnids, output_f )
 *     fclose(output_f)
 */
  fwrite((&__pyx_v_nnids), (sizeof(Nid)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":553
 *         raise ValueError( "opening of file %s failed" % output_filename_index )
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )
 *     fwrite( index, sizeof( FileIndex ), nnids, output_f )             # <<<<<<<<<<<<<<
 *     fclose(output_f)
 * 
 */
  fwrite(__pyx_v_index, (sizeof(FileIndex)), __pyx_v_nnids, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":554
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )
 *     fwrite( index, sizeof( FileIndex ), nnids, output_f )
 *     fclose(output_f)             # <<<<<<<<<<<<<<
 * 
 *     # clean up part 2
 */
  fclose(__pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":557
 * 
 *     # clean up part 2
 *     free(index)             # <<<<<<<<<<<<<<
 * 
 * def reindexGraph( num_nids, input_filename_graph, output_filename_index, logger ):
 */
  free(__pyx_v_index);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cadda.indexGraph");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_g);
  __Pyx_DECREF(__pyx_v_nskipped);
  __Pyx_DECREF(__pyx_v_neighbours);
  __Pyx_DECREF(__pyx_v_err);
  __Pyx_DECREF(__pyx_v_graph_iterator);
  __Pyx_DECREF(__pyx_v_num_nids);
  __Pyx_DECREF(__pyx_v_output_filename_graph);
  __Pyx_DECREF(__pyx_v_output_filename_index);
  __Pyx_DECREF(__pyx_v_logger);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":559
 *     free(index)
 * 
 * def reindexGraph( num_nids, input_filename_graph, output_filename_index, logger ):             # <<<<<<<<<<<<<<
 *     '''reindex graph.'''
 * 
 */

static PyObject *__pyx_pf_5cadda_reindexGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5cadda_reindexGraph[] = "reindex graph.";
static PyObject *__pyx_pf_5cadda_reindexGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_num_nids = 0;
  PyObject *__pyx_v_input_filename_graph = 0;
  PyObject *__pyx_v_output_filename_index = 0;
  PyObject *__pyx_v_logger = 0;
  FILE *__pyx_v_input_f;
  FILE *__pyx_v_output_f;
  FileIndex *__pyx_v_index;
  Nid __pyx_v_nnids;
  FileIndex __pyx_v_pos;
  Nid __pyx_v_query_nid;
  size_t __pyx_v_nneighbours;
  unsigned char *__pyx_v_buffer;
  int __pyx_v_iteration;
  int __pyx_v_retval;
  PyObject *__pyx_v_report_step;
  PyObject *__pyx_v_n;
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Nid __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__num_nids,&__pyx_n_s_11,&__pyx_n_s_5,&__pyx_n_s__logger,0};
  __Pyx_RefNannySetupContext("reindexGraph");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num_nids);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_11);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("reindexGraph", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_5);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("reindexGraph", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__logger);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("reindexGraph", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "reindexGraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_num_nids = values[0];
    __pyx_v_input_filename_graph = values[1];
    __pyx_v_output_filename_index = values[2];
    __pyx_v_logger = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_num_nids = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_input_filename_graph = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_output_filename_index = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_logger = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reindexGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.reindexGraph");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_num_nids);
  __Pyx_INCREF(__pyx_v_input_filename_graph);
  __Pyx_INCREF(__pyx_v_output_filename_index);
  __Pyx_INCREF(__pyx_v_logger);
  __pyx_v_report_step = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_n = Py_None; __Pyx_INCREF(Py_None);

  /* "/software/pfam/python/adda/src/cadda.pyx":565
 *     cdef FILE * input_f, * output_f
 * 
 *     input_f = fopen( input_filename_graph, "rb" )             # <<<<<<<<<<<<<<
 *     if input_f == NULL:
 *         raise ValueError( "opening of file %s failed" % input_filename_graph )
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_input_filename_graph); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_input_f = fopen(__pyx_t_1, __pyx_k__rb);

  /* "/software/pfam/python/adda/src/cadda.pyx":566
 * 
 *     input_f = fopen( input_filename_graph, "rb" )
 *     if input_f == NULL:             # <<<<<<<<<<<<<<
 *         raise ValueError( "opening of file %s failed" % input_filename_graph )
 * 
 */
  __pyx_t_2 = (__pyx_v_input_f == NULL);
  if (__pyx_t_2) {

    /* "/software/pfam/python/adda/src/cadda.pyx":567
 *     input_f = fopen( input_filename_graph, "rb" )
 *     if input_f == NULL:
 *         raise ValueError( "opening of file %s failed" % input_filename_graph )             # <<<<<<<<<<<<<<
 * 
 *     # allocate index
 */
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_7), __pyx_v_input_filename_graph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/software/pfam/python/adda/src/cadda.pyx":573
 *     cdef Nid nnids
 *     # add 1 for nid=0
 *     nnids = num_nids + 1             # <<<<<<<<<<<<<<
 *     # sets file positions for unknown ids to 0.
 *     index = <FileIndex*>calloc( nnids, sizeof( FileIndex ) )
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_num_nids, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_from_py_Nid(__pyx_t_3); if (unlikely((__pyx_t_5 == (Nid)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nnids = __pyx_t_5;

  /* "/software/pfam/python/adda/src/cadda.pyx":575
 *     nnids = num_nids + 1
 *     # sets file positions for unknown ids to 0.
 *     index = <FileIndex*>calloc( nnids, sizeof( FileIndex ) )             # <<<<<<<<<<<<<<
 *     if index == NULL:
 *         raise ValueError( "memory allocation for index failed" )
 */
  __pyx_v_index = ((FileIndex *)calloc(__pyx_v_nnids, (sizeof(FileIndex))));

  /* "/software/pfam/python/adda/src/cadda.pyx":576
 *     # sets file positions for unknown ids to 0.
 *     index = <FileIndex*>calloc( nnids, sizeof( FileIndex ) )
 *     if index == NULL:             # <<<<<<<<<<<<<<
 *         raise ValueError( "memory allocation for index failed" )
 * 
 */
  __pyx_t_2 = (__pyx_v_index == NULL);
  if (__pyx_t_2) {

    /* "/software/pfam/python/adda/src/cadda.pyx":577
 *     index = <FileIndex*>calloc( nnids, sizeof( FileIndex ) )
 *     if index == NULL:
 *         raise ValueError( "memory allocation for index failed" )             # <<<<<<<<<<<<<<
 * 
 *     cdef FileIndex pos
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_6));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_kp_s_6));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_6));
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/software/pfam/python/adda/src/cadda.pyx":581
 *     cdef FileIndex pos
 *     # set index for empty entry
 *     fgetpos( input_f, &pos )             # <<<<<<<<<<<<<<
 *     index[0] = pos
 * 
 */
  fgetpos(__pyx_v_input_f, (&__pyx_v_pos));

  /* "/software/pfam/python/adda/src/cadda.pyx":582
 *     # set index for empty entry
 *     fgetpos( input_f, &pos )
 *     index[0] = pos             # <<<<<<<<<<<<<<
 * 
 *     # iterate over graph
 */
  (__pyx_v_index[0]) = __pyx_v_pos;

  /* "/software/pfam/python/adda/src/cadda.pyx":590
 *     cdef int iteration, retval, report_stop
 * 
 *     iteration = 0             # <<<<<<<<<<<<<<
 *     buffer = <unsigned char *>calloc( MAX_BUFFER_SIZE, sizeof(unsigned char) )
 *     report_step = nnids / 1000
 */
  __pyx_v_iteration = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":591
 * 
 *     iteration = 0
 *     buffer = <unsigned char *>calloc( MAX_BUFFER_SIZE, sizeof(unsigned char) )             # <<<<<<<<<<<<<<
 *     report_step = nnids / 1000
 * 
 */
  __pyx_v_buffer = ((unsigned char *)calloc(100000000, (sizeof(unsigned char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":592
 *     iteration = 0
 *     buffer = <unsigned char *>calloc( MAX_BUFFER_SIZE, sizeof(unsigned char) )
 *     report_step = nnids / 1000             # <<<<<<<<<<<<<<
 * 
 *     while not feof( input_f ):
 */
  __pyx_t_4 = PyInt_FromLong(__Pyx_div_long(__pyx_v_nnids, 1000)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_v_report_step);
  __pyx_v_report_step = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":594
 *     report_step = nnids / 1000
 * 
 *     while not feof( input_f ):             # <<<<<<<<<<<<<<
 * 
 *         fgetpos( input_f, &pos )
 */
  while (1) {
    __pyx_t_2 = (!feof(__pyx_v_input_f));
    if (!__pyx_t_2) break;

    /* "/software/pfam/python/adda/src/cadda.pyx":596
 *     while not feof( input_f ):
 * 
 *         fgetpos( input_f, &pos )             # <<<<<<<<<<<<<<
 * 
 *         n = fread( &query_nid, sizeof(Nid), 1, input_f )
 */
    fgetpos(__pyx_v_input_f, (&__pyx_v_pos));

    /* "/software/pfam/python/adda/src/cadda.pyx":598
 *         fgetpos( input_f, &pos )
 * 
 *         n = fread( &query_nid, sizeof(Nid), 1, input_f )             # <<<<<<<<<<<<<<
 *         n += fread( &nneighbours, sizeof(size_t), 1, input_f )
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_FromSize_t(fread((&__pyx_v_query_nid), (sizeof(Nid)), 1, __pyx_v_input_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_n);
    __pyx_v_n = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "/software/pfam/python/adda/src/cadda.pyx":599
 * 
 *         n = fread( &query_nid, sizeof(Nid), 1, input_f )
 *         n += fread( &nneighbours, sizeof(size_t), 1, input_f )             # <<<<<<<<<<<<<<
 * 
 *         if feof( input_f ): break
 */
    __pyx_t_4 = __Pyx_PyInt_FromSize_t(fread((&__pyx_v_nneighbours), (sizeof(size_t)), 1, __pyx_v_input_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_n, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_n);
    __pyx_v_n = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "/software/pfam/python/adda/src/cadda.pyx":601
 *         n += fread( &nneighbours, sizeof(size_t), 1, input_f )
 * 
 *         if feof( input_f ): break             # <<<<<<<<<<<<<<
 * 
 *         # skip place holder pos (there might be several in the file
 */
    __pyx_t_6 = feof(__pyx_v_input_f);
    if (__pyx_t_6) {
      goto __pyx_L9_break;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "/software/pfam/python/adda/src/cadda.pyx":605
 *         # skip place holder pos (there might be several in the file
 *         # if it is the result of a merging operation)
 *         if query_nid == 0: continue             # <<<<<<<<<<<<<<
 * 
 *         iteration += 1
 */
    __pyx_t_2 = (__pyx_v_query_nid == 0);
    if (__pyx_t_2) {
      goto __pyx_L8_continue;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "/software/pfam/python/adda/src/cadda.pyx":607
 *         if query_nid == 0: continue
 * 
 *         iteration += 1             # <<<<<<<<<<<<<<
 *         if iteration % report_step == 0:
 *             logger.info( "indexing progress: %i/%i = %5.1f" % (iteration, nnids, 100.0 * iteration/nnids) )
 */
    __pyx_v_iteration += 1;

    /* "/software/pfam/python/adda/src/cadda.pyx":608
 * 
 *         iteration += 1
 *         if iteration % report_step == 0:             # <<<<<<<<<<<<<<
 *             logger.info( "indexing progress: %i/%i = %5.1f" % (iteration, nnids, 100.0 * iteration/nnids) )
 * 
 */
    __pyx_t_3 = PyInt_FromLong(__pyx_v_iteration); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Remainder(__pyx_t_3, __pyx_v_report_step); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "/software/pfam/python/adda/src/cadda.pyx":609
 *         iteration += 1
 *         if iteration % report_step == 0:
 *             logger.info( "indexing progress: %i/%i = %5.1f" % (iteration, nnids, 100.0 * iteration/nnids) )             # <<<<<<<<<<<<<<
 * 
 *         index[query_nid] = pos
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_logger, __pyx_n_s__info); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_iteration); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyInt_to_py_Nid(__pyx_v_nnids); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = (100.0 * __pyx_v_iteration);
      if (unlikely(__pyx_v_nnids == 0)) {
        PyErr_Format(PyExc_ZeroDivisionError, "float division");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_9 = PyFloat_FromDouble((__pyx_t_8 / __pyx_v_nnids)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_4 = 0;
      __pyx_t_7 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_8), __pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = PyObject_Call(__pyx_t_3, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "/software/pfam/python/adda/src/cadda.pyx":611
 *             logger.info( "indexing progress: %i/%i = %5.1f" % (iteration, nnids, 100.0 * iteration/nnids) )
 * 
 *         index[query_nid] = pos             # <<<<<<<<<<<<<<
 * 
 *         retval = fromCompressedFile( buffer, MAX_BUFFER_SIZE, input_f )
 */
    (__pyx_v_index[__pyx_v_query_nid]) = __pyx_v_pos;

    /* "/software/pfam/python/adda/src/cadda.pyx":613
 *         index[query_nid] = pos
 * 
 *         retval = fromCompressedFile( buffer, MAX_BUFFER_SIZE, input_f )             # <<<<<<<<<<<<<<
 *         if retval != 0:
 *             free(buffer)
 */
    __pyx_v_retval = fromCompressedFile(__pyx_v_buffer, 100000000, __pyx_v_input_f);

    /* "/software/pfam/python/adda/src/cadda.pyx":614
 * 
 *         retval = fromCompressedFile( buffer, MAX_BUFFER_SIZE, input_f )
 *         if retval != 0:             # <<<<<<<<<<<<<<
 *             free(buffer)
 *             raise ValueError("error while reading data for %i" % query_nid )
 */
    __pyx_t_2 = (__pyx_v_retval != 0);
    if (__pyx_t_2) {

      /* "/software/pfam/python/adda/src/cadda.pyx":615
 *         retval = fromCompressedFile( buffer, MAX_BUFFER_SIZE, input_f )
 *         if retval != 0:
 *             free(buffer)             # <<<<<<<<<<<<<<
 *             raise ValueError("error while reading data for %i" % query_nid )
 * 
 */
      free(__pyx_v_buffer);

      /* "/software/pfam/python/adda/src/cadda.pyx":616
 *         if retval != 0:
 *             free(buffer)
 *             raise ValueError("error while reading data for %i" % query_nid )             # <<<<<<<<<<<<<<
 * 
 *     # save index
 */
      __pyx_t_9 = __Pyx_PyInt_to_py_Nid(__pyx_v_query_nid); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_12), __pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L13;
    }
    __pyx_L13:;
    __pyx_L8_continue:;
  }
  __pyx_L9_break:;

  /* "/software/pfam/python/adda/src/cadda.pyx":619
 * 
 *     # save index
 *     output_f = fopen( output_filename_index, "wb" );             # <<<<<<<<<<<<<<
 *     if output_f == NULL:
 *         free(index)
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_output_filename_index); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_output_f = fopen(__pyx_t_1, __pyx_k__wb);

  /* "/software/pfam/python/adda/src/cadda.pyx":620
 *     # save index
 *     output_f = fopen( output_filename_index, "wb" );
 *     if output_f == NULL:             # <<<<<<<<<<<<<<
 *         free(index)
 *         raise ValueError( "opening of file %s failed" % output_filename_index )
 */
  __pyx_t_2 = (__pyx_v_output_f == NULL);
  if (__pyx_t_2) {

    /* "/software/pfam/python/adda/src/cadda.pyx":621
 *     output_f = fopen( output_filename_index, "wb" );
 *     if output_f == NULL:
 *         free(index)             # <<<<<<<<<<<<<<
 *         raise ValueError( "opening of file %s failed" % output_filename_index )
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )
 */
    free(__pyx_v_index);

    /* "/software/pfam/python/adda/src/cadda.pyx":622
 *     if output_f == NULL:
 *         free(index)
 *         raise ValueError( "opening of file %s failed" % output_filename_index )             # <<<<<<<<<<<<<<
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )
 *     fwrite( index, sizeof( FileIndex ), nnids, output_f )
 */
    __pyx_t_10 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_7), __pyx_v_output_filename_index); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_10 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L14;
  }
  __pyx_L14:;

  /* "/software/pfam/python/adda/src/cadda.pyx":623
 *         free(index)
 *         raise ValueError( "opening of file %s failed" % output_filename_index )
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )             # <<<<<<<<<<<<<<
 *     fwrite( index, sizeof( FileIndex ), nnids, output_f )
 *     fclose(output_f)
 */
  fwrite((&__pyx_v_nnids), (sizeof(Nid)), 1, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":624
 *         raise ValueError( "opening of file %s failed" % output_filename_index )
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )
 *     fwrite( index, sizeof( FileIndex ), nnids, output_f )             # <<<<<<<<<<<<<<
 *     fclose(output_f)
 * 
 */
  fwrite(__pyx_v_index, (sizeof(FileIndex)), __pyx_v_nnids, __pyx_v_output_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":625
 *     fwrite( &nnids, sizeof( Nid ), 1, output_f )
 *     fwrite( index, sizeof( FileIndex ), nnids, output_f )
 *     fclose(output_f)             # <<<<<<<<<<<<<<
 * 
 * cdef class IndexedNeighbours:
 */
  fclose(__pyx_v_output_f);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cadda.reindexGraph");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_report_step);
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_DECREF(__pyx_v_num_nids);
  __Pyx_DECREF(__pyx_v_input_filename_graph);
  __Pyx_DECREF(__pyx_v_output_filename_index);
  __Pyx_DECREF(__pyx_v_logger);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":634
 *     cdef Nid mNids
 * 
 *     def __init__(self, filename_graph, filename_index ):             # <<<<<<<<<<<<<<
 * 
 *         cdef FILE * index_f
 */

static int __pyx_pf_5cadda_17IndexedNeighbours___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5cadda_17IndexedNeighbours___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename_graph = 0;
  PyObject *__pyx_v_filename_index = 0;
  FILE *__pyx_v_index_f;
  Nid __pyx_v_nnids;
  int __pyx_r;
  char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename_graph,&__pyx_n_s__filename_index,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename_graph);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename_index);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_filename_graph = values[0];
    __pyx_v_filename_index = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_filename_graph = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_filename_index = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.IndexedNeighbours.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_filename_graph);
  __Pyx_INCREF(__pyx_v_filename_index);

  /* "/software/pfam/python/adda/src/cadda.pyx":637
 * 
 *         cdef FILE * index_f
 *         index_f = fopen( filename_index, "rb" )             # <<<<<<<<<<<<<<
 *         if index_f == NULL:
 *             raise OSError( "could not open index %s " % filename_index )
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_filename_index); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_index_f = fopen(__pyx_t_1, __pyx_k__rb);

  /* "/software/pfam/python/adda/src/cadda.pyx":638
 *         cdef FILE * index_f
 *         index_f = fopen( filename_index, "rb" )
 *         if index_f == NULL:             # <<<<<<<<<<<<<<
 *             raise OSError( "could not open index %s " % filename_index )
 *         cdef Nid nnids
 */
  __pyx_t_2 = (__pyx_v_index_f == NULL);
  if (__pyx_t_2) {

    /* "/software/pfam/python/adda/src/cadda.pyx":639
 *         index_f = fopen( filename_index, "rb" )
 *         if index_f == NULL:
 *             raise OSError( "could not open index %s " % filename_index )             # <<<<<<<<<<<<<<
 *         cdef Nid nnids
 *         if fread( &nnids, sizeof(Nid), 1, index_f ) != 1 or ferror( index_f):
 */
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_13), __pyx_v_filename_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_builtin_OSError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/software/pfam/python/adda/src/cadda.pyx":641
 *             raise OSError( "could not open index %s " % filename_index )
 *         cdef Nid nnids
 *         if fread( &nnids, sizeof(Nid), 1, index_f ) != 1 or ferror( index_f):             # <<<<<<<<<<<<<<
 *             raise OSError( "could not read index from %s" % filename_index )
 * 
 */
  __pyx_t_2 = (fread((&__pyx_v_nnids), (sizeof(Nid)), 1, __pyx_v_index_f) != 1);
  if (!__pyx_t_2) {
    __pyx_t_5 = ferror(__pyx_v_index_f);
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_2;
  }
  if (__pyx_t_6) {

    /* "/software/pfam/python/adda/src/cadda.pyx":642
 *         cdef Nid nnids
 *         if fread( &nnids, sizeof(Nid), 1, index_f ) != 1 or ferror( index_f):
 *             raise OSError( "could not read index from %s" % filename_index )             # <<<<<<<<<<<<<<
 * 
 *         self.mIndex = <FileIndex *>calloc( sizeof(FileIndex), nnids)
 */
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_14), __pyx_v_filename_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_builtin_OSError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/software/pfam/python/adda/src/cadda.pyx":644
 *             raise OSError( "could not read index from %s" % filename_index )
 * 
 *         self.mIndex = <FileIndex *>calloc( sizeof(FileIndex), nnids)             # <<<<<<<<<<<<<<
 *         if self.mIndex == NULL:
 *             raise MemoryError( "out of memory when allocating index for %i nids" % nnids )
 */
  ((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mIndex = ((FileIndex *)calloc((sizeof(FileIndex)), __pyx_v_nnids));

  /* "/software/pfam/python/adda/src/cadda.pyx":645
 * 
 *         self.mIndex = <FileIndex *>calloc( sizeof(FileIndex), nnids)
 *         if self.mIndex == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError( "out of memory when allocating index for %i nids" % nnids )
 * 
 */
  __pyx_t_6 = (((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mIndex == NULL);
  if (__pyx_t_6) {

    /* "/software/pfam/python/adda/src/cadda.pyx":646
 *         self.mIndex = <FileIndex *>calloc( sizeof(FileIndex), nnids)
 *         if self.mIndex == NULL:
 *             raise MemoryError( "out of memory when allocating index for %i nids" % nnids )             # <<<<<<<<<<<<<<
 * 
 *         if fread( self.mIndex, sizeof(FileIndex), nnids, index_f ) != nnids or ferror(index_f):
 */
    __pyx_t_3 = __Pyx_PyInt_to_py_Nid(__pyx_v_nnids); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_15), __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "/software/pfam/python/adda/src/cadda.pyx":648
 *             raise MemoryError( "out of memory when allocating index for %i nids" % nnids )
 * 
 *         if fread( self.mIndex, sizeof(FileIndex), nnids, index_f ) != nnids or ferror(index_f):             # <<<<<<<<<<<<<<
 *             raise OSError( "could not read index from %s" % filename_index )
 *         fclose( index_f)
 */
  __pyx_t_6 = (fread(((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mIndex, (sizeof(FileIndex)), __pyx_v_nnids, __pyx_v_index_f) != __pyx_v_nnids);
  if (!__pyx_t_6) {
    __pyx_t_5 = ferror(__pyx_v_index_f);
    __pyx_t_2 = __pyx_t_5;
  } else {
    __pyx_t_2 = __pyx_t_6;
  }
  if (__pyx_t_2) {

    /* "/software/pfam/python/adda/src/cadda.pyx":649
 * 
 *         if fread( self.mIndex, sizeof(FileIndex), nnids, index_f ) != nnids or ferror(index_f):
 *             raise OSError( "could not read index from %s" % filename_index )             # <<<<<<<<<<<<<<
 *         fclose( index_f)
 * 
 */
    __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_14), __pyx_v_filename_index); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_OSError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "/software/pfam/python/adda/src/cadda.pyx":650
 *         if fread( self.mIndex, sizeof(FileIndex), nnids, index_f ) != nnids or ferror(index_f):
 *             raise OSError( "could not read index from %s" % filename_index )
 *         fclose( index_f)             # <<<<<<<<<<<<<<
 * 
 *         self.mFile = fopen( filename_graph, "rb" )
 */
  fclose(__pyx_v_index_f);

  /* "/software/pfam/python/adda/src/cadda.pyx":652
 *         fclose( index_f)
 * 
 *         self.mFile = fopen( filename_graph, "rb" )             # <<<<<<<<<<<<<<
 * 
 *         if nnids == 0:
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_filename_graph); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mFile = fopen(__pyx_t_1, __pyx_k__rb);

  /* "/software/pfam/python/adda/src/cadda.pyx":654
 *         self.mFile = fopen( filename_graph, "rb" )
 * 
 *         if nnids == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("graph is empty")
 *         self.mNids = nnids
 */
  __pyx_t_2 = (__pyx_v_nnids == 0);
  if (__pyx_t_2) {

    /* "/software/pfam/python/adda/src/cadda.pyx":655
 * 
 *         if nnids == 0:
 *             raise ValueError("graph is empty")             # <<<<<<<<<<<<<<
 *         self.mNids = nnids
 * 
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_16));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_16));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_16));
    __pyx_t_3 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L10;
  }
  __pyx_L10:;

  /* "/software/pfam/python/adda/src/cadda.pyx":656
 *         if nnids == 0:
 *             raise ValueError("graph is empty")
 *         self.mNids = nnids             # <<<<<<<<<<<<<<
 * 
 *     def getNeighbours( self, nid ):
 */
  ((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mNids = __pyx_v_nnids;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cadda.IndexedNeighbours.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_filename_graph);
  __Pyx_DECREF(__pyx_v_filename_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":658
 *         self.mNids = nnids
 * 
 *     def getNeighbours( self, nid ):             # <<<<<<<<<<<<<<
 *         '''retrieve neighbours for *nid*'''
 * 
 */

static PyObject *__pyx_pf_5cadda_17IndexedNeighbours_getNeighbours(PyObject *__pyx_v_self, PyObject *__pyx_v_nid); /*proto*/
static char __pyx_doc_5cadda_17IndexedNeighbours_getNeighbours[] = "retrieve neighbours for *nid*";
static PyObject *__pyx_pf_5cadda_17IndexedNeighbours_getNeighbours(PyObject *__pyx_v_self, PyObject *__pyx_v_nid) {
  int __pyx_v_r;
  int __pyx_v_n;
  size_t __pyx_v_nneighbours;
  Nid __pyx_v_query_nid;
  unsigned char *__pyx_v_buffer;
  int __pyx_v_retval;
  __pyx_t_5cadda_Neighbour __pyx_v_neighbour;
  unsigned char *__pyx_v_p;
  int __pyx_v_i;
  PyObject *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  size_t __pyx_t_7;
  __Pyx_RefNannySetupContext("getNeighbours");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_nid);
  __pyx_v_result = Py_None; __Pyx_INCREF(Py_None);

  /* "/software/pfam/python/adda/src/cadda.pyx":661
 *         '''retrieve neighbours for *nid*'''
 * 
 *         assert 0 < nid < self.mNids, "nid %i out of range, maximum is %i" % (nid, self.mNids - 1)             # <<<<<<<<<<<<<<
 * 
 *         cdef int r
 */
  #ifndef PYREX_WITHOUT_ASSERTIONS
  __pyx_t_1 = PyObject_RichCompare(__pyx_int_0, __pyx_v_nid, Py_LT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_IsTrue(__pyx_t_1)) {
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_to_py_Nid(((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mNids); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_nid, __pyx_t_2, Py_LT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) {
    __pyx_t_1 = PyInt_FromLong((((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mNids - 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_nid);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_nid);
    __Pyx_GIVEREF(__pyx_v_nid);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_17), __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    PyErr_SetObject(PyExc_AssertionError, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/software/pfam/python/adda/src/cadda.pyx":664
 * 
 *         cdef int r
 *         r = fsetpos( self.mFile, &self.mIndex[nid] )             # <<<<<<<<<<<<<<
 * 
 *         if r != 0:
 */
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_nid); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = fsetpos(((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mFile, (&(((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mIndex[__pyx_t_4])));

  /* "/software/pfam/python/adda/src/cadda.pyx":666
 *         r = fsetpos( self.mFile, &self.mIndex[nid] )
 * 
 *         if r != 0:             # <<<<<<<<<<<<<<
 *             raise OSError( "Could not go to file position for nid %i" % nid )
 * 
 */
  __pyx_t_3 = (__pyx_v_r != 0);
  if (__pyx_t_3) {

    /* "/software/pfam/python/adda/src/cadda.pyx":667
 * 
 *         if r != 0:
 *             raise OSError( "Could not go to file position for nid %i" % nid )             # <<<<<<<<<<<<<<
 * 
 *         cdef int n
 */
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_18), __pyx_v_nid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_OSError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/software/pfam/python/adda/src/cadda.pyx":673
 *         cdef Nid query_nid
 * 
 *         n = fread( &query_nid, sizeof(Nid), 1, self.mFile )             # <<<<<<<<<<<<<<
 *         n += fread( &nneighbours, sizeof(size_t), 1, self.mFile )
 * 
 */
  __pyx_v_n = fread((&__pyx_v_query_nid), (sizeof(Nid)), 1, ((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mFile);

  /* "/software/pfam/python/adda/src/cadda.pyx":674
 * 
 *         n = fread( &query_nid, sizeof(Nid), 1, self.mFile )
 *         n += fread( &nneighbours, sizeof(size_t), 1, self.mFile )             # <<<<<<<<<<<<<<
 * 
 *         assert n == 2, "wrong item count while reading from graph"
 */
  __pyx_v_n += fread((&__pyx_v_nneighbours), (sizeof(size_t)), 1, ((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mFile);

  /* "/software/pfam/python/adda/src/cadda.pyx":676
 *         n += fread( &nneighbours, sizeof(size_t), 1, self.mFile )
 * 
 *         assert n == 2, "wrong item count while reading from graph"             # <<<<<<<<<<<<<<
 *         if nid != query_nid and query_nid != 0:
 *             raise ValueError( "index returned wrong nid: %i instead of %i" % (query_nid, nid) )
 */
  #ifndef PYREX_WITHOUT_ASSERTIONS
  if (unlikely(!(__pyx_v_n == 2))) {
    PyErr_SetObject(PyExc_AssertionError, ((PyObject *)__pyx_kp_s_19));
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/software/pfam/python/adda/src/cadda.pyx":677
 * 
 *         assert n == 2, "wrong item count while reading from graph"
 *         if nid != query_nid and query_nid != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError( "index returned wrong nid: %i instead of %i" % (query_nid, nid) )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_Nid(__pyx_v_query_nid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_nid, __pyx_t_1, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_5 = (__pyx_v_query_nid != 0);
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_3;
  }
  if (__pyx_t_6) {

    /* "/software/pfam/python/adda/src/cadda.pyx":678
 *         assert n == 2, "wrong item count while reading from graph"
 *         if nid != query_nid and query_nid != 0:
 *             raise ValueError( "index returned wrong nid: %i instead of %i" % (query_nid, nid) )             # <<<<<<<<<<<<<<
 * 
 *         if query_nid == 0: return []
 */
    __pyx_t_2 = __Pyx_PyInt_to_py_Nid(__pyx_v_query_nid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_nid);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_nid);
    __Pyx_GIVEREF(__pyx_v_nid);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_20), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/software/pfam/python/adda/src/cadda.pyx":680
 *             raise ValueError( "index returned wrong nid: %i instead of %i" % (query_nid, nid) )
 * 
 *         if query_nid == 0: return []             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned char * buffer
 */
  __pyx_t_6 = (__pyx_v_query_nid == 0);
  if (__pyx_t_6) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_r = ((PyObject *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/software/pfam/python/adda/src/cadda.pyx":683
 * 
 *         cdef unsigned char * buffer
 *         buffer = <unsigned char *>calloc( MAX_BUFFER_SIZE, sizeof(unsigned char) )             # <<<<<<<<<<<<<<
 * 
 *         cdef int retval
 */
  __pyx_v_buffer = ((unsigned char *)calloc(100000000, (sizeof(unsigned char))));

  /* "/software/pfam/python/adda/src/cadda.pyx":686
 * 
 *         cdef int retval
 *         retval = fromCompressedFile( buffer, MAX_BUFFER_SIZE, self.mFile )             # <<<<<<<<<<<<<<
 *         if retval != 0:
 *             free(buffer)
 */
  __pyx_v_retval = fromCompressedFile(__pyx_v_buffer, 100000000, ((struct __pyx_obj_5cadda_IndexedNeighbours *)__pyx_v_self)->mFile);

  /* "/software/pfam/python/adda/src/cadda.pyx":687
 *         cdef int retval
 *         retval = fromCompressedFile( buffer, MAX_BUFFER_SIZE, self.mFile )
 *         if retval != 0:             # <<<<<<<<<<<<<<
 *             free(buffer)
 *             raise ValueError("error while reading data for %i" % nid )
 */
  __pyx_t_6 = (__pyx_v_retval != 0);
  if (__pyx_t_6) {

    /* "/software/pfam/python/adda/src/cadda.pyx":688
 *         retval = fromCompressedFile( buffer, MAX_BUFFER_SIZE, self.mFile )
 *         if retval != 0:
 *             free(buffer)             # <<<<<<<<<<<<<<
 *             raise ValueError("error while reading data for %i" % nid )
 * 
 */
    free(__pyx_v_buffer);

    /* "/software/pfam/python/adda/src/cadda.pyx":689
 *         if retval != 0:
 *             free(buffer)
 *             raise ValueError("error while reading data for %i" % nid )             # <<<<<<<<<<<<<<
 * 
 *         # create neighbours
 */
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_12), __pyx_v_nid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "/software/pfam/python/adda/src/cadda.pyx":693
 *         # create neighbours
 *         cdef Neighbour neighbour
 *         init_neighbour( &neighbour )             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned char * p
 */
  __pyx_f_5cadda_init_neighbour((&__pyx_v_neighbour));

  /* "/software/pfam/python/adda/src/cadda.pyx":698
 *         cdef int i
 * 
 *         result = []             # <<<<<<<<<<<<<<
 * 
 *         p = buffer
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_v_result);
  __pyx_v_result = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":700
 *         result = []
 * 
 *         p = buffer             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < nneighbours:
 *             p = fromBuffer( &neighbour, p )
 */
  __pyx_v_p = __pyx_v_buffer;

  /* "/software/pfam/python/adda/src/cadda.pyx":701
 * 
 *         p = buffer
 *         for i from 0 <= i < nneighbours:             # <<<<<<<<<<<<<<
 *             p = fromBuffer( &neighbour, p )
 *             result.append( toNeighbour( query_nid, &neighbour) )
 */
  __pyx_t_7 = __pyx_v_nneighbours;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_7; __pyx_v_i++) {

    /* "/software/pfam/python/adda/src/cadda.pyx":702
 *         p = buffer
 *         for i from 0 <= i < nneighbours:
 *             p = fromBuffer( &neighbour, p )             # <<<<<<<<<<<<<<
 *             result.append( toNeighbour( query_nid, &neighbour) )
 * 
 */
    __pyx_v_p = __pyx_f_5cadda_fromBuffer((&__pyx_v_neighbour), __pyx_v_p);

    /* "/software/pfam/python/adda/src/cadda.pyx":703
 *         for i from 0 <= i < nneighbours:
 *             p = fromBuffer( &neighbour, p )
 *             result.append( toNeighbour( query_nid, &neighbour) )             # <<<<<<<<<<<<<<
 * 
 *         destroy_neighbour( &neighbour )
 */
    __pyx_t_2 = __pyx_f_5cadda_toNeighbour(__pyx_v_query_nid, (&__pyx_v_neighbour)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/software/pfam/python/adda/src/cadda.pyx":705
 *             result.append( toNeighbour( query_nid, &neighbour) )
 * 
 *         destroy_neighbour( &neighbour )             # <<<<<<<<<<<<<<
 * 
 *         free( buffer )
 */
  __pyx_t_1 = __pyx_f_5cadda_destroy_neighbour((&__pyx_v_neighbour)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":707
 *         destroy_neighbour( &neighbour )
 * 
 *         free( buffer )             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  free(__pyx_v_buffer);

  /* "/software/pfam/python/adda/src/cadda.pyx":708
 * 
 *         free( buffer )
 *         return result             # <<<<<<<<<<<<<<
 * 
 * ###############################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cadda.IndexedNeighbours.getNeighbours");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_result);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_nid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":746
 *        char * sbjct_ali
 * 
 *     def __init__(self, line ):             # <<<<<<<<<<<<<<
 * 
 *         cdef int n, l
 */

static int __pyx_pf_5cadda_22PairsDBNeighbourRecord___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5cadda_22PairsDBNeighbourRecord___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_line = 0;
  int __pyx_v_n;
  int __pyx_v_l;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__line,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__line);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_line = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_line = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.PairsDBNeighbourRecord.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_line);

  /* "/software/pfam/python/adda/src/cadda.pyx":749
 * 
 *         cdef int n, l
 *         l = len(line)             # <<<<<<<<<<<<<<
 *         self.query_token = <char*>calloc(l,1)
 *         self.sbjct_token = <char*>calloc(l,1)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_line); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_l = __pyx_t_1;

  /* "/software/pfam/python/adda/src/cadda.pyx":750
 *         cdef int n, l
 *         l = len(line)
 *         self.query_token = <char*>calloc(l,1)             # <<<<<<<<<<<<<<
 *         self.sbjct_token = <char*>calloc(l,1)
 *         self.query_ali = <char*>calloc(l,1)
 */
  ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_token = ((char *)calloc(__pyx_v_l, 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":751
 *         l = len(line)
 *         self.query_token = <char*>calloc(l,1)
 *         self.sbjct_token = <char*>calloc(l,1)             # <<<<<<<<<<<<<<
 *         self.query_ali = <char*>calloc(l,1)
 *         self.sbjct_ali = <char*>calloc(l,1)
 */
  ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_token = ((char *)calloc(__pyx_v_l, 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":752
 *         self.query_token = <char*>calloc(l,1)
 *         self.sbjct_token = <char*>calloc(l,1)
 *         self.query_ali = <char*>calloc(l,1)             # <<<<<<<<<<<<<<
 *         self.sbjct_ali = <char*>calloc(l,1)
 * 
 */
  ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_ali = ((char *)calloc(__pyx_v_l, 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":753
 *         self.sbjct_token = <char*>calloc(l,1)
 *         self.query_ali = <char*>calloc(l,1)
 *         self.sbjct_ali = <char*>calloc(l,1)             # <<<<<<<<<<<<<<
 * 
 *         n = sscanf( line,
 */
  ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_ali = ((char *)calloc(__pyx_v_l, 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":755
 *         self.sbjct_ali = <char*>calloc(l,1)
 * 
 *         n = sscanf( line,             # <<<<<<<<<<<<<<
 *                     "%s\t%s\t%f\t%i\t%i\t%s\t%i\t%i\t%s",
 *                     self.query_token,
 */
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_line); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/software/pfam/python/adda/src/cadda.pyx":765
 *                     &self.sbjct_start,
 *                     &self.sbjct_end,
 *                     self.sbjct_ali )             # <<<<<<<<<<<<<<
 * 
 *         if n != 9:
 */
  __pyx_v_n = sscanf(__pyx_t_2, __pyx_k_21, ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_token, ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_token, (&((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->evalue), (&((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_start), (&((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_end), ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_ali, (&((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_start), (&((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_end), ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_ali);

  /* "/software/pfam/python/adda/src/cadda.pyx":767
 *                     self.sbjct_ali )
 * 
 *         if n != 9:             # <<<<<<<<<<<<<<
 *             raise ValueError("parsing error (%i) in line `%s`" % (n,line))
 * 
 */
  __pyx_t_3 = (__pyx_v_n != 9);
  if (__pyx_t_3) {

    /* "/software/pfam/python/adda/src/cadda.pyx":768
 * 
 *         if n != 9:
 *             raise ValueError("parsing error (%i) in line `%s`" % (n,line))             # <<<<<<<<<<<<<<
 * 
 *     def __str__( self ):
 */
    __pyx_t_4 = PyInt_FromLong(__pyx_v_n); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_line);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_line);
    __Pyx_GIVEREF(__pyx_v_line);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_22), __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cadda.PairsDBNeighbourRecord.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_line);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":770
 *             raise ValueError("parsing error (%i) in line `%s`" % (n,line))
 * 
 *     def __str__( self ):             # <<<<<<<<<<<<<<
 * 
 *         return "\t".join( map(str, (
 */

static PyObject *__pyx_pf_5cadda_22PairsDBNeighbourRecord___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5cadda_22PairsDBNeighbourRecord___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__str__");

  /* "/software/pfam/python/adda/src/cadda.pyx":772
 *     def __str__( self ):
 * 
 *         return "\t".join( map(str, (             # <<<<<<<<<<<<<<
 *                     self.query_token, self.sbjct_token, self.evalue,
 *                     self.query_start, self.query_end, self.query_ali,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_1), __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/software/pfam/python/adda/src/cadda.pyx":773
 * 
 *         return "\t".join( map(str, (
 *                     self.query_token, self.sbjct_token, self.evalue,             # <<<<<<<<<<<<<<
 *                     self.query_start, self.query_end, self.query_ali,
 *                     self.sbjct_start, self.sbjct_end, self.sbjct_ali)))
 */
  __pyx_t_2 = __Pyx_PyBytes_FromString(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_token); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = __Pyx_PyBytes_FromString(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_token); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_4 = PyFloat_FromDouble(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->evalue); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "/software/pfam/python/adda/src/cadda.pyx":774
 *         return "\t".join( map(str, (
 *                     self.query_token, self.sbjct_token, self.evalue,
 *                     self.query_start, self.query_end, self.query_ali,             # <<<<<<<<<<<<<<
 *                     self.sbjct_start, self.sbjct_end, self.sbjct_ali)))
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_to_py_uResidue(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_start); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_to_py_uResidue(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_end); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyBytes_FromString(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_ali); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_7));

  /* "/software/pfam/python/adda/src/cadda.pyx":775
 *                     self.query_token, self.sbjct_token, self.evalue,
 *                     self.query_start, self.query_end, self.query_ali,
 *                     self.sbjct_start, self.sbjct_end, self.sbjct_ali)))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_8 = __Pyx_PyInt_to_py_uResidue(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_start); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_to_py_uResidue(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_end); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyBytes_FromString(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_ali); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_10));
  __pyx_t_11 = PyTuple_New(9); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_11, 1, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_11, 5, ((PyObject *)__pyx_t_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_7));
  PyTuple_SET_ITEM(__pyx_t_11, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_11, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_11, 8, ((PyObject *)__pyx_t_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_10));
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(((PyObject *)((PyObject*)&PyString_Type)));
  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)((PyObject*)&PyString_Type)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyString_Type)));
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_builtin_map, __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cadda.PairsDBNeighbourRecord.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":777
 *                     self.sbjct_start, self.sbjct_end, self.sbjct_ali)))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free( self.query_token )
 *         free( self.sbjct_token )
 */

static void __pyx_pf_5cadda_22PairsDBNeighbourRecord___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5cadda_22PairsDBNeighbourRecord___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/software/pfam/python/adda/src/cadda.pyx":778
 * 
 *     def __dealloc__(self):
 *         free( self.query_token )             # <<<<<<<<<<<<<<
 *         free( self.sbjct_token )
 *         free( self.query_ali )
 */
  free(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_token);

  /* "/software/pfam/python/adda/src/cadda.pyx":779
 *     def __dealloc__(self):
 *         free( self.query_token )
 *         free( self.sbjct_token )             # <<<<<<<<<<<<<<
 *         free( self.query_ali )
 *         free( self.sbjct_ali )
 */
  free(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_token);

  /* "/software/pfam/python/adda/src/cadda.pyx":780
 *         free( self.query_token )
 *         free( self.sbjct_token )
 *         free( self.query_ali )             # <<<<<<<<<<<<<<
 *         free( self.sbjct_ali )
 * 
 */
  free(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->query_ali);

  /* "/software/pfam/python/adda/src/cadda.pyx":781
 *         free( self.sbjct_token )
 *         free( self.query_ali )
 *         free( self.sbjct_ali )             # <<<<<<<<<<<<<<
 * 
 *     def getAlignment(self ):
 */
  free(((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_v_self)->sbjct_ali);

  __Pyx_RefNannyFinishContext();
}

/* "/software/pfam/python/adda/src/cadda.pyx":783
 *         free( self.sbjct_ali )
 * 
 *     def getAlignment(self ):             # <<<<<<<<<<<<<<
 *         """parse alignment into a AlignmentVector object."""
 *         r = alignlib.makeAlignmentVector()
 */

static PyObject *__pyx_pf_5cadda_22PairsDBNeighbourRecord_getAlignment(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_5cadda_22PairsDBNeighbourRecord_getAlignment[] = "parse alignment into a AlignmentVector object.";
static PyObject *__pyx_pf_5cadda_22PairsDBNeighbourRecord_getAlignment(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_f;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getAlignment");
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_f = Py_None; __Pyx_INCREF(Py_None);

  /* "/software/pfam/python/adda/src/cadda.pyx":785
 *     def getAlignment(self ):
 *         """parse alignment into a AlignmentVector object."""
 *         r = alignlib.makeAlignmentVector()             # <<<<<<<<<<<<<<
 *         f = alignlib.AlignmentFormatEmissions()
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__alignlib); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__makeAlignmentVector); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_r);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":786
 *         """parse alignment into a AlignmentVector object."""
 *         r = alignlib.makeAlignmentVector()
 *         f = alignlib.AlignmentFormatEmissions()             # <<<<<<<<<<<<<<
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__alignlib); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_f);
  __pyx_v_f = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":787
 *         r = alignlib.makeAlignmentVector()
 *         f = alignlib.AlignmentFormatEmissions()
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli             # <<<<<<<<<<<<<<
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli
 *         f.copy( r )
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryFrom); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryTo); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mQueryAli); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mRowFrom, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mRowTo, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mRowAlignment, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":788
 *         f = alignlib.AlignmentFormatEmissions()
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli             # <<<<<<<<<<<<<<
 *         f.copy( r )
 *         return r
 */
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctFrom); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctTo); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mSbjctAli); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mColFrom, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mColTo, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_v_f, __pyx_n_s__mColAlignment, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":789
 *         f.mRowFrom, f.mRowTo, f.mRowAlignment = self.mQueryFrom, self.mQueryTo, self.mQueryAli
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli
 *         f.copy( r )             # <<<<<<<<<<<<<<
 *         return r
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_f, __pyx_n_s__copy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":790
 *         f.mColFrom, f.mColTo, f.mColAlignment = self.mSbjctFrom, self.mSbjctTo, self.mSbjctAli
 *         f.copy( r )
 *         return r             # <<<<<<<<<<<<<<
 * 
 * cdef class PairsDBNeighbourRecordOldFormat(PairsDBNeighbourRecord):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_r);
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cadda.PairsDBNeighbourRecord.getAlignment");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":797
 *     The old pairsdb format used one-based coordinates.
 *     """
 *     def __init__(self, line ):             # <<<<<<<<<<<<<<
 *         PairsDBNeighbourRecord.__init__( self, line )
 *         self.query_start -= 1
 */

static int __pyx_pf_5cadda_31PairsDBNeighbourRecordOldFormat___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5cadda_31PairsDBNeighbourRecordOldFormat___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_line = 0;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__line,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__line);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_line = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_line = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.PairsDBNeighbourRecordOldFormat.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/software/pfam/python/adda/src/cadda.pyx":798
 *     """
 *     def __init__(self, line ):
 *         PairsDBNeighbourRecord.__init__( self, line )             # <<<<<<<<<<<<<<
 *         self.query_start -= 1
 *         self.sbjct_start -= 1
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)((PyObject*)__pyx_ptype_5cadda_PairsDBNeighbourRecord)), __pyx_n_s____init__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __Pyx_INCREF(__pyx_v_line);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_line);
  __Pyx_GIVEREF(__pyx_v_line);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":799
 *     def __init__(self, line ):
 *         PairsDBNeighbourRecord.__init__( self, line )
 *         self.query_start -= 1             # <<<<<<<<<<<<<<
 *         self.sbjct_start -= 1
 * 
 */
  ((struct __pyx_obj_5cadda_PairsDBNeighbourRecordOldFormat *)__pyx_v_self)->__pyx_base.query_start -= 1;

  /* "/software/pfam/python/adda/src/cadda.pyx":800
 *         PairsDBNeighbourRecord.__init__( self, line )
 *         self.query_start -= 1
 *         self.sbjct_start -= 1             # <<<<<<<<<<<<<<
 * 
 * cdef class NeighbourProxy:
 */
  ((struct __pyx_obj_5cadda_PairsDBNeighbourRecordOldFormat *)__pyx_v_self)->__pyx_base.sbjct_start -= 1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cadda.PairsDBNeighbourRecordOldFormat.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":807
 *     cdef Neighbour * neighbour
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.neighbour = <Neighbour*>calloc( sizeof( Neighbour ), 1 )
 *         init_neighbour( self.neighbour )
 */

static int __pyx_pf_5cadda_14NeighbourProxy___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5cadda_14NeighbourProxy___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "/software/pfam/python/adda/src/cadda.pyx":808
 * 
 *     def __init__(self):
 *         self.neighbour = <Neighbour*>calloc( sizeof( Neighbour ), 1 )             # <<<<<<<<<<<<<<
 *         init_neighbour( self.neighbour )
 * 
 */
  ((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_v_self)->neighbour = ((__pyx_t_5cadda_Neighbour *)calloc((sizeof(__pyx_t_5cadda_Neighbour)), 1));

  /* "/software/pfam/python/adda/src/cadda.pyx":809
 *     def __init__(self):
 *         self.neighbour = <Neighbour*>calloc( sizeof( Neighbour ), 1 )
 *         init_neighbour( self.neighbour )             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_f_5cadda_init_neighbour(((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_v_self)->neighbour);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":811
 *         init_neighbour( self.neighbour )
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.neighbour != NULL:
 *             destroy_neighbour( self.neighbour )
 */

static void __pyx_pf_5cadda_14NeighbourProxy___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5cadda_14NeighbourProxy___dealloc__(PyObject *__pyx_v_self) {
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__dealloc__");
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "/software/pfam/python/adda/src/cadda.pyx":812
 * 
 *     def __dealloc__(self):
 *         if self.neighbour != NULL:             # <<<<<<<<<<<<<<
 *             destroy_neighbour( self.neighbour )
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_v_self)->neighbour != NULL);
  if (__pyx_t_1) {

    /* "/software/pfam/python/adda/src/cadda.pyx":813
 *     def __dealloc__(self):
 *         if self.neighbour != NULL:
 *             destroy_neighbour( self.neighbour )             # <<<<<<<<<<<<<<
 * 
 * class PairsDBNeighbourIterator:
 */
    __pyx_t_2 = __pyx_f_5cadda_destroy_neighbour(((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_v_self)->neighbour); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cadda.NeighbourProxy.__dealloc__");
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
}

/* "/software/pfam/python/adda/src/cadda.pyx":825
 *     '''
 * 
 *     def __init__(self, infile, mapId2Nid, logger ):             # <<<<<<<<<<<<<<
 *         self.infile = infile
 *         self.mapId2Nid = mapId2Nid
 */

static PyObject *__pyx_pf_5cadda_24PairsDBNeighbourIterator___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5cadda_24PairsDBNeighbourIterator___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_5cadda_24PairsDBNeighbourIterator___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5cadda_24PairsDBNeighbourIterator___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_infile = 0;
  PyObject *__pyx_v_mapId2Nid = 0;
  PyObject *__pyx_v_logger = 0;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__infile,&__pyx_n_s__mapId2Nid,&__pyx_n_s__logger,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__infile);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__mapId2Nid);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__logger);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_infile = values[1];
    __pyx_v_mapId2Nid = values[2];
    __pyx_v_logger = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_infile = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_mapId2Nid = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_logger = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.PairsDBNeighbourIterator.__init__");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/software/pfam/python/adda/src/cadda.pyx":826
 * 
 *     def __init__(self, infile, mapId2Nid, logger ):
 *         self.infile = infile             # <<<<<<<<<<<<<<
 *         self.mapId2Nid = mapId2Nid
 *         self.record_factory = PairsDBNeighbourRecord
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__infile, __pyx_v_infile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/software/pfam/python/adda/src/cadda.pyx":827
 *     def __init__(self, infile, mapId2Nid, logger ):
 *         self.infile = infile
 *         self.mapId2Nid = mapId2Nid             # <<<<<<<<<<<<<<
 *         self.record_factory = PairsDBNeighbourRecord
 *         self.logger = logger
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__mapId2Nid, __pyx_v_mapId2Nid) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/software/pfam/python/adda/src/cadda.pyx":828
 *         self.infile = infile
 *         self.mapId2Nid = mapId2Nid
 *         self.record_factory = PairsDBNeighbourRecord             # <<<<<<<<<<<<<<
 *         self.logger = logger
 * 
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__record_factory, ((PyObject *)((PyObject*)__pyx_ptype_5cadda_PairsDBNeighbourRecord))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/software/pfam/python/adda/src/cadda.pyx":829
 *         self.mapId2Nid = mapId2Nid
 *         self.record_factory = PairsDBNeighbourRecord
 *         self.logger = logger             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__logger, __pyx_v_logger) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cadda.PairsDBNeighbourIterator.__init__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":831
 *         self.logger = logger
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

static PyObject *__pyx_pf_5cadda_24PairsDBNeighbourIterator___iter__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5cadda_24PairsDBNeighbourIterator___iter__ = {__Pyx_NAMESTR("__iter__"), (PyCFunction)__pyx_pf_5cadda_24PairsDBNeighbourIterator___iter__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5cadda_24PairsDBNeighbourIterator___iter__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__iter__");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":832
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def next(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":834
 *         return self
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef PairsDBNeighbourRecord r
 */

static PyObject *__pyx_pf_5cadda_24PairsDBNeighbourIterator_next(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5cadda_24PairsDBNeighbourIterator_next = {__Pyx_NAMESTR("next"), (PyCFunction)__pyx_pf_5cadda_24PairsDBNeighbourIterator_next, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5cadda_24PairsDBNeighbourIterator_next(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_5cadda_PairsDBNeighbourRecord *__pyx_v_r;
  Nid __pyx_v_sbjct_nid;
  Nid __pyx_v_query_nid;
  struct __pyx_obj_5cadda_NeighbourProxy *__pyx_v_p;
  PyObject *__pyx_v_line;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Nid __pyx_t_7;
  __Pyx_RefNannySetupContext("next");
  __pyx_self = __pyx_self;
  __Pyx_INCREF(__pyx_v_self);
  __pyx_v_r = ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_p = ((struct __pyx_obj_5cadda_NeighbourProxy *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_line = Py_None; __Pyx_INCREF(Py_None);

  /* "/software/pfam/python/adda/src/cadda.pyx":842
 *         cdef NeighbourProxy p
 * 
 *         while 1:             # <<<<<<<<<<<<<<
 *             line = self.infile.readline()
 *             if not line: raise StopIteration
 */
  while (1) {
    __pyx_t_1 = 1;
    if (!__pyx_t_1) break;

    /* "/software/pfam/python/adda/src/cadda.pyx":843
 * 
 *         while 1:
 *             line = self.infile.readline()             # <<<<<<<<<<<<<<
 *             if not line: raise StopIteration
 *             if line.startswith("#"): continue
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__infile); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__readline); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_line);
    __pyx_v_line = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "/software/pfam/python/adda/src/cadda.pyx":844
 *         while 1:
 *             line = self.infile.readline()
 *             if not line: raise StopIteration             # <<<<<<<<<<<<<<
 *             if line.startswith("#"): continue
 *             r = self.record_factory( line )
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_line); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (!__pyx_t_1);
    if (__pyx_t_4) {
      __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "/software/pfam/python/adda/src/cadda.pyx":845
 *             line = self.infile.readline()
 *             if not line: raise StopIteration
 *             if line.startswith("#"): continue             # <<<<<<<<<<<<<<
 *             r = self.record_factory( line )
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_line, __pyx_n_s__startswith); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_23));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_kp_s_23));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_23));
    __pyx_t_5 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
      goto __pyx_L5_continue;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "/software/pfam/python/adda/src/cadda.pyx":846
 *             if not line: raise StopIteration
 *             if line.startswith("#"): continue
 *             r = self.record_factory( line )             # <<<<<<<<<<<<<<
 * 
 *             # check for empty or overflowed alignments
 */
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__record_factory); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_line);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_line);
    __Pyx_GIVEREF(__pyx_v_line);
    __pyx_t_2 = PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5cadda_PairsDBNeighbourRecord))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_r));
    __pyx_v_r = ((struct __pyx_obj_5cadda_PairsDBNeighbourRecord *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "/software/pfam/python/adda/src/cadda.pyx":849
 * 
 *             # check for empty or overflowed alignments
 *             if r.query_start >= r.query_end or \             # <<<<<<<<<<<<<<
 *                     r.sbjct_start >= r.sbjct_end:
 *                 self.logger.warn("ignoring invalid alignment: %s" % str(r))
 */
    __pyx_t_4 = (__pyx_v_r->query_start >= __pyx_v_r->query_end);
    if (!__pyx_t_4) {

      /* "/software/pfam/python/adda/src/cadda.pyx":850
 *             # check for empty or overflowed alignments
 *             if r.query_start >= r.query_end or \
 *                     r.sbjct_start >= r.sbjct_end:             # <<<<<<<<<<<<<<
 *                 self.logger.warn("ignoring invalid alignment: %s" % str(r))
 *                 continue
 */
      __pyx_t_1 = (__pyx_v_r->sbjct_start >= __pyx_v_r->sbjct_end);
      __pyx_t_6 = __pyx_t_1;
    } else {
      __pyx_t_6 = __pyx_t_4;
    }
    if (__pyx_t_6) {

      /* "/software/pfam/python/adda/src/cadda.pyx":851
 *             if r.query_start >= r.query_end or \
 *                     r.sbjct_start >= r.sbjct_end:
 *                 self.logger.warn("ignoring invalid alignment: %s" % str(r))             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__logger); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__warn); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_r));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_r));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_r));
      __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_24), __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "/software/pfam/python/adda/src/cadda.pyx":852
 *                     r.sbjct_start >= r.sbjct_end:
 *                 self.logger.warn("ignoring invalid alignment: %s" % str(r))
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             if r.query_token not in self.mapId2Nid or \
 */
      goto __pyx_L5_continue;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "/software/pfam/python/adda/src/cadda.pyx":854
 *                 continue
 * 
 *             if r.query_token not in self.mapId2Nid or \             # <<<<<<<<<<<<<<
 *                     r.sbjct_token not in self.mapId2Nid:
 *                 continue
 */
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_r->query_token); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mapId2Nid); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = (__Pyx_NegateNonNeg(PySequence_Contains(__pyx_t_5, ((PyObject *)__pyx_t_2)))); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_6) {

      /* "/software/pfam/python/adda/src/cadda.pyx":855
 * 
 *             if r.query_token not in self.mapId2Nid or \
 *                     r.sbjct_token not in self.mapId2Nid:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_r->sbjct_token); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mapId2Nid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = (__Pyx_NegateNonNeg(PySequence_Contains(__pyx_t_2, ((PyObject *)__pyx_t_5)))); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_1 = __pyx_t_4;
    } else {
      __pyx_t_1 = __pyx_t_6;
    }
    if (__pyx_t_1) {

      /* "/software/pfam/python/adda/src/cadda.pyx":856
 *             if r.query_token not in self.mapId2Nid or \
 *                     r.sbjct_token not in self.mapId2Nid:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             query_nid = self.mapId2Nid[r.query_token]
 */
      goto __pyx_L5_continue;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "/software/pfam/python/adda/src/cadda.pyx":858
 *                 continue
 * 
 *             query_nid = self.mapId2Nid[r.query_token]             # <<<<<<<<<<<<<<
 *             sbjct_nid = self.mapId2Nid[r.sbjct_token]
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mapId2Nid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_r->query_token); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __pyx_t_3 = PyObject_GetItem(__pyx_t_2, ((PyObject *)__pyx_t_5)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyInt_from_py_Nid(__pyx_t_3); if (unlikely((__pyx_t_7 == (Nid)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_query_nid = __pyx_t_7;

    /* "/software/pfam/python/adda/src/cadda.pyx":859
 * 
 *             query_nid = self.mapId2Nid[r.query_token]
 *             sbjct_nid = self.mapId2Nid[r.sbjct_token]             # <<<<<<<<<<<<<<
 * 
 *             p = NeighbourProxy()
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__mapId2Nid); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_r->sbjct_token); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __pyx_t_2 = PyObject_GetItem(__pyx_t_3, ((PyObject *)__pyx_t_5)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyInt_from_py_Nid(__pyx_t_2); if (unlikely((__pyx_t_7 == (Nid)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_sbjct_nid = __pyx_t_7;

    /* "/software/pfam/python/adda/src/cadda.pyx":861
 *             sbjct_nid = self.mapId2Nid[r.sbjct_token]
 * 
 *             p = NeighbourProxy()             # <<<<<<<<<<<<<<
 *             p.query_nid = query_nid
 * 
 */
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5cadda_NeighbourProxy)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_v_p));
    __pyx_v_p = ((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "/software/pfam/python/adda/src/cadda.pyx":862
 * 
 *             p = NeighbourProxy()
 *             p.query_nid = query_nid             # <<<<<<<<<<<<<<
 * 
 *             fromPairsDBNeighbour( p.neighbour, sbjct_nid, r )
 */
    __pyx_v_p->query_nid = __pyx_v_query_nid;

    /* "/software/pfam/python/adda/src/cadda.pyx":864
 *             p.query_nid = query_nid
 * 
 *             fromPairsDBNeighbour( p.neighbour, sbjct_nid, r )             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
    __pyx_t_2 = __pyx_f_5cadda_fromPairsDBNeighbour(__pyx_v_p->neighbour, __pyx_v_sbjct_nid, __pyx_v_r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "/software/pfam/python/adda/src/cadda.pyx":865
 * 
 *             fromPairsDBNeighbour( p.neighbour, sbjct_nid, r )
 *             return p             # <<<<<<<<<<<<<<
 * 
 *         raise StopIteration
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_p));
    __pyx_r = ((PyObject *)__pyx_v_p);
    goto __pyx_L0;
    __pyx_L5_continue:;
  }

  /* "/software/pfam/python/adda/src/cadda.pyx":867
 *             return p
 * 
 *         raise StopIteration             # <<<<<<<<<<<<<<
 * 
 * class PairsDBNeighbourIteratorOldFormat(PairsDBNeighbourIterator):
 */
  __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0);
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cadda.PairsDBNeighbourIterator.next");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_r);
  __Pyx_DECREF((PyObject *)__pyx_v_p);
  __Pyx_DECREF(__pyx_v_line);
  __Pyx_DECREF(__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":870
 * 
 * class PairsDBNeighbourIteratorOldFormat(PairsDBNeighbourIterator):
 *     def __init__(self, *args, **kwargs ):             # <<<<<<<<<<<<<<
 *         PairsDBNeighbourIterator.__init__( self, *args, **kwargs )
 *         self.record_factory = PairsDBNeighbourRecordOldFormat
 */

static PyObject *__pyx_pf_5cadda_33PairsDBNeighbourIteratorOldFormat___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5cadda_33PairsDBNeighbourIteratorOldFormat___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_5cadda_33PairsDBNeighbourIteratorOldFormat___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5cadda_33PairsDBNeighbourIteratorOldFormat___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_AddTraceback("cadda.PairsDBNeighbourIteratorOldFormat.__init__");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/software/pfam/python/adda/src/cadda.pyx":871
 * class PairsDBNeighbourIteratorOldFormat(PairsDBNeighbourIterator):
 *     def __init__(self, *args, **kwargs ):
 *         PairsDBNeighbourIterator.__init__( self, *args, **kwargs )             # <<<<<<<<<<<<<<
 *         self.record_factory = PairsDBNeighbourRecordOldFormat
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_25); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s____init__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_3 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":872
 *     def __init__(self, *args, **kwargs ):
 *         PairsDBNeighbourIterator.__init__( self, *args, **kwargs )
 *         self.record_factory = PairsDBNeighbourRecordOldFormat             # <<<<<<<<<<<<<<
 * 
 * class PairsDBNeighboursRecord:
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__record_factory, ((PyObject *)((PyObject*)__pyx_ptype_5cadda_PairsDBNeighbourRecordOldFormat))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cadda.PairsDBNeighbourIteratorOldFormat.__init__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":875
 * 
 * class PairsDBNeighboursRecord:
 *     def __init__(self, Nid nid, matches):             # <<<<<<<<<<<<<<
 *         self.query_nid = nid
 *         self.matches = matches
 */

static PyObject *__pyx_pf_5cadda_23PairsDBNeighboursRecord___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5cadda_23PairsDBNeighboursRecord___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_5cadda_23PairsDBNeighboursRecord___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5cadda_23PairsDBNeighboursRecord___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  Nid __pyx_v_nid;
  PyObject *__pyx_v_matches = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__nid,&__pyx_n_s__matches,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__matches);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_nid = __Pyx_PyInt_from_py_Nid(values[1]); if (unlikely((__pyx_v_nid == (Nid)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_matches = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nid = __Pyx_PyInt_from_py_Nid(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_nid == (Nid)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_matches = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.PairsDBNeighboursRecord.__init__");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/software/pfam/python/adda/src/cadda.pyx":876
 * class PairsDBNeighboursRecord:
 *     def __init__(self, Nid nid, matches):
 *         self.query_nid = nid             # <<<<<<<<<<<<<<
 *         self.matches = matches
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_Nid(__pyx_v_nid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__query_nid, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":877
 *     def __init__(self, Nid nid, matches):
 *         self.query_nid = nid
 *         self.matches = matches             # <<<<<<<<<<<<<<
 * 
 * class PairsDBNeighboursIterator:
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__matches, __pyx_v_matches) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cadda.PairsDBNeighboursRecord.__init__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":881
 * class PairsDBNeighboursIterator:
 * 
 *     def __init__(self, iterator, logger ):             # <<<<<<<<<<<<<<
 *         """
 *         f: the input file object.
 */

static PyObject *__pyx_pf_5cadda_25PairsDBNeighboursIterator___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5cadda_25PairsDBNeighboursIterator___init__[] = "\n        f: the input file object.\n        tokens: a collection of tokens to filter with.\n        ";
static PyMethodDef __pyx_mdef_5cadda_25PairsDBNeighboursIterator___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_5cadda_25PairsDBNeighboursIterator___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5cadda_25PairsDBNeighboursIterator___init__)};
static PyObject *__pyx_pf_5cadda_25PairsDBNeighboursIterator___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_iterator = 0;
  PyObject *__pyx_v_logger = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__iterator,&__pyx_n_s__logger,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__iterator);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__logger);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_iterator = values[1];
    __pyx_v_logger = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_iterator = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_logger = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("cadda.PairsDBNeighboursIterator.__init__");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/software/pfam/python/adda/src/cadda.pyx":887
 *         """
 * 
 *         self.iterator = iterator             # <<<<<<<<<<<<<<
 *         self.last = self.iterator.next()
 *         self.logger = logger
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__iterator, __pyx_v_iterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/software/pfam/python/adda/src/cadda.pyx":888
 * 
 *         self.iterator = iterator
 *         self.last = self.iterator.next()             # <<<<<<<<<<<<<<
 *         self.logger = logger
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__iterator); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__next); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__last, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":889
 *         self.iterator = iterator
 *         self.last = self.iterator.next()
 *         self.logger = logger             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__logger, __pyx_v_logger) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cadda.PairsDBNeighboursIterator.__init__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":891
 *         self.logger = logger
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

static PyObject *__pyx_pf_5cadda_25PairsDBNeighboursIterator___iter__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5cadda_25PairsDBNeighboursIterator___iter__ = {__Pyx_NAMESTR("__iter__"), (PyCFunction)__pyx_pf_5cadda_25PairsDBNeighboursIterator___iter__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5cadda_25PairsDBNeighboursIterator___iter__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__iter__");
  __pyx_self = __pyx_self;

  /* "/software/pfam/python/adda/src/cadda.pyx":892
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def next(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/software/pfam/python/adda/src/cadda.pyx":894
 *         return self
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef NeighbourProxy r
 */

static PyObject *__pyx_pf_5cadda_25PairsDBNeighboursIterator_next(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5cadda_25PairsDBNeighboursIterator_next = {__Pyx_NAMESTR("next"), (PyCFunction)__pyx_pf_5cadda_25PairsDBNeighboursIterator_next, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5cadda_25PairsDBNeighboursIterator_next(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_5cadda_NeighbourProxy *__pyx_v_r;
  Nid __pyx_v_query_nid;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("next");
  __pyx_self = __pyx_self;
  __Pyx_INCREF(__pyx_v_self);
  __pyx_v_r = ((struct __pyx_obj_5cadda_NeighbourProxy *)Py_None); __Pyx_INCREF(Py_None);

  /* "/software/pfam/python/adda/src/cadda.pyx":899
 *         cdef Nid query_nid
 * 
 *         if self.last == None: raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *         self.matches = [self.last]
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__last); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, Py_None, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/software/pfam/python/adda/src/cadda.pyx":901
 *         if self.last == None: raise StopIteration
 * 
 *         self.matches = [self.last]             # <<<<<<<<<<<<<<
 *         r = <NeighbourProxy>self.last
 *         query_nid = r.query_nid
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__last); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__matches, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":902
 * 
 *         self.matches = [self.last]
 *         r = <NeighbourProxy>self.last             # <<<<<<<<<<<<<<
 *         query_nid = r.query_nid
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__last); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_t_1)));
  __Pyx_DECREF(((PyObject *)__pyx_v_r));
  __pyx_v_r = ((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":903
 *         self.matches = [self.last]
 *         r = <NeighbourProxy>self.last
 *         query_nid = r.query_nid             # <<<<<<<<<<<<<<
 * 
 *         while 1:
 */
  __pyx_v_query_nid = __pyx_v_r->query_nid;

  /* "/software/pfam/python/adda/src/cadda.pyx":905
 *         query_nid = r.query_nid
 * 
 *         while 1:             # <<<<<<<<<<<<<<
 *             try:
 *                 r = self.iterator.next()
 */
  while (1) {
    __pyx_t_3 = 1;
    if (!__pyx_t_3) break;

    /* "/software/pfam/python/adda/src/cadda.pyx":906
 * 
 *         while 1:
 *             try:             # <<<<<<<<<<<<<<
 *                 r = self.iterator.next()
 *             except StopIteration:
 */
    {
      PyObject *__pyx_save_exc_type, *__pyx_save_exc_value, *__pyx_save_exc_tb;
      __Pyx_ExceptionSave(&__pyx_save_exc_type, &__pyx_save_exc_value, &__pyx_save_exc_tb);
      __Pyx_XGOTREF(__pyx_save_exc_type);
      __Pyx_XGOTREF(__pyx_save_exc_value);
      __Pyx_XGOTREF(__pyx_save_exc_tb);
      /*try:*/ {

        /* "/software/pfam/python/adda/src/cadda.pyx":907
 *         while 1:
 *             try:
 *                 r = self.iterator.next()             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 self.last = None
 */
        __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__iterator); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__next); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5cadda_NeighbourProxy))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
        __Pyx_DECREF(((PyObject *)__pyx_v_r));
        __pyx_v_r = ((struct __pyx_obj_5cadda_NeighbourProxy *)__pyx_t_1);
        __pyx_t_1 = 0;
      }
      __Pyx_XDECREF(__pyx_save_exc_type); __pyx_save_exc_type = 0;
      __Pyx_XDECREF(__pyx_save_exc_value); __pyx_save_exc_value = 0;
      __Pyx_XDECREF(__pyx_save_exc_tb); __pyx_save_exc_tb = 0;
      goto __pyx_L15_try_end;
      __pyx_L8_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "/software/pfam/python/adda/src/cadda.pyx":908
 *             try:
 *                 r = self.iterator.next()
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 self.last = None
 *                 return PairsDBNeighboursRecord( query_nid, self.matches )
 */
      __pyx_t_4 = PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_4) {
        __Pyx_AddTraceback("cadda.PairsDBNeighboursIterator.next");
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_5);

        /* "/software/pfam/python/adda/src/cadda.pyx":909
 *                 r = self.iterator.next()
 *             except StopIteration:
 *                 self.last = None             # <<<<<<<<<<<<<<
 *                 return PairsDBNeighboursRecord( query_nid, self.matches )
 * 
 */
        if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__last, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}

        /* "/software/pfam/python/adda/src/cadda.pyx":910
 *             except StopIteration:
 *                 self.last = None
 *                 return PairsDBNeighboursRecord( query_nid, self.matches )             # <<<<<<<<<<<<<<
 * 
 *             self.last = r
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s_26); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_to_py_Nid(__pyx_v_query_nid); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__matches); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_8 = PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L11_except_return;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L9_exception_handled;
      }
      __pyx_L10_except_error:;
      __Pyx_XGIVEREF(__pyx_save_exc_type);
      __Pyx_XGIVEREF(__pyx_save_exc_value);
      __Pyx_XGIVEREF(__pyx_save_exc_tb);
      __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
      goto __pyx_L1_error;
      __pyx_L11_except_return:;
      __Pyx_XGIVEREF(__pyx_save_exc_type);
      __Pyx_XGIVEREF(__pyx_save_exc_value);
      __Pyx_XGIVEREF(__pyx_save_exc_tb);
      __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
      goto __pyx_L0;
      __pyx_L9_exception_handled:;
      __Pyx_XGIVEREF(__pyx_save_exc_type);
      __Pyx_XGIVEREF(__pyx_save_exc_value);
      __Pyx_XGIVEREF(__pyx_save_exc_tb);
      __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
      __pyx_L15_try_end:;
    }

    /* "/software/pfam/python/adda/src/cadda.pyx":912
 *                 return PairsDBNeighboursRecord( query_nid, self.matches )
 * 
 *             self.last = r             # <<<<<<<<<<<<<<
 * 
 *             if r.query_nid != query_nid:
 */
    if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__last, ((PyObject *)__pyx_v_r)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "/software/pfam/python/adda/src/cadda.pyx":914
 *             self.last = r
 * 
 *             if r.query_nid != query_nid:             # <<<<<<<<<<<<<<
 *                 return PairsDBNeighboursRecord( query_nid, self.matches )
 * 
 */
    __pyx_t_3 = (__pyx_v_r->query_nid != __pyx_v_query_nid);
    if (__pyx_t_3) {

      /* "/software/pfam/python/adda/src/cadda.pyx":915
 * 
 *             if r.query_nid != query_nid:
 *                 return PairsDBNeighboursRecord( query_nid, self.matches )             # <<<<<<<<<<<<<<
 * 
 *             self.matches.append( r )
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s_26); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyInt_to_py_Nid(__pyx_v_query_nid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__matches); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
      goto __pyx_L18;
    }
    __pyx_L18:;

    /* "/software/pfam/python/adda/src/cadda.pyx":917
 *                 return PairsDBNeighboursRecord( query_nid, self.matches )
 * 
 *             self.matches.append( r )             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__matches); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_1, ((PyObject *)__pyx_v_r)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cadda.PairsDBNeighboursIterator.next");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_r);
  __Pyx_DECREF(__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5cadda_PairsDBNeighbourRecord(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_5cadda_PairsDBNeighbourRecord(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5cadda_22PairsDBNeighbourRecord___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static struct PyMethodDef __pyx_methods_5cadda_PairsDBNeighbourRecord[] = {
  {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pf_5cadda_22PairsDBNeighbourRecord___str__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getAlignment"), (PyCFunction)__pyx_pf_5cadda_22PairsDBNeighbourRecord_getAlignment, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5cadda_22PairsDBNeighbourRecord_getAlignment)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PairsDBNeighbourRecord = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PairsDBNeighbourRecord = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PairsDBNeighbourRecord = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PairsDBNeighbourRecord = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_5cadda_PairsDBNeighbourRecord = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cadda.PairsDBNeighbourRecord"), /*tp_name*/
  sizeof(struct __pyx_obj_5cadda_PairsDBNeighbourRecord), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5cadda_PairsDBNeighbourRecord, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_PairsDBNeighbourRecord, /*tp_as_number*/
  &__pyx_tp_as_sequence_PairsDBNeighbourRecord, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PairsDBNeighbourRecord, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_5cadda_22PairsDBNeighbourRecord___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PairsDBNeighbourRecord, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  __Pyx_DOCSTR("a pairwise alignment.\n\n    The alignment is parsed from the input line.\n\n    The input format is tab-separated columns:\n\n    ``query_token`` the query\n    ``sbjct_token`` the sbjct\n    ``evalue`` : the E-Value\n    ``query_from``: the first aligned residue in query\n    ``query_to``: the last aligned residue + 1 in query\n    ``query_ali``: the aligned query in compressed form\n    ``sbjct_from``: the first aligned residue in sbjct\n    ``sbjct_to``: the last aligned residue + 1 in sbjct\n    ``sbjct_ali``: the aligned sbjct in compressed form\n\n    Additional columns are ignored.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5cadda_PairsDBNeighbourRecord, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_5cadda_22PairsDBNeighbourRecord___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5cadda_PairsDBNeighbourRecord, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5cadda_IndexedNeighbours(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_5cadda_IndexedNeighbours(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static struct PyMethodDef __pyx_methods_5cadda_IndexedNeighbours[] = {
  {__Pyx_NAMESTR("getNeighbours"), (PyCFunction)__pyx_pf_5cadda_17IndexedNeighbours_getNeighbours, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_17IndexedNeighbours_getNeighbours)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_IndexedNeighbours = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_IndexedNeighbours = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_IndexedNeighbours = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_IndexedNeighbours = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_5cadda_IndexedNeighbours = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cadda.IndexedNeighbours"), /*tp_name*/
  sizeof(struct __pyx_obj_5cadda_IndexedNeighbours), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5cadda_IndexedNeighbours, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_IndexedNeighbours, /*tp_as_number*/
  &__pyx_tp_as_sequence_IndexedNeighbours, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_IndexedNeighbours, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_IndexedNeighbours, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  __Pyx_DOCSTR("access to indexed ADDA graph."), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5cadda_IndexedNeighbours, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_5cadda_17IndexedNeighbours___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5cadda_IndexedNeighbours, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5cadda_PairsDBNeighbourRecordOldFormat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5cadda_PairsDBNeighbourRecord(t, a, k);
  if (!o) return 0;
  return o;
}

static struct PyMethodDef __pyx_methods_5cadda_PairsDBNeighbourRecordOldFormat[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PairsDBNeighbourRecordOldFormat = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PairsDBNeighbourRecordOldFormat = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PairsDBNeighbourRecordOldFormat = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PairsDBNeighbourRecordOldFormat = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_5cadda_PairsDBNeighbourRecordOldFormat = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cadda.PairsDBNeighbourRecordOldFormat"), /*tp_name*/
  sizeof(struct __pyx_obj_5cadda_PairsDBNeighbourRecordOldFormat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5cadda_PairsDBNeighbourRecord, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_PairsDBNeighbourRecordOldFormat, /*tp_as_number*/
  &__pyx_tp_as_sequence_PairsDBNeighbourRecordOldFormat, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PairsDBNeighbourRecordOldFormat, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PairsDBNeighbourRecordOldFormat, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  __Pyx_DOCSTR("a pairwise alignment in old pairsdb format.\n\n    The old pairsdb format used one-based coordinates.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5cadda_PairsDBNeighbourRecordOldFormat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_5cadda_31PairsDBNeighbourRecordOldFormat___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5cadda_PairsDBNeighbourRecordOldFormat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5cadda_NeighbourProxy(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_5cadda_NeighbourProxy(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5cadda_14NeighbourProxy___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static struct PyMethodDef __pyx_methods_5cadda_NeighbourProxy[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_NeighbourProxy = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_NeighbourProxy = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_NeighbourProxy = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_NeighbourProxy = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_5cadda_NeighbourProxy = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("cadda.NeighbourProxy"), /*tp_name*/
  sizeof(struct __pyx_obj_5cadda_NeighbourProxy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5cadda_NeighbourProxy, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_NeighbourProxy, /*tp_as_number*/
  &__pyx_tp_as_sequence_NeighbourProxy, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_NeighbourProxy, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_NeighbourProxy, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  __Pyx_DOCSTR("wrapper for passing around a neighbour."), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5cadda_NeighbourProxy, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_5cadda_14NeighbourProxy___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5cadda_NeighbourProxy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static struct PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("optimise_iteration"), (PyCFunction)__pyx_pf_5cadda_optimise_iteration, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("optimise_initialise"), (PyCFunction)__pyx_pf_5cadda_optimise_initialise, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("optimise_destroy"), (PyCFunction)__pyx_pf_5cadda_optimise_destroy, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("optimise_get_num_partitions"), (PyCFunction)__pyx_pf_5cadda_optimise_get_num_partitions, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("optimise_load_partitions"), (PyCFunction)__pyx_pf_5cadda_optimise_load_partitions, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("optimise_save_partitions"), (PyCFunction)__pyx_pf_5cadda_optimise_save_partitions, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("convert"), (PyCFunction)__pyx_pf_5cadda_convert, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("build_mst"), (PyCFunction)__pyx_pf_5cadda_build_mst, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("build_index"), (PyCFunction)__pyx_pf_5cadda_build_index, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("check_index"), (PyCFunction)__pyx_pf_5cadda_check_index, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dump_parameters"), (PyCFunction)__pyx_pf_5cadda_dump_parameters, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setFilenameSegments"), (PyCFunction)__pyx_pf_5cadda_setFilenameSegments, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setFilenameSegments)},
  {__Pyx_NAMESTR("setFilenameGraph"), (PyCFunction)__pyx_pf_5cadda_setFilenameGraph, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setFilenameGraph)},
  {__Pyx_NAMESTR("setFilenameIndex"), (PyCFunction)__pyx_pf_5cadda_setFilenameIndex, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setFilenameIndex)},
  {__Pyx_NAMESTR("setFilenameMst"), (PyCFunction)__pyx_pf_5cadda_setFilenameMst, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setFilenameMst)},
  {__Pyx_NAMESTR("setFilenameNids"), (PyCFunction)__pyx_pf_5cadda_setFilenameNids, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setFilenameNids)},
  {__Pyx_NAMESTR("setFilenameDomains"), (PyCFunction)__pyx_pf_5cadda_setFilenameDomains, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setFilenameDomains)},
  {__Pyx_NAMESTR("setFilenameDomainGraph"), (PyCFunction)__pyx_pf_5cadda_setFilenameDomainGraph, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setFilenameDomainGraph)},
  {__Pyx_NAMESTR("setFilenameTransfers"), (PyCFunction)__pyx_pf_5cadda_setFilenameTransfers, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setFilenameTransfers)},
  {__Pyx_NAMESTR("setLogLevel"), (PyCFunction)__pyx_pf_5cadda_setLogLevel, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setLogLevel)},
  {__Pyx_NAMESTR("setSigmoidK"), (PyCFunction)__pyx_pf_5cadda_setSigmoidK, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setSigmoidK)},
  {__Pyx_NAMESTR("setSigmoidC"), (PyCFunction)__pyx_pf_5cadda_setSigmoidC, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setSigmoidC)},
  {__Pyx_NAMESTR("setSigmoidMax"), (PyCFunction)__pyx_pf_5cadda_setSigmoidMax, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setSigmoidMax)},
  {__Pyx_NAMESTR("setSigmoidMin"), (PyCFunction)__pyx_pf_5cadda_setSigmoidMin, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setSigmoidMin)},
  {__Pyx_NAMESTR("setExponentialE"), (PyCFunction)__pyx_pf_5cadda_setExponentialE, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setExponentialE)},
  {__Pyx_NAMESTR("setExponentialF"), (PyCFunction)__pyx_pf_5cadda_setExponentialF, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setExponentialF)},
  {__Pyx_NAMESTR("setRelativeOverhang"), (PyCFunction)__pyx_pf_5cadda_setRelativeOverhang, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setRelativeOverhang)},
  {__Pyx_NAMESTR("setOnlyQuery"), (PyCFunction)__pyx_pf_5cadda_setOnlyQuery, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setOnlyQuery)},
  {__Pyx_NAMESTR("setResolution"), (PyCFunction)__pyx_pf_5cadda_setResolution, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setResolution)},
  {__Pyx_NAMESTR("setDescend"), (PyCFunction)__pyx_pf_5cadda_setDescend, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setDescend)},
  {__Pyx_NAMESTR("setDisallowShortening"), (PyCFunction)__pyx_pf_5cadda_setDisallowShortening, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setDisallowShortening)},
  {__Pyx_NAMESTR("setMaxIterations"), (PyCFunction)__pyx_pf_5cadda_setMaxIterations, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setMaxIterations)},
  {__Pyx_NAMESTR("setReportStep"), (PyCFunction)__pyx_pf_5cadda_setReportStep, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setReportStep)},
  {__Pyx_NAMESTR("setEvalueThresholdTrustedLinks"), (PyCFunction)__pyx_pf_5cadda_setEvalueThresholdTrustedLinks, METH_O, __Pyx_DOCSTR(__pyx_doc_5cadda_setEvalueThresholdTrustedLinks)},
  {__Pyx_NAMESTR("indexGraph"), (PyCFunction)__pyx_pf_5cadda_indexGraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5cadda_indexGraph)},
  {__Pyx_NAMESTR("reindexGraph"), (PyCFunction)__pyx_pf_5cadda_reindexGraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5cadda_reindexGraph)},
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("cadda"),
    __Pyx_DOCSTR(__pyx_k_27), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_n_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 1},
  {&__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_kp_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 0},
  {&__pyx_kp_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 0},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 0},
  {&__pyx_kp_s_24, __pyx_k_24, sizeof(__pyx_k_24), 0, 0, 1, 0},
  {&__pyx_n_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 1},
  {&__pyx_n_s_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 0, 1, 1},
  {&__pyx_kp_s_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 1, 0},
  {&__pyx_n_s_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 0, 1, 1},
  {&__pyx_n_s_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 0, 1, 1},
  {&__pyx_kp_u_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 1, 0, 0},
  {&__pyx_kp_u_32, __pyx_k_32, sizeof(__pyx_k_32), 0, 1, 0, 0},
  {&__pyx_kp_u_33, __pyx_k_33, sizeof(__pyx_k_33), 0, 1, 0, 0},
  {&__pyx_kp_u_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 1, 0, 0},
  {&__pyx_kp_u_35, __pyx_k_35, sizeof(__pyx_k_35), 0, 1, 0, 0},
  {&__pyx_kp_u_36, __pyx_k_36, sizeof(__pyx_k_36), 0, 1, 0, 0},
  {&__pyx_kp_u_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 1, 0, 0},
  {&__pyx_n_s_38, __pyx_k_38, sizeof(__pyx_k_38), 0, 0, 1, 1},
  {&__pyx_kp_u_39, __pyx_k_39, sizeof(__pyx_k_39), 0, 1, 0, 0},
  {&__pyx_n_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 1},
  {&__pyx_n_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 1},
  {&__pyx_kp_u_41, __pyx_k_41, sizeof(__pyx_k_41), 0, 1, 0, 0},
  {&__pyx_kp_u_42, __pyx_k_42, sizeof(__pyx_k_42), 0, 1, 0, 0},
  {&__pyx_kp_u_43, __pyx_k_43, sizeof(__pyx_k_43), 0, 1, 0, 0},
  {&__pyx_kp_u_44, __pyx_k_44, sizeof(__pyx_k_44), 0, 1, 0, 0},
  {&__pyx_kp_u_45, __pyx_k_45, sizeof(__pyx_k_45), 0, 1, 0, 0},
  {&__pyx_kp_u_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 1, 0, 0},
  {&__pyx_kp_u_47, __pyx_k_47, sizeof(__pyx_k_47), 0, 1, 0, 0},
  {&__pyx_kp_u_48, __pyx_k_48, sizeof(__pyx_k_48), 0, 1, 0, 0},
  {&__pyx_kp_u_49, __pyx_k_49, sizeof(__pyx_k_49), 0, 1, 0, 0},
  {&__pyx_n_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 1},
  {&__pyx_kp_u_50, __pyx_k_50, sizeof(__pyx_k_50), 0, 1, 0, 0},
  {&__pyx_kp_u_51, __pyx_k_51, sizeof(__pyx_k_51), 0, 1, 0, 0},
  {&__pyx_kp_u_52, __pyx_k_52, sizeof(__pyx_k_52), 0, 1, 0, 0},
  {&__pyx_n_s_53, __pyx_k_53, sizeof(__pyx_k_53), 0, 0, 1, 1},
  {&__pyx_kp_u_54, __pyx_k_54, sizeof(__pyx_k_54), 0, 1, 0, 0},
  {&__pyx_kp_u_55, __pyx_k_55, sizeof(__pyx_k_55), 0, 1, 0, 0},
  {&__pyx_kp_u_56, __pyx_k_56, sizeof(__pyx_k_56), 0, 1, 0, 0},
  {&__pyx_n_s_57, __pyx_k_57, sizeof(__pyx_k_57), 0, 0, 1, 1},
  {&__pyx_kp_u_58, __pyx_k_58, sizeof(__pyx_k_58), 0, 1, 0, 0},
  {&__pyx_kp_u_59, __pyx_k_59, sizeof(__pyx_k_59), 0, 1, 0, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_u_60, __pyx_k_60, sizeof(__pyx_k_60), 0, 1, 0, 0},
  {&__pyx_kp_u_61, __pyx_k_61, sizeof(__pyx_k_61), 0, 1, 0, 0},
  {&__pyx_kp_u_62, __pyx_k_62, sizeof(__pyx_k_62), 0, 1, 0, 0},
  {&__pyx_n_s_63, __pyx_k_63, sizeof(__pyx_k_63), 0, 0, 1, 1},
  {&__pyx_kp_u_64, __pyx_k_64, sizeof(__pyx_k_64), 0, 1, 0, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__IndexedNeighbours, __pyx_k__IndexedNeighbours, sizeof(__pyx_k__IndexedNeighbours), 0, 0, 1, 1},
  {&__pyx_n_s__MemoryError, __pyx_k__MemoryError, sizeof(__pyx_k__MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s__NeighbourRecord, __pyx_k__NeighbourRecord, sizeof(__pyx_k__NeighbourRecord), 0, 0, 1, 1},
  {&__pyx_n_s__OSError, __pyx_k__OSError, sizeof(__pyx_k__OSError), 0, 0, 1, 1},
  {&__pyx_n_s__StopIteration, __pyx_k__StopIteration, sizeof(__pyx_k__StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____init__, __pyx_k____init__, sizeof(__pyx_k____init__), 0, 0, 1, 1},
  {&__pyx_n_s____iter__, __pyx_k____iter__, sizeof(__pyx_k____iter__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____str__, __pyx_k____str__, sizeof(__pyx_k____str__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__alignlib, __pyx_k__alignlib, sizeof(__pyx_k__alignlib), 0, 0, 1, 1},
  {&__pyx_n_s__copy, __pyx_k__copy, sizeof(__pyx_k__copy), 0, 0, 1, 1},
  {&__pyx_n_s__evalue, __pyx_k__evalue, sizeof(__pyx_k__evalue), 0, 0, 1, 1},
  {&__pyx_n_s__filename_graph, __pyx_k__filename_graph, sizeof(__pyx_k__filename_graph), 0, 0, 1, 1},
  {&__pyx_n_s__filename_index, __pyx_k__filename_index, sizeof(__pyx_k__filename_index), 0, 0, 1, 1},
  {&__pyx_n_s__getAlignment, __pyx_k__getAlignment, sizeof(__pyx_k__getAlignment), 0, 0, 1, 1},
  {&__pyx_n_s__getNeighbours, __pyx_k__getNeighbours, sizeof(__pyx_k__getNeighbours), 0, 0, 1, 1},
  {&__pyx_n_s__graph_iterator, __pyx_k__graph_iterator, sizeof(__pyx_k__graph_iterator), 0, 0, 1, 1},
  {&__pyx_n_s__in_filename, __pyx_k__in_filename, sizeof(__pyx_k__in_filename), 0, 0, 1, 1},
  {&__pyx_n_s__indexGraph, __pyx_k__indexGraph, sizeof(__pyx_k__indexGraph), 0, 0, 1, 1},
  {&__pyx_n_s__infile, __pyx_k__infile, sizeof(__pyx_k__infile), 0, 0, 1, 1},
  {&__pyx_n_s__info, __pyx_k__info, sizeof(__pyx_k__info), 0, 0, 1, 1},
  {&__pyx_n_s__iterator, __pyx_k__iterator, sizeof(__pyx_k__iterator), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__last, __pyx_k__last, sizeof(__pyx_k__last), 0, 0, 1, 1},
  {&__pyx_n_s__line, __pyx_k__line, sizeof(__pyx_k__line), 0, 0, 1, 1},
  {&__pyx_n_s__logger, __pyx_k__logger, sizeof(__pyx_k__logger), 0, 0, 1, 1},
  {&__pyx_n_s__mColAlignment, __pyx_k__mColAlignment, sizeof(__pyx_k__mColAlignment), 0, 0, 1, 1},
  {&__pyx_n_s__mColFrom, __pyx_k__mColFrom, sizeof(__pyx_k__mColFrom), 0, 0, 1, 1},
  {&__pyx_n_s__mColTo, __pyx_k__mColTo, sizeof(__pyx_k__mColTo), 0, 0, 1, 1},
  {&__pyx_n_s__mEvalue, __pyx_k__mEvalue, sizeof(__pyx_k__mEvalue), 0, 0, 1, 1},
  {&__pyx_n_s__mFile, __pyx_k__mFile, sizeof(__pyx_k__mFile), 0, 0, 1, 1},
  {&__pyx_n_s__mIndex, __pyx_k__mIndex, sizeof(__pyx_k__mIndex), 0, 0, 1, 1},
  {&__pyx_n_s__mNids, __pyx_k__mNids, sizeof(__pyx_k__mNids), 0, 0, 1, 1},
  {&__pyx_n_s__mQueryAli, __pyx_k__mQueryAli, sizeof(__pyx_k__mQueryAli), 0, 0, 1, 1},
  {&__pyx_n_s__mQueryFrom, __pyx_k__mQueryFrom, sizeof(__pyx_k__mQueryFrom), 0, 0, 1, 1},
  {&__pyx_n_s__mQueryTo, __pyx_k__mQueryTo, sizeof(__pyx_k__mQueryTo), 0, 0, 1, 1},
  {&__pyx_n_s__mQueryToken, __pyx_k__mQueryToken, sizeof(__pyx_k__mQueryToken), 0, 0, 1, 1},
  {&__pyx_n_s__mRowAlignment, __pyx_k__mRowAlignment, sizeof(__pyx_k__mRowAlignment), 0, 0, 1, 1},
  {&__pyx_n_s__mRowFrom, __pyx_k__mRowFrom, sizeof(__pyx_k__mRowFrom), 0, 0, 1, 1},
  {&__pyx_n_s__mRowTo, __pyx_k__mRowTo, sizeof(__pyx_k__mRowTo), 0, 0, 1, 1},
  {&__pyx_n_s__mSbjctAli, __pyx_k__mSbjctAli, sizeof(__pyx_k__mSbjctAli), 0, 0, 1, 1},
  {&__pyx_n_s__mSbjctFrom, __pyx_k__mSbjctFrom, sizeof(__pyx_k__mSbjctFrom), 0, 0, 1, 1},
  {&__pyx_n_s__mSbjctTo, __pyx_k__mSbjctTo, sizeof(__pyx_k__mSbjctTo), 0, 0, 1, 1},
  {&__pyx_n_s__mSbjctToken, __pyx_k__mSbjctToken, sizeof(__pyx_k__mSbjctToken), 0, 0, 1, 1},
  {&__pyx_n_s__makeAlignmentVector, __pyx_k__makeAlignmentVector, sizeof(__pyx_k__makeAlignmentVector), 0, 0, 1, 1},
  {&__pyx_n_s__map, __pyx_k__map, sizeof(__pyx_k__map), 0, 0, 1, 1},
  {&__pyx_n_s__mapId2Nid, __pyx_k__mapId2Nid, sizeof(__pyx_k__mapId2Nid), 0, 0, 1, 1},
  {&__pyx_n_s__matches, __pyx_k__matches, sizeof(__pyx_k__matches), 0, 0, 1, 1},
  {&__pyx_n_s__neighbour, __pyx_k__neighbour, sizeof(__pyx_k__neighbour), 0, 0, 1, 1},
  {&__pyx_n_s__next, __pyx_k__next, sizeof(__pyx_k__next), 0, 0, 1, 1},
  {&__pyx_n_s__nid, __pyx_k__nid, sizeof(__pyx_k__nid), 0, 0, 1, 1},
  {&__pyx_n_s__num_nids, __pyx_k__num_nids, sizeof(__pyx_k__num_nids), 0, 0, 1, 1},
  {&__pyx_n_s__object, __pyx_k__object, sizeof(__pyx_k__object), 0, 0, 1, 1},
  {&__pyx_n_s__out_filename, __pyx_k__out_filename, sizeof(__pyx_k__out_filename), 0, 0, 1, 1},
  {&__pyx_n_s__query_alen, __pyx_k__query_alen, sizeof(__pyx_k__query_alen), 0, 0, 1, 1},
  {&__pyx_n_s__query_ali, __pyx_k__query_ali, sizeof(__pyx_k__query_ali), 0, 0, 1, 1},
  {&__pyx_n_s__query_end, __pyx_k__query_end, sizeof(__pyx_k__query_end), 0, 0, 1, 1},
  {&__pyx_n_s__query_nid, __pyx_k__query_nid, sizeof(__pyx_k__query_nid), 0, 0, 1, 1},
  {&__pyx_n_s__query_start, __pyx_k__query_start, sizeof(__pyx_k__query_start), 0, 0, 1, 1},
  {&__pyx_n_s__query_token, __pyx_k__query_token, sizeof(__pyx_k__query_token), 0, 0, 1, 1},
  {&__pyx_n_s__readline, __pyx_k__readline, sizeof(__pyx_k__readline), 0, 0, 1, 1},
  {&__pyx_n_s__record_factory, __pyx_k__record_factory, sizeof(__pyx_k__record_factory), 0, 0, 1, 1},
  {&__pyx_n_s__reindexGraph, __pyx_k__reindexGraph, sizeof(__pyx_k__reindexGraph), 0, 0, 1, 1},
  {&__pyx_n_s__sbjct_alen, __pyx_k__sbjct_alen, sizeof(__pyx_k__sbjct_alen), 0, 0, 1, 1},
  {&__pyx_n_s__sbjct_ali, __pyx_k__sbjct_ali, sizeof(__pyx_k__sbjct_ali), 0, 0, 1, 1},
  {&__pyx_n_s__sbjct_end, __pyx_k__sbjct_end, sizeof(__pyx_k__sbjct_end), 0, 0, 1, 1},
  {&__pyx_n_s__sbjct_nid, __pyx_k__sbjct_nid, sizeof(__pyx_k__sbjct_nid), 0, 0, 1, 1},
  {&__pyx_n_s__sbjct_start, __pyx_k__sbjct_start, sizeof(__pyx_k__sbjct_start), 0, 0, 1, 1},
  {&__pyx_n_s__sbjct_token, __pyx_k__sbjct_token, sizeof(__pyx_k__sbjct_token), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__setDescend, __pyx_k__setDescend, sizeof(__pyx_k__setDescend), 0, 0, 1, 1},
  {&__pyx_n_s__setExponentialE, __pyx_k__setExponentialE, sizeof(__pyx_k__setExponentialE), 0, 0, 1, 1},
  {&__pyx_n_s__setExponentialF, __pyx_k__setExponentialF, sizeof(__pyx_k__setExponentialF), 0, 0, 1, 1},
  {&__pyx_n_s__setFilenameDomains, __pyx_k__setFilenameDomains, sizeof(__pyx_k__setFilenameDomains), 0, 0, 1, 1},
  {&__pyx_n_s__setFilenameGraph, __pyx_k__setFilenameGraph, sizeof(__pyx_k__setFilenameGraph), 0, 0, 1, 1},
  {&__pyx_n_s__setFilenameIndex, __pyx_k__setFilenameIndex, sizeof(__pyx_k__setFilenameIndex), 0, 0, 1, 1},
  {&__pyx_n_s__setFilenameMst, __pyx_k__setFilenameMst, sizeof(__pyx_k__setFilenameMst), 0, 0, 1, 1},
  {&__pyx_n_s__setFilenameNids, __pyx_k__setFilenameNids, sizeof(__pyx_k__setFilenameNids), 0, 0, 1, 1},
  {&__pyx_n_s__setFilenameSegments, __pyx_k__setFilenameSegments, sizeof(__pyx_k__setFilenameSegments), 0, 0, 1, 1},
  {&__pyx_n_s__setLogLevel, __pyx_k__setLogLevel, sizeof(__pyx_k__setLogLevel), 0, 0, 1, 1},
  {&__pyx_n_s__setMaxIterations, __pyx_k__setMaxIterations, sizeof(__pyx_k__setMaxIterations), 0, 0, 1, 1},
  {&__pyx_n_s__setOnlyQuery, __pyx_k__setOnlyQuery, sizeof(__pyx_k__setOnlyQuery), 0, 0, 1, 1},
  {&__pyx_n_s__setRelativeOverhang, __pyx_k__setRelativeOverhang, sizeof(__pyx_k__setRelativeOverhang), 0, 0, 1, 1},
  {&__pyx_n_s__setReportStep, __pyx_k__setReportStep, sizeof(__pyx_k__setReportStep), 0, 0, 1, 1},
  {&__pyx_n_s__setResolution, __pyx_k__setResolution, sizeof(__pyx_k__setResolution), 0, 0, 1, 1},
  {&__pyx_n_s__setSigmoidC, __pyx_k__setSigmoidC, sizeof(__pyx_k__setSigmoidC), 0, 0, 1, 1},
  {&__pyx_n_s__setSigmoidK, __pyx_k__setSigmoidK, sizeof(__pyx_k__setSigmoidK), 0, 0, 1, 1},
  {&__pyx_n_s__setSigmoidMax, __pyx_k__setSigmoidMax, sizeof(__pyx_k__setSigmoidMax), 0, 0, 1, 1},
  {&__pyx_n_s__setSigmoidMin, __pyx_k__setSigmoidMin, sizeof(__pyx_k__setSigmoidMin), 0, 0, 1, 1},
  {&__pyx_n_s__startswith, __pyx_k__startswith, sizeof(__pyx_k__startswith), 0, 0, 1, 1},
  {&__pyx_n_s__warn, __pyx_k__warn, sizeof(__pyx_k__warn), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetName(__pyx_b, __pyx_n_s__object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_map = __Pyx_GetName(__pyx_b, __pyx_n_s__map); if (!__pyx_builtin_map) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetName(__pyx_b, __pyx_n_s__MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_OSError = __Pyx_GetName(__pyx_b, __pyx_n_s__OSError); if (!__pyx_builtin_OSError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_StopIteration = __Pyx_GetName(__pyx_b, __pyx_n_s__StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_100000000 = PyInt_FromLong(100000000); if (unlikely(!__pyx_int_100000000)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcadda(void); /*proto*/
PyMODINIT_FUNC initcadda(void)
#else
PyMODINIT_FUNC PyInit_cadda(void); /*proto*/
PyMODINIT_FUNC PyInit_cadda(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_cadda(void)", __LINE__, __FILE__);
  #endif
  __pyx_init_filenames();
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3
  __pyx_empty_bytes = PyString_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("cadda"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_27), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_cadda) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5cadda_PairsDBNeighbourRecord) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PairsDBNeighbourRecord", (PyObject *)&__pyx_type_5cadda_PairsDBNeighbourRecord) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cadda_PairsDBNeighbourRecord = &__pyx_type_5cadda_PairsDBNeighbourRecord;
  if (PyType_Ready(&__pyx_type_5cadda_IndexedNeighbours) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "IndexedNeighbours", (PyObject *)&__pyx_type_5cadda_IndexedNeighbours) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cadda_IndexedNeighbours = &__pyx_type_5cadda_IndexedNeighbours;
  __pyx_type_5cadda_PairsDBNeighbourRecordOldFormat.tp_base = __pyx_ptype_5cadda_PairsDBNeighbourRecord;
  if (PyType_Ready(&__pyx_type_5cadda_PairsDBNeighbourRecordOldFormat) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PairsDBNeighbourRecordOldFormat", (PyObject *)&__pyx_type_5cadda_PairsDBNeighbourRecordOldFormat) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cadda_PairsDBNeighbourRecordOldFormat = &__pyx_type_5cadda_PairsDBNeighbourRecordOldFormat;
  if (PyType_Ready(&__pyx_type_5cadda_NeighbourProxy) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "NeighbourProxy", (PyObject *)&__pyx_type_5cadda_NeighbourProxy) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cadda_NeighbourProxy = &__pyx_type_5cadda_NeighbourProxy;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/software/pfam/python/adda/src/cadda.pyx":4
 * Pyrex extension classes used by `cadda.py`.
 * """
 * import alignlib             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "string.h":
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__alignlib), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__alignlib, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":228
 *     cadda_setEvalueThresholdTrustedLinks( v )
 * 
 * import alignlib             # <<<<<<<<<<<<<<
 * 
 * # 100Mb
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__alignlib), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__alignlib, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":285
 *     strncpy( dest.sbjct_ali, src.sbjct_ali, dest.sbjct_alen + 1)
 * 
 * class NeighbourRecord(object):             # <<<<<<<<<<<<<<
 * 
 *     def __str__( self ):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_3 = __Pyx_CreateClass(__pyx_t_2, ((PyObject *)__pyx_t_1), __pyx_n_s__NeighbourRecord, "cadda"); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":287
 * class NeighbourRecord(object):
 * 
 *     def __str__( self ):             # <<<<<<<<<<<<<<
 * 
 *         return "\t".join( map(str, (
 */
  __pyx_t_2 = PyCFunction_New(&__pyx_mdef_5cadda_15NeighbourRecord___str__, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyMethod_New(__pyx_t_2, 0, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s____str__, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":294
 *             self.mSbjctFrom, self.mSbjctTo )))
 * 
 *     def getAlignment(self ):             # <<<<<<<<<<<<<<
 *         """parse alignment into a AlignmentVector object."""
 *         r = alignlib.makeAlignmentVector()
 */
  __pyx_t_4 = PyCFunction_New(&__pyx_mdef_5cadda_15NeighbourRecord_getAlignment, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyMethod_New(__pyx_t_4, 0, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s__getAlignment, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__NeighbourRecord, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":815
 *             destroy_neighbour( self.neighbour )
 * 
 * class PairsDBNeighbourIterator:             # <<<<<<<<<<<<<<
 *     '''iterate over neighbours in input graph and translate
 *     identifiers to nids
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItemString(((PyObject *)__pyx_t_1), "__doc__", ((PyObject *)__pyx_kp_s_28)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1), __pyx_n_s_25, "cadda"); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "/software/pfam/python/adda/src/cadda.pyx":825
 *     '''
 * 
 *     def __init__(self, infile, mapId2Nid, logger ):             # <<<<<<<<<<<<<<
 *         self.infile = infile
 *         self.mapId2Nid = mapId2Nid
 */
  __pyx_t_2 = PyCFunction_New(&__pyx_mdef_5cadda_24PairsDBNeighbourIterator___init__, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyMethod_New(__pyx_t_2, 0, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s____init__, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":831
 *         self.logger = logger
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_4 = PyCFunction_New(&__pyx_mdef_5cadda_24PairsDBNeighbourIterator___iter__, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyMethod_New(__pyx_t_4, 0, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s____iter__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":834
 *         return self
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef PairsDBNeighbourRecord r
 */
  __pyx_t_2 = PyCFunction_New(&__pyx_mdef_5cadda_24PairsDBNeighbourIterator_next, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyMethod_New(__pyx_t_2, 0, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s__next, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_25, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":869
 *         raise StopIteration
 * 
 * class PairsDBNeighbourIteratorOldFormat(PairsDBNeighbourIterator):             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs ):
 *         PairsDBNeighbourIterator.__init__( self, *args, **kwargs )
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_25); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CreateClass(__pyx_t_4, ((PyObject *)__pyx_t_1), __pyx_n_s_29, "cadda"); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":870
 * 
 * class PairsDBNeighbourIteratorOldFormat(PairsDBNeighbourIterator):
 *     def __init__(self, *args, **kwargs ):             # <<<<<<<<<<<<<<
 *         PairsDBNeighbourIterator.__init__( self, *args, **kwargs )
 *         self.record_factory = PairsDBNeighbourRecordOldFormat
 */
  __pyx_t_4 = PyCFunction_New(&__pyx_mdef_5cadda_33PairsDBNeighbourIteratorOldFormat___init__, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyMethod_New(__pyx_t_4, 0, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_29, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":874
 *         self.record_factory = PairsDBNeighbourRecordOldFormat
 * 
 * class PairsDBNeighboursRecord:             # <<<<<<<<<<<<<<
 *     def __init__(self, Nid nid, matches):
 *         self.query_nid = nid
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1), __pyx_n_s_26, "cadda"); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "/software/pfam/python/adda/src/cadda.pyx":875
 * 
 * class PairsDBNeighboursRecord:
 *     def __init__(self, Nid nid, matches):             # <<<<<<<<<<<<<<
 *         self.query_nid = nid
 *         self.matches = matches
 */
  __pyx_t_2 = PyCFunction_New(&__pyx_mdef_5cadda_23PairsDBNeighboursRecord___init__, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyMethod_New(__pyx_t_2, 0, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s____init__, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_26, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":879
 *         self.matches = matches
 * 
 * class PairsDBNeighboursIterator:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, iterator, logger ):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1), __pyx_n_s_30, "cadda"); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "/software/pfam/python/adda/src/cadda.pyx":881
 * class PairsDBNeighboursIterator:
 * 
 *     def __init__(self, iterator, logger ):             # <<<<<<<<<<<<<<
 *         """
 *         f: the input file object.
 */
  __pyx_t_4 = PyCFunction_New(&__pyx_mdef_5cadda_25PairsDBNeighboursIterator___init__, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyMethod_New(__pyx_t_4, 0, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":891
 *         self.logger = logger
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_2 = PyCFunction_New(&__pyx_mdef_5cadda_25PairsDBNeighboursIterator___iter__, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyMethod_New(__pyx_t_2, 0, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s____iter__, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":894
 *         return self
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef NeighbourProxy r
 */
  __pyx_t_4 = PyCFunction_New(&__pyx_mdef_5cadda_25PairsDBNeighboursIterator_next, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyMethod_New(__pyx_t_4, 0, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyObject_SetAttr(__pyx_t_3, __pyx_n_s__next, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_30, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/software/pfam/python/adda/src/cadda.pyx":1
 * """             # <<<<<<<<<<<<<<
 * Pyrex extension classes used by `cadda.py`.
 * """
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setFilenameSegments); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_31), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setFilenameGraph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_32), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setFilenameIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_33), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setFilenameMst); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_34), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setFilenameNids); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_35), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setFilenameDomains); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_36), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s_38); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_37), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s_40); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_39), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setLogLevel); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_41), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setSigmoidK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_42), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setSigmoidC); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_43), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setSigmoidMax); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_44), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setSigmoidMin); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_45), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setExponentialE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_46), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setExponentialF); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_47), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setRelativeOverhang); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_48), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setOnlyQuery); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_49), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setResolution); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_50), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setDescend); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_51), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s_53); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_52), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setMaxIterations); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_54), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__setReportStep); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_55), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s_57); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_56), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__NeighbourRecord); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getAlignment); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_58), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__indexGraph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetAttrString(__pyx_t_2, "__doc__");
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_59), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_m, __pyx_n_s__reindexGraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_60), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__IndexedNeighbours); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getNeighbours); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_61), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s_63); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getAlignment); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_62), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s_30); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s____init__); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__");
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_64), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    __Pyx_AddTraceback("init cadda");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cadda");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

static const char *__pyx_filenames[] = {
  "cadda.pyx",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}


static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject* __Pyx_PyEval_CallObjectWithKeywords(PyObject *callable, PyObject *args, PyObject *kwargs) {
    PyObject* result;
    if (likely(PyDict_Check(kwargs))) {
        return PyEval_CallObjectWithKeywords(callable, args, kwargs);
    } else {
        PyObject* real_dict;
        real_dict = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, kwargs, NULL);
        if (unlikely(!real_dict))
            return NULL;
        result = PyEval_CallObjectWithKeywords(callable, args, real_dict);
        Py_DECREF(real_dict);
        return result; /* may be NULL */
    }
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
    if (unlikely(tstate->curexc_type))
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (XDECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}


static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}

static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *__import__ = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    __import__ = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!__import__)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(__import__,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(__import__);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static PyObject *__Pyx_CreateClass(
    PyObject *bases, PyObject *dict, PyObject *name, const char *modname)
{
    PyObject *py_modname;
    PyObject *result = 0;

    #if PY_MAJOR_VERSION < 3
    py_modname = PyString_FromString(modname);
    #else
    py_modname = PyUnicode_FromString(modname);
    #endif
    if (!py_modname)
        goto bad;
    if (PyDict_SetItemString(dict, "__module__", py_modname) < 0)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    result = PyClass_New(bases, dict, name);
    #else
    result = PyObject_CallFunctionObjArgs((PyObject *)&PyType_Type, name, bases, dict, NULL);
    #endif
bad:
    Py_XDECREF(py_modname);
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_Nid(Nid val) {
    const Nid neg_one = (Nid)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(Nid) <  sizeof(long)) {
        return PyInt_FromLong((long)val);
    } else if (sizeof(Nid) == sizeof(long)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else { /* (sizeof(Nid) > sizeof(long)) */
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uResidue(uResidue val) {
    const uResidue neg_one = (uResidue)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(uResidue) <  sizeof(long)) {
        return PyInt_FromLong((long)val);
    } else if (sizeof(uResidue) == sizeof(long)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else { /* (sizeof(uResidue) > sizeof(long)) */
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    }
}

static CYTHON_INLINE Nid __Pyx_PyInt_from_py_Nid(PyObject* x) {
    const Nid neg_one = (Nid)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(Nid) == sizeof(char)) {
        if (is_unsigned)
            return (Nid)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (Nid)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(Nid) == sizeof(short)) {
        if (is_unsigned)
            return (Nid)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (Nid)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(Nid) == sizeof(int)) {
        if (is_unsigned)
            return (Nid)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (Nid)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(Nid) == sizeof(long)) {
        if (is_unsigned)
            return (Nid)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (Nid)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(Nid) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (Nid)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (Nid)__Pyx_PyInt_AsSignedLongLong(x);
#if 0
    } else if (sizeof(Nid) > sizeof(short) &&
               sizeof(Nid) < sizeof(int)) { /*  __int32 ILP64 ? */
        if (is_unsigned)
            return (Nid)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (Nid)__Pyx_PyInt_AsSignedInt(x);
#endif
    }
    PyErr_SetString(PyExc_TypeError, "Nid");
    return (Nid)-1;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   if (x == Py_True) return 1;
   else if ((x == Py_False) | (x == Py_None)) return 0;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
