
PfamWeb
jt6 20070302 WTSI.

This is the INSTALL file for the PfamWeb website application. It details the 
process of installing PfamWeb using the Build.PL installation script and lists
some starting points for reading about Catalyst.

This file, like all of the others in this distribution, is a work in progress...

Documentation
=============

Installing Catalyst is a task in and of itself and there are some good
resources on the web that describe it. 

o The main CPAN documentation for Catalyst:

		http://search.cpan.org/dist/Catalyst-Manual/

	This includes a (short) section on installation which suggests using an
	installation script from: 
	
		http://www.shadowcatsystems.co.uk/projects/catalyst/index.html
		
  The way that I've installed Catalyst in the past is to configure CPAN
  correctly and then do "cpan Catalyst::Runtime". That will inevitably
  generate errors with some prerequisite packages, but they're usually easy
  to trace and fix.

o Catalyst mailing list archives:

	http://www.mail-archive.com/catalyst@lists.rawmode.org/

o There's a thread on the mailing list specifically about Catalyst installation

	  http://www.mail-archive.com/catalyst@lists.rawmode.org/msg01162.html
	
	which probably covers a lot of ground, but it's a painful read...

Installation overview
=====================

Run the installation script and answer the questions:

	$ perl Build.PL
	...

Run the Build script:

	$ ./Build
	...

Install the PfamWeb code:

	$ ./Build install

Add the PfamWeb config to your Apache:

	$ echo Include /path-to-pfamweb/httpd.conf >> /path-to-your-apache/httpd.conf	

Restart Apache:

	$ /path-to-apache-root/bin/apachectl restart
	
Browse to:

	http://your-server/catalyst/pfam

Longer explanation
==================

Prerequisites
-------------

The build and installation process absolutely requires Module::Build to be
installed in your default perl executable:

	$ perl -e 'use Module::Build'

The build script will fail unless you have a set of Catalyst prerequisites
installed, notably Catalyst::Runtime. This script doesn't make any attempt to
install the prerequisites for you - it's not that helpful.

Running the build script
------------------------

We're using Module::Build to help install PfamWeb. Using M::B is similar to
using GNU configure and make. Instead of a script called "configure", there is
a script called "Build.PL" which generates a file called "Build, in the same
way that "configure" generates "Makefile". You run Build.PL something like:

	$ perl Build.PL
	...

The script will then ask a series of questions and based on your responses it
will configure and write out two new files, pfamweb.conf and httpd.conf. The
first file is an internal configuration file that's used by PfamWeb. The second
is a snippet of Apache configuration that needs to be included somewhere in the
config for your webserver.

Questions
---------

The questions that are asked by the Build.PL script are mostly related to
where things will ultimately live, but some are a bit obscure...

"Where is the default PfamWeb/Apache configuration file ?"

The distribution comes with two template config files, which are used to provide
the default answers to the rest of the questions. The script is hard-coded
to look inside the distribution directory for the starting templates, but we
ask this question so that you can make changes to the files and then keep 
copies separately from the distribution. This is so that later, if you need to
re-install or upgrade, you can point to your modified versions of the files and
you'll get starting values from your files rather than ours.

"In what directory do you want to install the PfamWeb application ?"

This is a single directory into which we'll install all of the PfamWeb files.
It can live more or less anywhere, as long as your Apache can serve files from
this directory. Because we modify the files in the distribution during the
installation process, you should put this directory outside of the distribution
directory. 

"What is the application root for your site ?"

PfamWeb needs to know where it is running, relative to the root URL for your
Apache server, so that URLs in dynamic pages can be build correctly. We also
need to configure mod_perl to dispatch PfamWeb URLs to PfamWeb classes. This
value should be just the path part of the URL. For example, our internal
development servers are accessed using this URL:

	http://deskpro12345.dynamic.sanger.ac.uk:8000/catalyst/pfam

The application root in this case is "/catalyst/pfam". Be sure not to include
an extra slash at the end of the path, because that changes the meaning of
the URL as far as Catalyst is concerned.

"What is the absolute path for the temporary directory ?"

Some parts of the PfamWeb application write temporary files. The domain graphics
are the most obvious example. These files are only required for the lifetime of
a single request so they can be placed in a directory which is frequently
cleaned. Right now it's important that the directory is always present though -
don't let a cron job delete it entirely, otherwise something will fail when it
tries to write to it.

Also, it's important that the temp directory is visible from the web, so we 
also ask for the URL for it. That will be prepended onto paths for temporary
files, such as the graphics.

"What is the name of the Pfam database ? etc"

We obviously need to connect to the Pfam database to retrieve data, so we ask
for all of the connection parameters that we need. We assume that you're
connecting to the Pfam DB using a read-only account, which is just good practice
for web-applications. If you have to specify a password, mail us and we'll
explain how to add one. 

As well as the Pfam DB, we also use a small tracking database, to which we 
require read/write access. This time we'll ask for a username and password.

Once you've given all the DB connection parameters, the script will offer to 
try connecting to the DBs. This is just a quick DBI connection, so it should be
a semi-sensible test of the values you've given. If for any reason the
connection test fails, you should be allowed to re-enter the connection 
parameters, but you should also be able to simply accept them and fix things
later if you prefer.

"Where should we put the contents of the pfamCore directory ?"

As well as the PfamWeb code, the distribution includes two directories, 
pfamCore and pfamModel, which are two CVS modules containing extra classes
that we use. Although they're bundled with the PfamWeb code in the distribution,
these two directories are kept as two separate modules in WTSI and the script
will ask for two separate locations.

"Where is the muscle binary ?"

We use muscle in the PfamWeb code and we've bundled a linux binary with this
distribution. We need to know where it will eventually be installed, so that we
can configure the application to find it when it's running. You can copy the 
linux binary from the distribution and install it somewhere appropriate or, if
you already have an installed version, point to that one when asked for the
muscle binary location.

Build
-----

After running "perl Build.PL" you should have a file called "Build" in the top
level distribution directory. Running Build will copy and edit the files from
the distribution, customising them according the answers that you gave earlier:

	$ ./Build
	...
	
You should see a long list of source files, along with their temporary
destination inside the distribution directory.

Install
-------

Finally, you need to run the install step. Before doing that you may want to 
check that the configuration is correct, which you can do by running:

	$ ./Build fakeinstall
	
This will display the operations that will be performed by the installation, but
will not modify or move any files. If the list of final destinations for files 
looks correct, you can run the installation proper by doing:

	$ ./Build install
	
You should see the same list of files as for "fakeinstall", but this time they
will be moved into their final locations, as you specified earlier. 

Configure Apache
----------------

In the directory where you installed PfamWeb, you will find "conf/httpd.conf",
the snippet of Apache configuration that is required to configure mod_perl and
PfamWeb. To complete the installation, that configuration needs to be added to
the configuration for your mod_perl-enabled Apache server.

You can either add the contents of that file directly to the 
httpd.conf for the server, or you can add an "Include" directive that will
point to that file:

	$ echo Include /path-to-pfamweb/httpd.conf >> /path-to-your-apache/httpd.conf	

Restart the server to load PfamWeb. All messages generated by Catalyst are sent
to "error.log", so you should see something like this at the end of the log
file: 

	...
	| /structure/graphics                 | /structure/graphics/default          |
	| /structure/structuraldomains        | /structure/structuraldomains/getStr- |
	|                                     | ucturalDomains                       |
	| /structure/structuraldomains        | /structure/structuraldomains/default |
	| /structure/viewer                   | /structure/viewer/default            |
	'-------------------------------------+--------------------------------------'

	[debug] Loaded Regex actions:
	.-------------------------------------+--------------------------------------.
	| Regex                               | Private                              |
	+-------------------------------------+--------------------------------------+
	| ^speciesdistribution/(P\S{1}\d{5,7- | /speciesdistribution/getSpeciesDist- |
	| })                                  | ribution                             |
	'-------------------------------------+--------------------------------------'

	[info] PfamWeb powered by Catalyst 5.7006
	[Wed Feb 28 10:14:58 2007] [notice] Apache/2.2.3 (Unix) mod_perl/2.0.2 Perl/v5.8.7 configured -- resuming normal operations

If there is a problem, the Catalyst error messages will also appear here.

Browse
------

To test the site you need to visit the URL for the index page of PfamWeb. That
URL is made up of the site address and the application root that you specified
during the installation. 

As an example, we run test servers on our desktop linux machines, which are
labelled something like deskpro12345. The internal address for those machines
looks like:

	deskpro12345.dynamic.sanger.ac.uk

Because we don't run our development servers as root, we have to serve from a 
port higher than 1024, so we default to port 8000, making the base URL for an
Apache server on our desktop machines:

	http://deskpro12345.dynamic.sanger.ac.uk:8000

The path part of the URL is given during installation and the installation
script will actually tell you what the URL should look like when you run it. 
For example, when asked "what is the application root for your site ?", we
would specify "/catalyst/pfam", so the index page for our installation would be:

	http://deskpro12345.dynamic.sanger.ac.uk:8000/catalyst/pfam
	
Browsing to that URL should show the index page for the site. If it doesn't,
either the URL is wrong or there is a problem... Check "error.log" for messages
from Catalyst and let us know that there was a problem with the installation !

Known bugs
==========

o There are several components of the site which are currently served directly
  from our local disks. One example is the relationship images for clans. We 
  intend to drop all of these files into the Pfam database, so that they can de
  downloaded with the rest of the data but, for now, you'll have missing
  images in the pages and error messages in the logs for these components.
  
o The Build.PL script is certain to have bugs, but I don't know what they are.
  It's only been tested locally in Sanger and although it works for us I'm sure
  there will be some bad assumption or missing file that will cause problems on
  remote sites. Please let me know of any and all problems that you have,
  preferably with a log of what went on prior to the problem !



$Id: INSTALL,v 1.1 2007-03-02 15:25:12 jt6 Exp $
