
# 001index.t
# jt6 20071027 WTSI
#
# tests the behaviour of the test controller

# controlled by a couple of environment variables:
# export PFAMWEB_CONFIG=/nfs/team71/pfam/jt6/server/PfamConfigWTSI/pfamweb.conf

use strict;
use warnings;
    
use Test::More tests => 2060;
use Test::WWW::Mechanize::Catalyst 'PfamWeb';

use Config::General;     # configuration
use Cache::Memcached;    # cache control
 
#-------------------------------------------------------------------------------
# read the configuration for the application from file specified by the
# "PFAMWEB_CONFIG" environment variable

# first check that we can find the file
die 'error: no environment variable for configuration file (PFAMWEB_CONFIG)'
  unless( defined $ENV{PFAMWEB_CONFIG} and -s $ENV{PFAMWEB_CONFIG} );

my $conf;
eval { $conf = new Config::General( $ENV{PFAMWEB_CONFIG} ) };
die "error: problem parsing configuration file:\n$@" if $@;

my %config;
eval { %config = $conf->getall };
die "error: problem retrieving configuration from file:\n$@" if $@;

#-------------------------------------------------------------------------------
# configure the wrapper for the cache servers

my $cache_server_ips = $config{cache}->{backends}->{default}->{servers};
my $cache = new Cache::Memcached( { servers => $cache_server_ips } );

#-------------------------------------------------------------------------------
# and onto the testing...

my $mech = Test::WWW::Mechanize::Catalyst->new();

for( 1 .. 50 ) {

  $cache->flush_all;
  
  # wait for the cache daemons to catch up...
  diag( 'cleared cache; sleeping 2 seconds...' );
  sleep 2;
  
  # retrieve the page that will be cached on first load
  $mech->get_ok( '/test/cached',
                 'retrieve test page' );
  
  # store the content so that we can check the response from subsequent hits
  my $first_content = $mech->content;
  
  my( $pid )    = $mech->content =~ m{pid: (\d+)};
  my( $server ) = $mech->content =~ m{server: (.*?)\</strong};
  diag( "generated by process ID |$pid| on server |$server|" );
  
  # check the page content
  $mech->title_is( 'Pfam: Test page',
                   'title as expected' );
  
  $mech->content_contains( 'This is a PfamWeb test page.',
                           'correct page content' );
  
  for( 1 .. 20 ) {
    
    $mech->get_ok( '/test/cached',
                   'retrieve (cached) test page' );
  
    $mech->content_is( $first_content,
                       'content matches' );

    sleep 1;

  }

}
 