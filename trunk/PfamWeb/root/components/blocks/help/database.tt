[%
# database.tt
# jt6 20080331 WTSI
# 
# build the database documentation block for the help pages
#
# $Id: database.tt,v 1.8 2008-10-15 08:18:38 jt6 Exp $
%]

<!-- start database block -->

<div class="block" id="helpDatabaseBlock">
  <div class="handle">
    <h1>Database documentation</h1>
  </div>
  <div class="blockContent">

    <p>
      This section describes the tables in the Pfam MySQL database and shows 
      example queries. Installation packages and documentation on MySQL can be 
      obtained from www.mysql.com.
    </p>
 
    <hr />

    <h2>VERSION table</h2>

    <img class="tables"
         alt="Version table"
         src="[% c.uri_for( "/static/images/db_schema/Version.png" ) %]" />

    <p>
      The <span class="table">VERSION</span> table contains information that 
      relates to a particular Pfam release. It contains the version number of 
      the Pfam database, the version numbers of the Swiss-Prot and TrEMBL 
      databases that were used to build Pfam, and some statistics about the 
      number of families and coverage. This table is stand-alone and does not 
      link to any of the other tables.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the version information for the Pfam database
    </fieldset>

    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT * FROM version \G
                     pfam_release: 22.0
                pfam_release_date: 2007-07-10
               swiss_prot_version: 51.7
                   trembl_version: 34.7
                    hmmer_version: 2.3.2
                   pfamA_coverage: 73.2
        pfamB_additional_coverage: 11.6
           pfamA_residue_coverage: 50.8
pfamB_additional_residue_coverage: 6.5
                  number_families: 9318</pre>
    </fieldset>
    
    <hr />

    <h2>Domain information</h2>
    
    <p>
      Two of the central tables in the database are 
      <span class="table">pfamseq</span>, which contains the UniProtkKB sequence 
      database, and <span class="table">pfamA</span>, which contains 
      information about the pfamA families. The table 
      <span class="table">pfamA_reg_seed</span> contains the Pfam domains that 
      are present in a seed alignment, and the 
      <span class="table">pfamA_reg_full</span> contains all the sequence 
      regions that match the HMM for each family. Note that the 
      <span class="table">pfamA_reg_full</span> table contains both the 
      significant and insignificant data, and the 
      <span class="column">in_full</span> column in this table is set to 
      &#39;1&#39; if the score for the domain is significant. The 
      <span class="table">pfamA_reg_full_significant</span> and 
      <span class="table">pfamA_reg_full_insignificant</span> tables contain, 
      as the names suggest, significant and insignificant data respectively.
      Significant hits are those with a bits score above the curated threshold 
      for the family, whilst insignificant matches are those that score below 
      the curated threshold.
    </p>
    <p>
      The Pfam database has historically been built on the UniProtKB database, 
      however as of release 22.0 we also provide Pfam domain data for the NCBI 
      sequence database (genpept) and a set of metagenomics sequences. Further
      information about querying the NCBI and metagenomics data sets can be 
      found below.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the domains for UniProtKB protein sequence 
      &#39;VAV_HUMAN&#39;
    </fieldset>

    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamA_acc, \
              pfamA_id, \
              seq_start, \
              seq_end \
       FROM   pfamseq, \
              pfamA, \
              pfamA_reg_full_significant \
       WHERE  pfamseq_id = &#39;VAV_HUMAN&#39; \
       AND    pfamseq.auto_pfamseq = pfamA_reg_full_significant.auto_pfamseq \
       AND    pfamA_reg_full_significant.auto_pfamA = pfamA.auto_pfamA;
+-----------+----------+-----------+---------+
| pfamA_acc | pfamA_id | seq_start | seq_end |
+-----------+----------+-----------+---------+
| PF00307   | CH       |         2 |     120 |
| PF00169   | PH       |       403 |     504 |
| PF00621   | RhoGEF   |       198 |     372 |
| PF00017   | SH2      |       671 |     745 |
| PF00018   | SH3_1    |       785 |     840 |
| PF00018   | SH3_1    |       617 |     658 |
| PF00130   | C1_1     |       516 |     568 |
+-----------+----------+-----------+---------+</pre>
    </fieldset>


    <p>
      UniProtKB sequences have secondary accessions if they have been merged 
      or split. Secondary accession numbers are stored in the table called
      <span class="table">secondary_pfamseq_acc</span>.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the secondary accession(s) for the UniProtKB sequence
      &#39;P15455&#39;
    </fieldset>

    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamseq_acc, \
              secondary_acc \
       FROM   pfamseq, \
              secondary_pfamseq_acc \
       WHERE  pfamseq.auto_pfamseq = secondary_pfamseq_acc.auto_pfamseq \
       AND    pfamseq_acc= &#39;P15455&#39;;
+-------------+---------------+
| pfamseq_acc | secondary_acc |
+-------------+---------------+
| P15455      | Q3E711        |
| P15455      | Q9FFH7        |
+-------------+---------------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all the UniProtKB sequences in the full alignment for the family 
      &#39;B12D&#39;
    </fieldset>
    
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamseq_id, \
              pfamseq_acc, \
              seq_start, \
              seq_end, \
              pfamA_id \
       FROM   pfamA, \
              pfamseq, \
              pfamA_reg_full_significant \
       WHERE  pfamA_id = &#39;B12D&#39; \
       AND    pfamA.auto_pfamA = pfamA_reg_full_significant.auto_pfamA \
       AND    pfamA_reg_full_significant.auto_pfamseq = pfamseq.auto_pfamseq;
+--------------+-------------+-----------+---------+----------+
| pfamseq_id   | pfamseq_acc | seq_start | seq_end | pfamA_id |
+--------------+-------------+-----------+---------+----------+
| O22414_ORYSA | O22414      |         3 |      89 | B12D     |
| Q01BS9_OSTTA | Q01BS9      |         5 |     119 | B12D     |
| A3BLZ4_ORYSJ | A3BLZ4      |        76 |     155 | B12D     |
| Q69F92_PHAVU | Q69F92      |        30 |     128 | B12D     |
| A6MZE4_ORYSI | A6MZE4      |         3 |      89 | B12D     |
| Q84MX3_ORYSJ | Q84MX3      |         1 |      75 | B12D     |
| Q6YU35_ORYSJ | Q6YU35      |        11 |      97 | B12D     |
| A7PAD2_VITVI | A7PAD2      |         1 |      99 | B12D     |
| A7PD80_VITVI | A7PD80      |         6 |      92 | B12D     |
...</pre>
    </fieldset>
    
    <fieldset class="query">
      <legend>Example query</legend>
      Give me all the UniProtKB sequences in the seed alignment for the family 
      &#39;B12D&#39;
    </fieldset>
    
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamseq_id, \
              seq_start, \
              seq_end, \
              pfamA_id \
       FROM   pfamA, \
              pfamseq, \
              pfamA_reg_seed \
       WHERE  pfamA_id = &#39;B12D&#39; \
       AND    pfamA.auto_pfamA = pfamA_reg_seed.auto_pfamA \
       AND    pfamA_reg_seed.auto_pfamseq = pfamseq.auto_pfamseq;
+--------------+-----------+---------+----------+
| pfamseq_id   | seq_start | seq_end | pfamA_id |
+--------------+-----------+---------+----------+
| Q9XHD5_IPOBA |         3 |      89 | B12D     |
| Q940E1_CASSA |        29 |     116 | B12D     |
| Q42338_ARATH |         2 |      88 | B12D     |
| Q9LJ47_ARATH |         1 |      87 | B12D     |
| Q6YU38_ORYSJ |         2 |      84 | B12D     |
| O22414_ORYSA |         3 |      89 | B12D     |
| Q1H8M8_BETVU |         4 |      90 | B12D     |
| Q6YU35_ORYSJ |        11 |      97 | B12D     |
| Q6Z4G5_ORYSJ |         1 |      87 | B12D     |
+--------------+-----------+---------+----------+</pre>
    </fieldset>

    <hr />

    <h2>Other regions, active site and disulphide bond information for a 
      sequence</h2>

        <img class="tables"
             alt="Other regions, sites, disulphides"
             src="[% c.uri_for( "/static/images/db_schema/Other_reg.png" ) %]" />

    <p>
      These tables contain-sequence specific information about the sequences 
      in the UniProtKB database. The <span class="table">other_regions</span>
      tables contains coiled coil, low complexity, signal peptide and 
      transmembrane regions. The <span class="table">context_pfam_regions</span>
      table contains context domains; context domains are those that do not 
      score above the family gathering threshold, but are expected to be real 
      based on the presence of the surrounding domains found in the protein.
      The <span class="table">pfamseq_markup</span> table contains active site
      information which is taken from the UniProtKB feature table. Additional 
      active site residues are predicted by Pfam based on conserved residues 
      in a Pfam alignment. The <span class="table">pfamseq_disulphide</span>
      tables contains disulphide bond information from the UniProtKB feature 
      table.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the pfamB regions for the UniProtKB sequence 
      &#39;VAV_HUMAN&#39;
    </fieldset>

    <fieldset class="sql">
      <pre>mysql> SELECT DISTINCT pfamB.pfamB_acc, \
              pfamB_id, \
              seq_start, \
              seq_end \
       FROM   pfamB_reg, \
              pfamB, \
              pfamseq \
       WHERE  pfamseq_id = &#39;VAV_HUMAN&#39; \
       AND    pfamB_reg.auto_pfamseq = pfamseq.auto_pfamseq \
       AND    pfamB_reg.auto_pfamB = pfamB.auto_pfamB;
+-----------+--------------+-----------+---------+
| pfamB_acc | pfamB_id     | seq_start | seq_end |
+-----------+--------------+-----------+---------+
| PB017628  | Pfam-B_17628 |       155 |     181 |
| PB045706  | Pfam-B_45706 |       585 |     616 |
+-----------+--------------+-----------+---------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the transmembrane, signal-peptide, coiled-coils and 
      low-complexity information for the UniProtKB sequnce &#39;VAV_HUMAN&#39;
    </fieldset>

    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT type_id, \
              source_id, \
              seq_start, \
              seq_end, \
              score \
       FROM   other_reg, \
              pfamseq \
       WHERE  pfamseq.pfamseq_id = &#39;VAV_HUMAN&#39; \
       AND    other_reg.auto_pfamseq = pfamseq.auto_pfamseq;
+----------------+-----------+-----------+---------+--------+
| type_id        | source_id | seq_start | seq_end | score  |
+----------------+-----------+-----------+---------+--------+
| low_complexity | seg       |        42 |      51 | 1.5700 |
| low_complexity | seg       |       356 |     367 | 2.1900 |
+----------------+-----------+-----------+---------+--------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the context regions for the UniProtKB sequence 
      &#39;Q8I6U6_PLAF7&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT seq_start, \
              seq_end, \
              domain_score, \
              pfamA.pfamA_acc, \
              pfamA_id, \
              pfamA.description \
       FROM   context_pfam_regions, \
              pfamseq, \
              pfamA \
       WHERE  pfamseq.pfamseq_id = &#39;Q8I6U6_PLAF7&#39; \
       AND    context_pfam_regions.auto_pfamseq = pfamseq.auto_pfamseq \
       AND    pfamA.auto_pfamA = context_pfam_regions.auto_pfamA;
+-----------+---------+--------------+-----------+----------+--------------------------------------+
| seq_start | seq_end | domain_score | pfamA_acc | pfamA_id | description                          |
+-----------+---------+--------------+-----------+----------+--------------------------------------+
|     10250 |   10279 |     12800.00 | PF06513   | DUF1103  | Repeat of unknown function (DUF1103) |
+-----------+---------+--------------+-----------+----------+--------------------------------------+
      </pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the active site information for UniProtKB sequence 
      &#39;Q22CX9&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamseq_acc, \
              pfamseq_id, \
              residue, \
              label \
       FROM   pfamseq, \
              pfamseq_markup, \
              markup_key \
       WHERE  pfamseq.auto_pfamseq = pfamseq_markup.auto_pfamseq \
       AND    pfamseq_markup.auto_markup = markup_key.auto_markup \
       AND    pfamseq_acc = &#39;Q22CX9&#39;;
+-------------+--------------+---------+----------------------------+
| pfamseq_acc | pfamseq_id   | residue | label                      |
+-------------+--------------+---------+----------------------------+
| Q22CX9      | Q22CX9_TETTH |     276 | Pfam predicted active site |
| Q22CX9      | Q22CX9_TETTH |     305 | Pfam predicted active site |
| Q22CX9      | Q22CX9_TETTH |     337 | Pfam predicted active site |
+-------------+--------------+---------+----------------------------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all the residues involved in disulphide bonds in the UniProtKB 
      sequence &#39;P98092&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamseq_acc, \
              pfamseq_id, \
              bond_start, \
              bond_end \
       FROM   pfamseq, \
              pfamseq_disulphide \
       WHERE  pfamseq_disulphide.auto_pfamseq = pfamseq.auto_pfamseq \
       AND    pfamseq_acc = &#39;Q43495&#39;;
+-------------+------------+------------+----------+ 
| pfamseq_acc | pfamseq_id | bond_start | bond_end | 
+-------------+------------+------------+----------+ 
| Q43495      | 108_SOLLC  |         41 |       77 | 
| Q43495      | 108_SOLLC  |         51 |       66 |
| Q43495      | 108_SOLLC  |         67 |       92 |
| Q43495      | 108_SOLLC  |         79 |       99 |
+-------------+------------+------------+----------+</pre>
    </fieldset>

    <hr />

    <h2>Architecture information for a family</h2>

    <img class="tables"
         alt="Architecture table"
         src="[% c.uri_for( "/static/images/db_schema/Architecture.png" ) %]" />

    <p>
      In Pfam, an architecture is the collection of domains that are present 
      on a protein.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the architectures and UniProtKB protein sequences for the
      family &#39;Dehyd-heme_bind&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT architecture, \
              pfamseq_id, \
              pfamseq_acc \
       FROM   architecture, \
              pfamseq \
       WHERE  architecture like &#39;%Dehyd-heme_bind%&#39; \
       AND    pfamseq.auto_architecture = architecture.auto_architecture;
+---------------------------------+--------------+-------------+
| architecture                    | pfamseq_id   | pfamseq_acc |
+---------------------------------+--------------+-------------+
| Dehyd-heme_bind~DUF1928         | A0NPA8_9RHOB | A0NPA8      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q8VUT0_PARDE | Q8VUT0      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q8VW85_PSEPU | Q8VW85      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q5P0U9_AZOSE | Q5P0U9      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q5P5Q6_AZOSE | Q5P5Q6      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q4K966_PSEF5 | Q4K966      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q3KBY9_PSEPF | Q3KBY9      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q2BKZ1_9GAMM | Q2BKZ1      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q2BHT3_9GAMM | Q2BHT3      |
| Dehyd-heme_bind~DUF1927~DUF1928 | Q1I9C7_PSEE4 | Q1I9C7      |
| Dehyd-heme_bind~DUF1927~DUF1928 | A1FCF3_PSEPU | A1FCF3      |
| Dehyd-heme_bind~DUF1927~DUF1928 | A1B2Q6_PARDP | A1B2Q6      |
| Dehyd-heme_bind~DUF1927~DUF1928 | A1K4V1_AZOSB | A1K4V1      |
+---------------------------------+--------------+-------------+</pre>
    </fieldset>

    <hr />
    
    <h2>Annotation information for a family</h2>

    <img class="tables"
         alt="Literature references"
         src="[% c.uri_for( "/static/images/db_schema/Lit_ref.png" ) %]" />

    <p>
      In addition to the Pfam annotation for each family, we also store 
      InterPro annotation and their associated GO terms for each family. Links 
      to other databases (e.g. SCOP) are also stored where appropriate.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the Pfam annotation and family information for the family 
      &#39;CBS&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT * FROM pfamA WHERE pfamA_id = 'CBS' \G
      auto_pfamA: 124
       pfamA_acc: PF00571
        pfamA_id: CBS
     description: CBS domain pair
    model_length: 114
          author: Bateman A
     seed_source: [1]
alignment_method: Manual
            type: Domain
  ls_sequence_GA: 19.5000
    ls_domain_GA: 19.5000
  fs_sequence_GA: 20.7000
    fs_domain_GA: 20.7000
  ls_sequence_TC: 19.5000
    ls_domain_TC: 19.5000
  fs_sequence_TC: 20.7000
    fs_domain_TC: 20.7000
  ls_sequence_NC: 19.4000
    ls_domain_NC: 19.4000
  fs_sequence_NC: 20.6000
    fs_domain_NC: 20.6000
           ls_mu: -57.9224
        ls_kappa: 0.2126
           fs_mu: -9.4208
        fs_kappa: 0.6305
         comment:  CBS domains are small intracellular modules that pair ...
     previous_id: NULL
     hmmbuild_ls: hmmbuild -F --hand HMM_ls SEED
 hmmcalibrate_ls: hmmcalibrate --cpu 1 --seed 0 HMM_ls
     hmmbuild_fs: hmmbuild -f -F --hand HMM_fs SEED
 hmmcalibrate_fs: hmmcalibrate --cpu 1 --seed 0 HMM_fs
        num_seed: 0
        num_full: 0
         updated: 2008-01-29 19:23:10
         created: 2003-04-07 12:59:11
         version: NULL</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the interpro annotation for the family &#39;CBS&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT interpro_id, \
              abstract \
       FROM   interpro, \
              pfamA \
       WHERE  pfamA.auto_pfamA = interpro.auto_pfamA \
       AND    pfamA_id = &#39;CBS&#39;\G
interpro_id: IPR000644
   abstract: CBS (cystathionine-beta-synthase) domains are small ...
         </pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the gene ontology (GO) annotation and family information for 
      the family &#39;p450&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT go_id, \
              term, \
              category \
       FROM   gene_ontology AS go, \
              pfamA AS p \
       WHERE  go.auto_pfamA = p.auto_pfamA \
       AND    pfamA_id = &#39;p450&#39;;
+------------+------------------------+----------+
| go_id      | term                   | category |
+------------+------------------------+----------+
| GO:0020037 | heme binding           | function |
| GO:0005506 | iron ion binding       | function |
| GO:0006118 | electron transport     | process  |
| GO:0004497 | monooxygenase activity | function |
+------------+------------------------+----------+
      </pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the literature references for the family &#39;CBS&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamA_literature_references.comment, \
              order_added, \
              medline, \
              title, \
              literature_references.author, \
              journal \
       FROM   pfamA, \
              pfamA_literature_references, \
              literature_references \
       WHERE  pfamA_id = &#39;CBS&#39; \
       AND    pfamA.auto_pfamA = pfamA_literature_references.auto_pfamA \
       AND    pfamA_literature_references.auto_lit = literature_references.auto_lit \G
*************************** 1. row ***************************
    comment: NULL
order_added: 4
    medline: 11524006
      title: Regulation of human cystathionine beta-synthase by S-adenosyl-L-methionine: evidence for two catalytically active conformations involving an autoinhibitory domain in the C-terminal region.
     author: Janosik M, Kery V, Gaustadnes M, Maclean KN, Kraus JP
    journal: Biochemistry 2001;40:10625-10633.
*************************** 2. row ***************************
    comment: Discovery of CBS domain.
order_added: 3
    medline: 9106071
      title: CBS domains in ClC chloride channels implicated in myotonia and nephrolithiasis (kidney stones).
     author: Ponting CP;
    journal: J Mol Med 1997;75:160-163.
*************************** 3. row ***************************
    comment: 3D Structure found as a sub-domain in TIM barrel ofinosine-monophosphate dehydrogenase.
order_added: 2
    medline: 10200156
      title: Characteristics and crystal structure of bacterial inosine-5'-monophosphate dehydrogenase.
     author: Zhang R, Evans G, Rotella FJ, Westbrook EM, Beno D, Huberman E, Joachimiak A, Collart FR;
    journal: Biochemistry 1999;38:4691-4700.
*************************** 4. row ***************************
    comment: Discovery and naming of the CBS domain.
order_added: 1
    medline: 9020585
      title: The structure of a domain common to archaebacteria and the homocystinuria disease protein.
     author: Bateman A;
    journal: Trends Biochem Sci 1997;22:12-13.
*************************** 5. row ***************************
    comment: NULL
order_added: 5
    medline: 14722619
      title: CBS domains form energy-sensing modules whose binding of adenosine ligands is disrupted by disease mutations.
     author: Scott JW, Hawley SA, Green KA, Anis M, Stewart G, Scullion GA, Norman DG, Hardie DG;
    journal: J Clin Invest 2004;113:274-284.
*************************** 6. row ***************************
    comment: NULL
order_added: 6
    medline: 14722609
      title: Bateman domains and adenosine derivatives form a binding contract.
     author: Kemp BE;
    journal: J Clin Invest 2004;113:182-184.
6 rows in set (0.18 sec)</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the database references for the family &#39;A2M&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT db_id, \
              pfamA_database_links.comment, \
              db_link, \
              other_params \
       FROM   pfamA, \
              pfamA_database_links \
       WHERE  pfamA_id = &#39;A2M&#39; \
       AND    pfamA.auto_pfamA = pfamA_database_links.auto_pfamA;
+----------+---------+-----------+--------------+
| db_id    | comment | db_link   | other_params |
+----------+---------+-----------+--------------+
| HOMSTRAD | NULL    | A2M_B     |              |
| HOMSTRAD | NULL    | A2M_A     |              |
| SCOP     | NULL    | 1c3d      | fa;          |
| PROSITE  | NULL    | PDOC00440 |              |
+----------+---------+-----------+--------------+</pre>
    </fieldset>

    <p>
      <strong>Note:</strong> The <span class="column">other_params</span> 
      column contains &#39;fa;&#39; where the Pfam family corresponds to a 
      SCOP family, and &#39;sf;&#39; where the Pfam family corresponds to 
      a SCOP superfamily.
    </p>

    <hr />

    <h2>Clan data</h2>

    <img class="tables"
         alt="Clan table"
         src="[% c.uri_for( "/static/images/db_schema/Clan.png" ) %]" />

    <p>
      A clan contains a set of related Pfam-A families. The information we use 
      to determine which families belong to the same clan include related 
      structure, related function, matching of the same sequence to HMMs from 
      different families and profile-profile comparisons. Note that not all 
      Pfam-A families belong to a clan.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the ID of the clan to which Pfam family &#39;EGF&#39; belongs
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT clan_id, \
              clan_acc \
       FROM   clans, \
              clan_membership, \
              pfamA \
       WHERE  clans.auto_clan = clan_membership.auto_clan \
       AND    clan_membership.auto_pfamA = pfamA.auto_pfamA \
       AND    pfamA.pfamA_id = &#39;EGF&#39;;
+---------+----------+
| clan_id | clan_acc |
+---------+----------+
| EGF     | CL0001   |
+---------+----------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the Pfam-A families that belong to clan &#39;CL0001&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamA_acc, \
              pfamA_id \
       FROM   clans, \
              clan_membership, \
              pfamA \
       WHERE  clans.auto_clan = clan_membership.auto_clan \
       AND    clan_membership.auto_pfamA = pfamA.auto_pfamA \
       AND    clan_acc = &#39;CL0001&#39;;
+-----------+-----------------+
| pfamA_acc | pfamA_id        |
+-----------+-----------------+
| PF07645   | EGF_CA          |
| PF04863   | EGF_alliinase   |
| PF07974   | EGF_2           |
| PF09120   | EGF-like_subdom |
| PF00008   | EGF             |
| PF09289   | FOLN            |
| PF00053   | Laminin_EGF     |
| PF09064   | Tme5_EGF_like   |
+-----------+-----------------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the clan description and comment for clan &#39;CL0001&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT clan_acc, \
              clan_id, \
              clan_description, \
              clan_comment \
       FROM   clans \
       WHERE  clan_acc = &#39;CL0001&#39; \G
        clan_acc: CL0001
         clan_id: EGF
clan_description: EGF superfamily
    clan_comment: Members of this clan all belong to the EGF superfamily  ...
      </pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the literature references for clan &#39;CL0001&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT comment, \
              order_added, \
              medline, \
              title, \
              author, \
              journal \
       FROM   clans, \
              literature_references, \
              clan_lit_refs \
       WHERE  clans.auto_clan = clan_lit_refs.auto_clan \
       AND    clan_lit_refs.auto_lit = literature_references.auto_lit \
       AND    clan_acc = &#39;CL0001&#39; \G
*************************** 1. row ***************************
    comment: NULL
order_added: 2
    medline: 11852228
      title: Domain structure and organisation in extracellular matrix proteins.
     author: Hohenester E, Engel J;
    journal: Matrix Biol 2002;21:115-128.
*************************** 2. row ***************************
    comment: NULL
order_added: 1
    medline: 3282918
      title: Structure and function of epidermal growth factor-like regions in proteins.
     author: Appella E, Weber IT, Blasi F;
    journal: FEBS Lett 1988;231:1-4.</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the first 5 architectures for the clan &#39;CL0001&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT architecture, \
              type_example, \
              no_seqs \
       FROM   architecture, \
              clan_architecture, \
              clans \
       WHERE  architecture.auto_architecture = clan_architecture.auto_architecture \
       AND    clan_architecture.auto_clan = clans.auto_clan \
       AND    clan_acc = &#39;CL0001&#39;
       LIMIT  5 \G
*************************** 1. row ***************************
architecture: Ldl_recept_a~EGF_CA~Ldl_recept_b~Ldl_recept_a~EGF~Ldl_recept_b~EGF~Ldl_recept_b
type_example: 2403803
     no_seqs: 1
*************************** 2. row ***************************
architecture: EGF_CA~Pkinase_Tyr~Pkinase_Tyr~Pkinase_Tyr
type_example: 1309029
     no_seqs: 1
*************************** 3. row ***************************
architecture: EGF_CA~GPS~7tm_2
type_example: 168833
     no_seqs: 11
*************************** 4. row ***************************
architecture: EGF_CA~EGF_CA~EGF_CA~Sushi~Sushi~Sushi~Sushi
type_example: 1486049
     no_seqs: 1
*************************** 5. row ***************************
architecture: EGF~EGF~EGF~EGF~EGF_CA~EGF~EGF~EGF_CA~EGF~EGF~EGF_CA~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~EGF~Notch~Notch~Notch~NOD~NODP~Ank
type_example: 57059
     no_seqs: 1</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the database links for clan &#39;CL0001&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT db_id, \
              comment, \
              db_link, \
              other_params \
       FROM   clan_database_links, \
              clans \
       WHERE  clan_database_links.auto_clan = clans.auto_clan \
       AND    clan_acc = &#39;CL0001&#39;;
+-------+---------+------------+--------------+
| db_id | comment | db_link    | other_params |
+-------+---------+------------+--------------+
| SCOP  | NULL    | 57196      |              |
| CATH  | NULL    | 2.10.25.10 |              |
+-------+---------+------------+--------------+</pre>
    </fieldset>

    <hr />

    <h2>Dead families and clans</h2>

    <img class="tables"
         alt="Dead families"
         src="[% c.uri_for( "/static/images/db_schema/Dead.png" ) %]" />

    <p>
      Sometimes we find that two or more families within Pfam can be merged 
      into a single family, which leads to the deletion of Pfam-A families. 
      The <span class="table">dead_families</span> and 
      <span class="table">dead_clans</span> tables contain information about 
      families and clans that have been deleted. These tables may be of use if 
      you need to track what happened to the members of a particular family 
      that is no longer in Pfam.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the information about &#39;dead&#39; Pfam-A family 
      &#39;PF06700&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT * FROM dead_families WHERE pfamA_acc = &#39;PF06700&#39;;
+-----------+-----------------+---------------------------------+------------+
| pfamA_acc | pfamA_id        | comment                         | forward_to |
+-----------+-----------------+---------------------------------+------------+
| PF06700   | 2oxo_fer_oxidoB |  Merged into TPP binding domain | PF02775    |
+-----------+-----------------+---------------------------------+------------+</pre>
    </fieldset>

    <hr />

    <h2>Hidden Markov model (HMM) tables</h2>

    <img class="tables"
         alt="HMM tables"
         src="[% c.uri_for( "/static/images/db_schema/Hmm.png" ) %]" />

    <p>
      The tables <span class="table">pfamA_HMM_ls</span> and 
      <span class="table">pfamA_HMM_ls</span> contain the HMMs for the global 
      and fragment models respectively. It is unlikely that you will need to 
      query these tables. The table <span class="table">pfamA_web</span> 
      contains information about the percentage identity, average length and 
      average coverage for a Pfam-A family.
    </p>

    <hr />

    <h2>Nested domains</h2>

    <img class="tables"
         alt="Nested domains"
         src="[% c.uri_for( "/static/images/db_schema/Nested.png" ) %]" />

    <p>
      Some domains in Pfam are disrupted by the insertion of another domain 
      (or domains) within them. The domain that is inserted into another is 
      known as a nested domain.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the nested domains and the domains in which they are nested 
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT A.pfamA_id, \
              B.pfamA_id AS nested_domain \
       FROM   pfamA AS A, \
              pfamA AS B, \
              nested_domains \
       WHERE  A.auto_pfamA = nested_domains.auto_pfamA \
       AND    B.auto_pfamA = nested_domains.nests_auto_pfamA;
+-----------------+-----------------+
| pfamA_id        | nested_domain   |
+-----------------+-----------------+
| IMPDH           | CBS             |
| PAP_central     | NTP_transf_2    |
| Peptidase_M10   | fn2             |
| UCH             | zf-MYND         |
| Radical_SAM     | Fer4            |
| Asp             | SapB_1          |
| Asp             | SapB_2          |
| HhH-GPD         | HHH             |
| Peptidase_S8    | PA              |
| CAF1            | R3H             |
| CAF1            | zf-CCCH         |
| RNA_pol_Rpb1_5  | RNA_pol_Rpb1_7  |
...</pre>
    </fieldset>

    <hr />
    
    <h2>Structural data</h2>

    <img class="tables"
         alt="PDB table"
         src="[% c.uri_for( "/static/images/db_schema/Pdb.png" ) %]" />

    <p>
      In order for the <a class="ext" href="http://www.wwpdb.org/">Protein 
        DataBank</a> (PDB) information to be useful to Pfam,
      we need to map between PDB residues and UniProtKB sequence residues. 
      This is not a trivial task and this mapping information is provided by the 
      <a class="ext" href="http://www.ebi.ac.uk/msd/">
        Macromolecular Structure Database</a> (MSD) group. The 
      <span class="table">msd_data</span> table contains this 
      residue-by-residue mapping.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the PDB information for structure &#39;2abl&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pdb_id, \
              header, \
              title \
       FROM   pdb \
       WHERE  pdb_id = &#39;2abl&#39;;
+--------+-------------+-------------------------------------------------------------+
| pdb_id | header      | title                                                       |
+--------+-------------+-------------------------------------------------------------+
| 2abl   | TRANSFERASE |    SH3-SH2 DOMAIN FRAGMENT OF HUMAN BCR-ABL TYROSINE KINASE |
+--------+-------------+-------------------------------------------------------------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the first 10 residue mappings for the structure &#39;2abl&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pdb_id, \
              pdb_res, \
              pdb_seq_number, \
              pfamseq_acc, pfamseq_res, pfamseq_seq_number from msd_data, pdb, pfamseq where pdb.auto_pdb=msd_data.auto_pdb and pfamseq.auto_pfamseq=msd_data.auto_pfamseq and pdb_id=&#39;2abl&#39; limit 10;
+--------+---------+----------------+-------------+-------------+--------------------+
| pdb_id | pdb_res | pdb_seq_number | pfamseq_acc | pfamseq_res | pfamseq_seq_number |
+--------+---------+----------------+-------------+-------------+--------------------+
| 2abl   | GLY     |             76 | P00519      | G           |                 57 |
| 2abl   | PRO     |             77 | P00519      | P           |                 58 |
| 2abl   | SER     |             78 | P00519      | S           |                 59 |
| 2abl   | GLU     |             79 | P00519      | E           |                 60 |
| 2abl   | ASN     |             80 | P00519      | N           |                 61 |
| 2abl   | ASP     |             81 | P00519      | D           |                 62 |
| 2abl   | PRO     |             82 | P00519      | P           |                 63 |
| 2abl   | ASN     |             83 | P00519      | N           |                 64 |
| 2abl   | LEU     |             84 | P00519      | L           |                 65 |
| 2abl   | PHE     |             85 | P00519      | F           |                 66 |
+--------+---------+----------------+-------------+-------------+--------------------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me the structural data for the family &#39;CBS&#39;
    </fieldset>
    
    <fieldset class="sql">
      <legend>SQL</legend>
      <span style="color: #F00; font-weight: bold">BROKEN QUERY</span>
      <pre>mysql> SELECT pdb_id, \
              chain, \
              pdb_start_res, \
              pdb_end_res from pdb, \
              pdbmap, \
              pfamA \
       WHERE  pfamA_id = &#39;CBS&#39; \
       AND    pfamA.auto_pfamA = pdbmap.auto_pfam \
       AND    pfam_region = &#39;1&#39; \
       AND    pdbmap.auto_pdb = pdb.auto_pdb;
+--------+-------+---------------+-------------+
| pdb_id | chain | pdb_start_res | pdb_end_res |
+--------+-------+---------------+-------------+
| 1o50   | A     | 8             | 140         |
| 1nfb   | B     | 112           | 232         |
| 1nfb   | A     | 112           | 232         |
| 1b3o   | B     | 112           | 232         |
| 1jr1   | A     | 112           | 232         |
| 1jcn   | A     | 112           | 232         |
| 1jcn   | B     | 112           | 232         |
| 1lrt   | C     | 25            | 88          |
| 1lrt   | A     | 25            | 88          |
...</pre>
    </fieldset>

    <hr />

    <h2>Genomes</h2>

    <img class="tables"
         alt="Genome tables"
         src="[% c.uri_for( "/static/images/db_schema/Genome.png" ) %]" />

    <p>
      The tables in this section allow you to retrieve domain information about
      a particular species, or to retrieve all of the species which contain a 
      partciular Pfam domain.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Return all the species and basic Pfam information for &#39;bacteria&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>
mysql> SELECT   ncbi_code, \
                species, \
                num_distinct_regions, \
                num_total_regions, \
                num_proteins, \
                sequence_coverage, \
                residue_coverage, \
                total_genome_proteins \
       FROM     genome_species \
       WHERE    grouping LIKE &#39;%Bacteria%&#39; \
       ORDER BY species \G
*************************** 1. row ***************************
            ncbi_code: 62977
              species: Acinetobacter sp. (strain ADP1)
 num_distinct_regions: 1394
    num_total_regions: 3105
         num_proteins: 2388
    sequence_coverage: 72
     residue_coverage: 56
total_genome_proteins: 3302
*************************** 2. row ***************************
            ncbi_code: 180835
              species: Agrobacterium tumefaciens (strain C58 / ATCC 33970 (Washington University))
 num_distinct_regions: 1644
    num_total_regions: 5184
         num_proteins: 4077
    sequence_coverage: 76
     residue_coverage: 59
total_genome_proteins: 5397</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all the Pfam-A domains for the species 
      &#39;Arabidopsis thaliana&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT   genome_seqs.auto_pfamA, \
                pfamA_acc, \
                pfamA_id, \
                description, \
                sum(count) \
       FROM     genome_seqs, \
                pfamA \
       WHERE    genome_seqs.ncbi_code = &#39;3702&#39; \
       AND      genome_seqs.auto_pfamA = pfamA.auto_pfamA \
       GROUP BY genome_seqs.auto_pfamA;
+------------+-----------+--------------+-----------------------------------------------------------------+------------+
| auto_pfamA | pfamA_acc | pfamA_id     | description                                                     | sum(count) |
+------------+-----------+--------------+-----------------------------------------------------------------+------------+
|          1 | PF00389   | 2-Hacid_dh   | D-isomer specific 2-hydroxyacid dehydrogenase, catalytic domain |          9 |
|          2 | PF00198   | 2-oxoacid_dh | 2-oxoacid dehydrogenases acyltransferase (catalytic domain)     |         10 |
|          4 | PF03171   | 2OG-FeII_Oxy | 2OG-Fe(II) oxygenase superfamily                                |        118 |
|          5 | PF01073   | 3Beta_HSD    | 3-beta hydroxysteroid dehydrogenase/isomerase family            |          4 |
|          6 | PF04419   | 4F5          | 4F5 protein family                                              |          1 |
|          7 | PF03061   | 4HBT         | Thioesterase superfamily                                        |         12 |
|         11 | PF01661   | Macro        | Macro domain                                                    |          3 |
|         13 | PF00962   | A_deaminase  | Adenosine/AMP deaminase                                         |          2 |
|         14 | PF01490   | Aa_trans     | Transmembrane amino acid transporter protein                    |         49 |
|         15 | PF00004   | AAA          | ATPase family associated with various cellular activities (AAA) |        121 |
...</pre>
    </fieldset>
    
    <p>
      <strong>Note:</strong> The <span class="column">ncbi_code</span> for the 
      species &#39;Arabidopsis thaliana&#39; is 3702. This information can be 
      found in the <span class="table">ncbi_taxonomy</span> table.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the UniProtKB protein sequences for the species 
      &#39;Arabidopsis thaliana&#39; 
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamseq.pfamseq_id \
       FROM   pfamseq, \
              genome_seqs \
       WHERE  pfamseq.ncbi_code = &#39;3702&#39; \
       AND    genome_seqs.auto_pfamseq = pfamseq.auto_pfamseq;
+-------------+
| pfamseq_id  |
+-------------+
| 12S1_ARATH  |
| 12S2_ARATH  |
| 14331_ARATH |
| 14332_ARATH |
| 14333_ARATH |
| 14334_ARATH |
| 14335_ARATH |
| 14336_ARATH |
| 14337_ARATH |
...</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the UniProtKB protein sequences from the species 
      &#39;Arabidopsis thaliana&#39; that belong to Pfam-A domain 
      &#39;PF00106&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamseq.pfamseq_id \
       FROM   pfamseq, \
              genome_seqs, \
              pfamA \
       WHERE  genome_seqs.ncbi_code = &#39;3702&#39; \
       AND    genome_seqs.auto_pfamseq = pfamseq.auto_pfamseq \
       AND    genome_seqs.auto_pfamA = pfamA.auto_pfamA \
       AND    pfamA_acc = &#39;PF00106&#39;;
+--------------+
| pfamseq_id   |
+--------------+
| FABG_ARATH   |
| PORA_ARATH   |
| PORB_ARATH   |
| PORC_ARATH   |
| O22985_ARATH |
| O49332_ARATH |
| O80711_ARATH |
| O80713_ARATH |
| O80714_ARATH |
| O80924_ARATH |
...</pre>
    </fieldset>

    <hr />

    <h2>Related families</h2>

    <img class="tables"
         alt="Related families"
         src="[% c.uri_for( "/static/images/db_schema/Prc.png" ) %]" />

    <p>
      <a class="ext" href="http://supfam.org/PRC/">PRC</a> and SCOOP are two 
      pieces of software that we use to determine which Pfam families are 
      related. The scores from these programs have been very useful in 
      deciding which Pfam-A families should belong to the same clan. As a 
      rough guide, a PRC E-value score of less than 0.001, or a SCOOP 
      score greater than 50 shows that two families are closely related.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the Pfam-A families that have a PRC E-value score of less 
      than 0.001 for the pfamA family &#39;ABC1&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT A.pfamA_id, \
              B.pfamA_id, \
              model_start1, \
              model_end1, \
              length1, \
              model_start2, \
              model_end2, \
              length2, \
              evalue \
       FROM   pfamA AS A, \
              pfamA AS B, \
              pfamA2pfamA_PRC_results \
       WHERE  A.auto_pfamA = pfamA2pfamA_PRC_results.auto_pfamA1 \
       AND    B.auto_pfamA = pfamA2pfamA_PRC_results.auto_pfamA2 \
       AND    evalue &lt; 1e-03 \
       AND    A.pfamA_id = &#39;ABC1&#39;;
+----------+-------------+--------------+------------+---------+--------------+------------+---------+--------------+
| pfamA_id | pfamA_id    | model_start1 | model_end1 | length1 | model_start2 | model_end2 | length2 | evalue       |
+----------+-------------+--------------+------------+---------+--------------+------------+---------+--------------+
| ABC1     | Pkinase_Tyr |           17 |         57 |      41 |            5 |         52 |      48 | 1.284523e-04 |
| ABC1     | Pkinase     |           17 |         43 |      27 |            5 |         31 |      27 | 2.537716e-04 |
| ABC1     | ABC1        |            1 |        126 |     126 |            1 |        126 |     126 | 3.600000e-68 |
+----------+-------------+--------------+------------+---------+--------------+------------+---------+--------------+</pre>
    </fieldset>

    <p>
      <strong>Note:</strong> The <span class="column">model_start</span> and 
      <span class="column">model_end</span> values let you know which region of 
      the models are similar.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the Pfam-A families that have a PRC E-value score of less 
      than 0.001 when compared to the Pfam-B family &#39;PB007609&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <span style="color: #F00; font-weight: bold">THIS QUERY GIVES NO RESULTS</span>
      <pre>mysql> SELECT pfamB_acc, \
              pfamA_id, \
              model_start1, \
              model_end1, \
              length1, \
              model_start2, \
              model_end2, \
              length2, \
              evalue \
       FROM   pfamB AS b, \
              pfamB2pfamA_PRC_results AS ab, \
              pfamA AS a\
       WHERE  b.auto_pfamB = ab.auto_pfamB \
       AND    ab.auto_pfamA = a.auto_pfamA \
       AND    evalue &lt; 1e-03 \
       AND    pfamB_acc = &#39;PB007609&#39;;
+-----------+----------------+--------------+------------+---------+--------------+------------+---------+--------------+
| pfamB_acc | pfamA_id       | model_start1 | model_end1 | length1 | model_start2 | model_end2 | length2 | evalue       |
+-----------+----------------+--------------+------------+---------+--------------+------------+---------+--------------+
| PB007609  | Ala_racemase_N |           13 |         72 |      60 |            2 |         65 |      64 | 3.600000e-09 |
+-----------+----------------+--------------+------------+---------+--------------+------------+---------+--------------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the Pfam-B families that have a PRC E-value score of less 
      than 0.001 when compared to the Pfam-B family &#39;PB007609&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <span style="color: #F00; font-weight: bold">THIS QUERY GIVES NO RESULTS</span>
      <pre>mysql> SELECT a.pfamB_acc, \
              b.pfamB_acc, \
              model_start1, \
              model_end1, \
              length1, \
              model_start2, \
              model_end2, \
              length2, \
              evalue \
       FROM   pfamB AS a, \
              pfamB AS b, \
              pfamB2pfamB_PRC_results AS ab \
       WHERE  a.auto_pfamB = ab.auto_pfamB1 \
       AND    b.auto_pfamB = ab.auto_pfamB2 \
       AND    evalue &lt; 1e-03 \
       AND    a.pfamB_acc = &#39;PB006860&#39;;
+-----------+-----------+--------------+------------+---------+--------------+------------+---------+--------------+
| pfamB_acc | pfamB_acc | model_start1 | model_end1 | length1 | model_start2 | model_end2 | length2 | evalue       |
+-----------+-----------+--------------+------------+---------+--------------+------------+---------+--------------+
| PB006860  | PB006860  |            1 |         62 |      62 |            1 |         62 |      62 | 1.300000e-44 |
+-----------+-----------+--------------+------------+---------+--------------+------------+---------+--------------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all pf the Pfam-A families that have a SCOOP score greater than 50 
      when compared to the family &#39;ABC1&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT a.pfamA_id, \
              b.pfamA_id, \
              score \
       FROM   pfamA AS a, \
              pfamA AS b, \
              pfamA2pfamA_scoop_results AS ab \
       WHERE  a.auto_pfamA = ab.auto_pfamA1 \
       AND    b.auto_pfamA = ab.auto_pfamA2 \
       AND    a.pfamA_id = &#39;ABC1&#39; \
       AND    score &gt; 50;
+----------+----------+---------+
| pfamA_id | pfamA_id | score   |
+----------+----------+---------+
| ABC1     | Pkinase  | 50.1553 |
| ABC1     | RIO1     | 71.0121 |
+----------+----------+---------+</pre>
    </fieldset>

    <hr />
    
    <h2>NCBI data</h2>

    <img class="tables"
         alt="Version table"
         src="[% c.uri_for( "/static/images/db_schema/Ncbiseq.png" ) %]" />

    <p>
      In addition to searching all of the sequences in UniProtKB, we also 
      search the protein sequences from NCBI against Pfam. The 
      <span class="table">ncbi_pfamA_reg</span> tables contains all of the 
      sequence regions (both significant and insignificant) that match each 
      HMM. The <span class="table">ncbi_map</span> table links the GI number
      to its corresponding UniProtKB entry(s). Note that not all GI numbers 
      have a corresponding UniProtKB entry.  
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the Pfam-A domains for NCBI protein 
      &#39;GI:1000125&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT pfamA_acc, \
              pfamA_id, \
              seq_start, \
              seq_end \
       FROM   ncbi_pfamA_reg, \
              pfamA \
       WHERE  ncbi_pfamA_reg.gi = &#39;1000125&#39; \
       AND    ncbi_pfamA_reg.auto_pfamA = pfamA.auto_pfamA \
       AND    in_full = 1;
+-----------+-----------+-----------+---------+
| pfamA_acc | pfamA_id  | seq_start | seq_end |
+-----------+-----------+-----------+---------+
| PF00069   | Pkinase   |       657 |     916 |
| PF00433   | Pkinase_C |       936 |     983 |
| PF02185   | HR1       |        47 |     119 |
| PF02185   | HR1       |       136 |     213 |
| PF02185   | HR1       |       217 |     294 |
+-----------+-----------+-----------+---------+</pre>
    </fieldset>

    <p>
      <strong>Note:</strong> The query must include &#39;in_full=1&#39; in
      order to retrieve only significant hits.
    </p>
 
    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the NCBI protein domains for the 
      Pfam-A family &#39;AalphaY_MDB&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>mysql> SELECT gi, \
              seq_start, \
              seq_end, \
              pfamA_id \
       FROM   pfamA, \
              ncbi_pfamA_reg \
       WHERE  pfamA_id = &#39;AalphaY_MDB&#39; \
       AND    pfamA.auto_pfamA = ncbi_pfamA_reg.auto_pfamA \
       AND    in_full = 1;
+---------+-----------+---------+-------------+
| gi      | seq_start | seq_end | pfamA_id    |
+---------+-----------+---------+-------------+
| 8650517 |         1 |     147 | AalphaY_MDB |
| 2314885 |         1 |     149 | AalphaY_MDB |
|  169861 |         1 |     146 | AalphaY_MDB |
|  169855 |         1 |     146 | AalphaY_MDB |
|  169857 |         1 |     147 | AalphaY_MDB |
+---------+-----------+---------+-------------+</pre>
    </fieldset>

    <p>
      <strong>Note:</strong> The query must include &#39;in_full=1&#39; in
      order to retrieve only significant hits.
    </p>
    
    <hr />
 
    <h2>Metagenomics data</h2>

    <img class="tables"
         alt="Metaseq tables"
         src="[% c.uri_for( "/static/images/db_schema/Metaseq.png" ) %]" />

    <p>
      We have searched a set of metagenomics seqeuences against Pfam. The 
      metagenomics sequences that we searched are found in the 
      <span class="table">metaseq</span> table. Note that the 
      <span class="table">meta_pfamA_reg</span> table is different to the 
      <span class="table">ncbi_pfamA_reg</span> and 
      <span class="table">pfamA_reg_full</span> tables in that it contains 
      only significant data.
    </p>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the Pfam-A domains for metagenomics protein 
      &#39;JCVI_ORF_1096665732460&#39; 
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>
mysql> SELECT pfamA_acc, \
              pfamA_id, \
              seq_start, \
              seq_end \
       FROM   metaseq, \
              pfamA, \
              meta_pfamA_reg \
       WHERE  metaseq_id = &#39;JCVI_ORF_1096665732460&#39; \
       AND    metaseq.auto_metaseq = meta_pfamA_reg.auto_metaseq \
       AND    meta_pfamA_reg.auto_pfamA = pfamA.auto_pfamA;
+-----------+-----------+-----------+---------+
| pfamA_acc | pfamA_id  | seq_start | seq_end |
+-----------+-----------+-----------+---------+
| PF02934   | GatB_N    |         1 |      65 |
| PF01162   | GatB      |        82 |     150 |
| PF02637   | GatB_Yqey |       151 |     284 |
+-----------+-----------+-----------+---------+</pre>
    </fieldset>

    <fieldset class="query">
      <legend>Example query</legend>
      Give me all of the metagenomics domains for the family &#39;3-alpha&#39;
    </fieldset>
      
    <fieldset class="sql">
      <legend>SQL</legend>
      <pre>
mysql> SELECT metaseq_id, \
              seq_start, \
              seq_end, \
              pfamA_id \
       FROM   pfamA, \
              metaseq, \
              meta_pfamA_reg \
       WHERE  pfamA_id = &#39;3-alpha&#39; \
       AND    pfamA.auto_pfamA = meta_pfamA_reg.auto_pfamA \
       AND    meta_pfamA_reg.auto_metaseq = metaseq.auto_metaseq;
+------------------------+-----------+---------+----------+
| metaseq_id             | seq_start | seq_end | pfamA_id |
+------------------------+-----------+---------+----------+
| JCVI_ORF_1096672077456 |       120 |     166 | 3-alpha  |
| JCVI_ORF_1096672196106 |       133 |     178 | 3-alpha  |
| JCVI_ORF_1096687352712 |       172 |     218 | 3-alpha  |
| JCVI_ORF_1096685142424 |       172 |     218 | 3-alpha  |
| JCVI_ORF_1096690616764 |        16 |      62 | 3-alpha  |
| JCVI_ORF_1096700525628 |       183 |     229 | 3-alpha  |
| JCVI_ORF_1096670986256 |        46 |      92 | 3-alpha  |
+------------------------+-----------+---------+----------+</pre>
    </fieldset>

  </div>
</div>

<!-- end database block -->

[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: Rob Finn (rdf@sanger.ac.uk), John Tate (jt6@sanger.ac.uk)

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
-%]
