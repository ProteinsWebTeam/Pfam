[%
META naked = 1;
%]

// Javascript object which draws structure in the browser using Jmol;
//
// StructureViewer.js
//
// $Id$

//------------------------------------------------------------------------------
//- OBJECT ---------------------------------------------------------------------
//------------------------------------------------------------------------------

// spoof a console, if necessary, so that we can run in IE (<8) without having
// to entirely disable debug messages
if ( ! window.console ) {
  window.console     = {};
  window.console.log = function() {};
}  

//------------------------------------------------------------------------------
//- class ----------------------------------------------------------------------
//------------------------------------------------------------------------------

var StructureViewer = Class.create({
  /**
   * @lends StructureViewer#
   * 
   * @author Prasad Gunasekaran
   * @author John Tate
   * @author Rob Finn
   * 
   * @class 
   * A Javascript library which generates a structure widget which inturn holds the 
   * applet generated by Jmol library and embeds into the page.
   * 
   * @description  Creates a StructureViewer object which makes request to the server with
   * the input accession and retrieves the set of PDB-ids which are similar to it. Then, the 
   * Jmol library is used to create an applet and the PDB structure is loaded in to it.
   * Ultimately, all the Elements created are added as a child element to the input parent element.
   * 
   * @constructs
   * @param {String} parent
   * @param {String} accession
   * @param {String} url
   * @param {String} jmolUrl
   * @param {Object} options
   */
  initialize: function( parent, accession, url, jmolUrl, options ){
    
    // console.log( 'initialize: begins');
    
    // check for an existing DOM element;
    if( parent !== undefined ){
      this.setParent( parent );
    }else{
      this._throw( 'parent cannot be null' );
    }
    
    // check for accession;
    if( accession !== undefined ){
      this.setAccession( accession );  
    }else{
      this._throw( 'Accession cannot be null' );
    }
    
    // add the url
    if( /[\£\$\*\^]+/.test( jmolUrl ) ){
      this._throw( "Input URL contains invalid characters");
    }else{
      this._jmolUrl = jmolUrl;
    } 
    
     // add the jmol url
    if( /[\£\$\*\^]+/.test( url ) ){
      this._throw( "Input URL contains invalid characters");
    }else{
      this._url = url;
    }
    
    // now make a request and fetch the strucutres which are similar to the uniprot sequences;
    this.fetchStructures();
    
  },  // end of initialize;
  
  //------------------------------------------------------------------------------
  //- Methods --------------------------------------------------------------------
  //------------------------------------------------------------------------------
  /**
   * Method which makes a GET request to the server to fetch the list of PDB-ids which
   * are similar to the input accession.
   */
  // method which fetches the structures which are similar to the accession;
  fetchStructures: function(){
    var that = this;
    
    // now create the query string and make a request;
    var queryString = this._url + '?acc=' + this._accession;
    // console.log( 'fetchStructures: the queryString is |%s|',queryString );
    
    // now make the request using YAHOO get;
    var objTransaction = YAHOO.util.Get.script( queryString, {
      onSuccess: function( response ){
        
        // remove the script tag from beign added to the DOM,
        response.purge();
        
        if( typeof structure === 'string' ){
          // console.log( '****the type of structure is '+ typeof structure +'|'+structure );  
          that._parent.update( structure );
          
          // now set the readystate to false;
          that.setReadyState( false );
          
        }else{
          
          //that._parent.update( "Structures similar to <strong>"+that._accession+"</strong>" );
          
          // now add the response to another function;
          that.ParseStructures( structure );
          
          // now set the readyState to true;
          that.setReadyState( true );  
        }
        
        // show the element;
        that._parent.show(); 
        
        // Its an extra overhead, as sometimes the parent element might be hidden;
        that._parent.up(0).show();
        
      } // end of onsuccess;
      
    } );  // end of objTransaction;
  },
  
  //----------------------------------------------------------------------------
  /**
   * Callback function which parses the structure and instantiates the Jmol applet
   * to show the 3d structure.
   * @param {Object} structure
   */
  // method which retrieves the structures and parses it;
  ParseStructures: function( structure ){
    
    var selectEl = new Element( 'select',{ 'id': 'pdb_id' } );
    
    // while walking down the strucutre array, build a new processed structures hash;
    var processedStructure = new Hash();
    
    // walk down the array to get the vales;
    $A( structure ).each( function( pdb ){
      // console.log( 'the acc, start, end is |%s|%d|%d| ', pdb.acc, pdb.start, pdb.end );
      
      processedStructure.set( pdb.acc, pdb );
      // now create the option element and add as child of select;
      var optEl = new Element( 'option',{ 'value': pdb.acc } );
      optEl.update( pdb.acc );
      
      selectEl.appendChild( optEl );
        
    } );
    
    this._processedStructure = processedStructure;
    // console.log('the processed Strucutre is '+ this._processedStructure.inspect() );
    
    // no add this to the selectEl to the object;
    this._selectEl = selectEl ;
    
    // now create an element for the applet 
    this.appletElement();
    
    // now add listeners to the selectEl;
    this._addListeners();
    
    // initializing options for JMOL;
    jmolSetDocument( 0 );
    jmolInitialize( this._jmolUrl ); // REQUIRED
    jmolSetAppletColor( 'cyan' );
    
    // create an JMOL applet & set the chain for ref;
    this.setShownStructure( this._selectEl.value );
    //this._shownStructure = this._selectEl.value;
    this.jmolViewer( );
     
  },
  
  //----------------------------------------------------------------------------
  /**
   * Method to create Jmol command and exectutes it to show the structure in the applet.
   */
  // function to create the jmol viewer in the page;
  jmolViewer: function( ){
    
    // change the shown strcture to be this one;
    var pdb = this.getShownStructure();
    // console.log( 'new Strucutre to be shown '+ pdb );
    
    // now get the first 4 letters of the PDB id leaving the chain details;
    var list = /(\w{4})\.\w+/.exec( pdb );
     
    var pdb_id = list[1];
      
    var string = 'background white;load [% c.uri_for ("/structure/getpdb") %]?id=' + pdb_id;
    string += ';select all;cartoon on;cpk off; wireframe off;';
    
    // console.log( 'the string is '+ string );
    
    var myApplet = jmolApplet( 250, string, 'foo' );
    
    // now update the applet element with this value;
    this._appletEl.update( myApplet );
    
  },
  
  //----------------------------------------------------------------------------
  /**
   * Method to create a div element which holds the Jmol applet as its child element.
   */
  // function to create applet element;
  appletElement: function(){
    // console.log( 'Creating an element for applet ' );
    
    var appletId = new Element( 'div', { 'id': 'appletId' } );
    
    this._appletEl = appletId;
    
    this._parent.appendChild( appletId );
    
    this._parent.appendChild( this._selectEl );
    
  }, 
  
  //------------------------------------------------------------------------------
  //- Getters and Setters --------------------------------------------------------
  //------------------------------------------------------------------------------
  /**
   * Setter method to set the input parent which holds the structure widget
   * and throws exception, if its invalid
   * 
   * @param {String | Element } parent
   * @throws{ StructureViewerException } for invalid parent element.
   */
  // function to set parent;
  setParent: function( parent ){
    this._parent = $( parent );
    // console.log('the parent is '+this._parent.inspect() );
    
    if ( this._parent === undefined || this._parent === null ) {
      this._throw( "couldn't find the node"+parent );
    }else{
      this._parent.update();
    }
      
  },
  
  //--------------------------------------
  /**
   * Returns the input parent element
   * 
   * @returns the input parent element.
   */
  // function to get the parent;
  getParent: function(){
    return this._parent;
  },
  
  //----------------------------------------------------------------------------
  /**
   * Setter method to set the input accession 
   * and throws exception, if its invalid.
   * 
   * @param {String} accession
   * @throws{ StructureViewerException } for invalid accession.
   */
  // function to set the accession;
  setAccession: function( accession ){
    this._accession = accession;
    
    //check whether we get the accession as a string;
    if( this._accession === null ){
      this._throw( 'Accession cannot be null' );
    }
    
    // use regex to check we get any invalid characters in the string;
    if( /\W+/.test( this._accession ) ){
      this._throw( 'Accession contains invalid characters');
    }
    
    
  }, // end of setAccession
  
  //-------------------------------------
  /**
   * Returns the input accession.
   * 
   * @returns input accession.
   */
  // function to return the accession 
  getAccession: function(){
    return this._accession;
  },
  
  //----------------------------------------------------------------------------
  /**
   * Setter method to set the status of the widget.
   * @param {Boolean} status
   */
  
  // function to set the readyState of this object;
  setReadyState: function( status ){
    this._readyState = status;  
  },
  
  //--------------------------------------
  /**
   * Returns the ready state of the widget.
   * 
   * @returns ready state of the widget
   * 
   */
  getReadyState: function( ){
    return this._readyState;
  },
  
  //----------------------------------------------------------------------------
  /**
   * setter method to set the structure shown in the applet.
   * @param {String} pdb
   */
  // function to set the current shown structure;
  setShownStructure: function( pdb ){
    this._shownStructure = pdb;
  },
  
  //--------------------------------------
  /**
   * Method to return the pdb id of the shown structure.
   * @returns the pdb_id of the structure represented in the 
   */
  // fucntion to get the shown structure;
  getShownStructure: function(){
    return this._shownStructure;
  },
  
  //--------------------------------------
  /**
   * Method to say whether the structure has changed or not.
   */
  isStructureChanged: function(){
    return this._structureChanged;
  },
  
  //--------------------------------------
  /**
   * Setter method to set the flag when the structure is changed in the applet.
   * @param {boolean} bool
   */
  // function to set the status change of the structure;
  setStructureChange: function( bool ){
    this._structureChanged = bool;
  },
  
  //------------------------------------------------------------------------------
  //- Private Methods ------------------------------------------------------------
  //------------------------------------------------------------------------------
  /**
   * @Private
   * Event listener method to look whether the user has selected other PDB_id's, 
   * if so then it executes the Jmol command to load the new structure.  
   */
  
  // function to add event listeners for the select El;
  _addListeners: function(){
    
    this._selectEl.observe( 'change', function( ){
      
      // console.log( 'the selected option is '+ this._selectEl.value );
      
      this._structureChanged = true;
      
      this.setShownStructure( this._selectEl.value );
      
      // call the jmol viewer function with the pdb_id;
      this.jmolViewer( );
       
    }.bind( this ) );
  },
  
  //----------------------------------------------------------------------------
  /**
   * @Private 
   * Generates a customised exception and throws with the message.
   * 
   * @param {String} msg
   * @throws StructureViewerException with the specified message.
   */  
  _throw: function( msg ){
    throw {
      name: 'StructureViewerException',
      message:  msg,
      toString: function(){ return this.message }
    };
          
  }
  
} ); // end of Class.create;
