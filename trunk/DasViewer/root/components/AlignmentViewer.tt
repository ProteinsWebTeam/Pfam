[%
META naked = 1;
%]

// AlignmentViewer.js
//
// Javascript library which gets alignments and renders it in the browser.
//
// $Id$

//------------------------------------------------------------------------------
//- OBJECT ---------------------------------------------------------------------
//------------------------------------------------------------------------------

// spoof a console if necessitates for IE.
if( ! window.console ){
  window.console = {};
  window.console.log = function(){};
}

//------------------------------------------------------------------------------
//- class ----------------------------------------------------------------------
//------------------------------------------------------------------------------

var AlignmentViewer = Class.create({
  /**
   * @lends Alignment Viewer#
   * @author Prasad Gunasekaran
   * @author John Tate
   * @author Rob Finn
   * 
   * @class 
   * A Javascript library which generates alignment widget and embeds in to the web page.
   *
   * @description Creates an AlignmentViewer object which instantiates the customised version of 
   * livegrid, which handles the request and responses to the server and updates the elements
   * which are created by this object. A series of other calls are made to load the livegrid library, 
   * and the stylesheets dynamically.
   * 
   * @constructs
   * @param {String | Element } parent
   * @param {String} accession
   * @param {String} dsn
   * @param {Integer} size
   * @param {String} url
   * @param {Integer} rows
   * @param {Object} options
   */

  initialize: function( parent, accession, dsn, size, url,rows, options ){
    
    // console.log( 'initialize: begins');
    
    // check for an existing DOM element;
    if( parent !== undefined ){
      this.setParent( parent );
    }else{
      this._throw( 'parent cannot be null' );
    }
    
    // check for accession;
    if( accession !== undefined ){
      this.setAccession( accession );  
    }else{
      this._throw( 'Accession cannot be null' );
    }
     
    // check for dsn; 
    if( dsn !== undefined ){
      this.setDsn( dsn );
    }else{
      this._throw( 'dsn cannot be null' );
    }     
    
    // check for size; 
    if( size !== undefined ){
      this.setSize( size );
    }else{
      this._throw( 'size cannot be null' );
    }     
    
    // add the url
    if( /[\£\$\*\^]+/.test( url ) ){
      this._throw( "Input URL contains invalid characters");
    }else{
      this._url = url;
    } 
    
    // check whether user gave the input rows to be seen;
    if( rows !== undefined ){
      this._rowsToDisplay = rows;
    }else{
      // console.log( 'You havnt initialise the total rows to be seen, so setting it to 18' ); 
      this._rowsToDisplay = 21;
    }
    // also I need the CSS files to render the alignments in the page. 
    // so make a request to get the CSS files in the page using GET request;
    this._fetchCSS();
    
    // as LiveGrid library has been changed a lot, its better to load it using get request; 
    this._getLiveGrid();
    
    // now define the options;
    this.options = {};
    Object.extend( this.options, options || {} );
    
    // now create the child elements for generating grid;
    this.createChildren();
    // console.log('initialise: children created' );
    
    // add event listeners after the alignment is populated;
    this._addListeners();
    
    
  },  // end of initialize
  
  //------------------------------------------------------------------------------
  //- Methods --------------------------------------------------------------------
  //------------------------------------------------------------------------------
  /**
   * Instantiates the custom built <a href="http://www.chrisvandesteeg.nl/tmp/livegrid.js">livegrid</a> object  
   * ( which is heavily modified ) and retrieves the alignments to be shown in the widget.
   *  
   */
  // function to initialise the livegrid object and gets the alignment;
  fetchAlignments: function( ){
    
    var parent = this._parent;
    // console.log('fetchAlignments: begins' );
    
    // create the options required for making the request;
    var opts = {
      requestParameters:{
        accession: this._accession,
        dsn_name:  this._dsn,
        max_rows:  this._size
      },
      accessionsDiv: this._accDiv,
      sequencesDiv: this._seqDiv,
			scrollerDiv:  this._scroll,
      scrollvalue: 0,
      prefetchBuffer: true
    }; // end of options;
    
    // console.log('fetchAlignments: making a livegrid request with |%s|%d|%s|%s|%d|',this._gridDiv, this._size, this._url, opts.toString(),this._rowsToDisplay  );
    // now make an request using livegrid;
    //this._livegrid = new LiveGrid( this._gridDiv, 25, this._size, this._url, opts );
    this._livegrid = new LiveGrid( this._gridDiv, this._rowsToDisplay, this._size, this._url, opts );
    
    // set the timeout to check whether we get the alignments from the livegrid;
    this._timer = setInterval( this.checkAlignment.bind(this) , 500 );
    
  },
  
  //----------------------------------------------------------------------------
  /**
   * Creates div elements in a specific order and inserts into the DOM as the data
   * returned from the server is updated into these elements.
   */
  // function to create the children;
  createChildren: function( ){
    
    // with the current version of livegrid, I need the following structure
    //    <div id="grid">
    //      <div id="accessions"></div>
    //      <div id="sequences"></div>
    //    </div>
    //    <div id="scrollerDiv"></div>
    var grid         = new Element( 'div',{ 'id': 'grid' } );
    var highlighter  = new Element( 'div', { 'id': 'highlightColumn' } );
    var scroll       = new Element( 'div',{ 'id': 'scrollerDiv' } );
    var acc          = new Element( 'div',{ 'id': 'accessions' } );
    var seq          = new Element( 'div',{ 'id': 'sequences' } );
    
    // add the grid and the scroller to the DOM as children of parent;
    this._parent.appendChild( grid );
    this._parent.appendChild( scroll );
    
    // add the acc and seq as children of grid;
    grid.appendChild( highlighter );
    grid.appendChild( acc );
    grid.appendChild( seq );
    
    // now add the grid and other elements to the object;
    this._highlighter = highlighter;
    this._gridDiv = grid;
    this._accDiv  = acc;
    this._seqDiv  = seq;
    this._scroll  = scroll;
  },
  
  //----------------------------------------------------------------------------
  /**
   * @Private
   * Adds a event listener for scrolling, so that when new data is loaded, 
   * the original position was retained.
   */
  // function which adds event listeners
  _addListeners: function(){
    
    this._seqDiv.observe('scroll', function(){
      this._livegrid.options.scrollvalue = $('sequences').scrollLeft;
    }.bind( this ) );
    
  },    
  
  //----------------------------------------------------------------------------
  /**
   * Checks whether a valid response is received and based on it, updates the response state.
   */
  // function to check whether we have got the alignments response;
  checkAlignment: function(  ){
    
    var accDiv = this._accDiv.identify();
    
    if( this._accDiv.childElements().size() > 0 ){
      // console.log('the accessions are updated & timer is cleared '+ $( accDiv ) .childElements().size());
      clearInterval( this._timer);
      
      // now set the readyState to true;
      this.setReadyState( true );  
      
      // now show the element;
      this._parent.show();

      // now fire up an event to say the alignments are loaded;
      this._parent.fire( 'Alignments:Loaded' );
    }
    
  },
  
  //----------------------------------------------------------------------------
  /**
   * Fetches the stylesheets from the server, which is mandatory in assembling the widget.
   */
  // function to fetch the CSS files for rendering the alignment;
  _fetchCSS: function( ){
    // console.log( 'making YAHOO get request for getting the CSS' );
    
    var cssTransaction1 = YAHOO.util.Get.css( '[% c.uri_for( "/static/css/alignViewer.css" ) %]');
    var cssTransaction2 = YAHOO.util.Get.css( '[% c.uri_for( "/static/css/alignment.css" ) %]');
      
  },
  
  //----------------------------------------------------------------------------
  
  /**
   * @Private
   * Fetches the custom built LiveGrid library from the server and only if succeeds, 
   * fetching alignments are initiated.
   */
  // function to get the custom built LiveGrid library from our server;
  _getLiveGrid: function(){
    // console.log( 'making YAHOO get request for getting custom built LiveGrid library' );
    
    var that = this;
    var livegridTransaction = YAHOO.util.Get.script( '[% c.uri_for( "/static/javascripts/livegrid.js" ) %]',{
      onSuccess: function( response ){
        // console.log( 'LiveGrid library has been dynamically loaded' );
        
        // now fetch the alignments as LiveGrid is loaded in the browser now;
        that.fetchAlignments();
      }
    })  
  },
       
  //------------------------------------------------------------------------------
  //- Get and Set Methods --------------------------------------------------------
  //------------------------------------------------------------------------------
  /**
   * Setter method to set the status of the widget.
   * @param {Boolean} status
   */
  // function to set the readyState of this object;
  setReadyState: function( status ){
    this._readyState = status;  
  },
  
  //--------------------------------------
  /**
   * Returns the ready state of the widget.
   * 
   * @returns ready state of the widget
   * 
   */
  getReadyState: function( ){
    return this._readyState;
  },
  
  //----------------------------------------------------------------------------
  /**
   * Returns the livegrid object 
   * 
   * @returns the livegrid object for initating the request;
   */
  // get the livegrid object for later use;
  getLiveGrid: function(){
    return this._livegrid;  
  },
  
  //--------------------------------------
  /**
   * Setter method to set the input parent which holds the alignment widget
   * and throws exception, if its invalid
   * 
   * @param {String | Element } parent
   * @throws{ AlignmentViewerException } for invalid parent element.
   */
  // function to set parent;
  setParent: function( parent ){
    this._parent = $( parent );
    // console.log('the parent is '+this._parent.inspect() );
    
    if ( this._parent === undefined || this._parent === null ) {
      this._throw( "couldn't find the node"+parent );
    }else{
      this._parent.update();
    }
      
  },
  
  //--------------------------------------
  /**
   * Returns the input parent element
   * 
   * @returns the input parent element.
   */
  // function to get the parent;
  getParent: function(){
    return this._parent;
  },
  
  //----------------------------------------------------------------------------
  /**
   * Setter method to set the input accession 
   * and throws exception, if its invalid.
   * 
   * @param {String} accession
   * @throws{ AlignmentViewerException } for invalid accession.
   */
  // function to set the accession;
  setAccession: function( accession ){
    this._accession = accession;
    
    //check whether we get the accession as a string;
    if( this._accession === null ){
      this._throw( 'Accession cannot be null' );
    }
    
    // use regex to check we get any invalid characters in the string;
    if( /\W+/.test( this._accession ) ){
      this._throw( 'Accession contains invalid characters');
    }
    
    
  }, // end of setAccession
  
  //-------------------------------------
  /**
   * Returns the input accession.
   * 
   * @returns input accession.
   */
  // function to return the accession 
  getAccession: function(){
    return this._accession;
  },
  
  //----------------------------------------------------------------------------
  /**
   * Setter method to set the input DAS source name, to make the request.
   * @param {String} dsn
   * @throws{ AlignmentViewerException } for invalid DAS name.
   */
  // function to set the dsn;
  setDsn: function( dsn ){
    this._dsn = dsn;
    
    if( this._dsn === null ){
      this._throw( 'dsn cannot be null'); 
    }  
  },
  
  //-------------------------------------
  /**
   * Returns the input DAS source name.
   * @returns DAS source name.
   */
  // function to get the dsn;
  getDsn: function(){
    return this._dsn;
  },
  
  //----------------------------------------------------------------------------
  /**
   * Setter method to set the total number or rows in the alignment.
   * 
   * @param { Integer } size
   * @throws{ AlignmentViewerException } when the input is not provided.
   */
  // function to set the size;
  setSize: function( size ){
    this._size = size;
    
    if( this._size === null ){
      this._throw( 'input size cannot be null');
    }  
    
  },
  
  //-------------------------------------
  /**
   * Returns the total number of rows present in the alignment.
   * @return total number of rows in the alignment.
   * 
   */
  // function to get the size;
  getSize: function(){
    return this._size;
  },
  
  //-------------------------------------
  /**
   * Returns the grid element created as a child element of the input parent element.
   * @return grid element which is the child element of the input parent element.
   */
  // I need some more get methods for grid and other divs;
  // function to get the grid;
  getGridDiv: function(){
    return this._gridDiv;
  },
  
  //-------------------------------------
  
  /**
   * Returns the div element which holds all the accessions corresponding to the alignments shown in the viewport.
   * @return accession element which holds all the accessions.
   */
  // function to get the accessions Div
  getAccDiv: function(){
    return this._accDiv;
  },
  
  //-------------------------------------
  /**
   * Returns the div element which holds all the sequences corresponding to the alignments shown in the viewport.
   * @return accession element which holds all the sequences.
   */
  // function to get the sequences Div
  getSeqDiv: function(){
    return this._seqDiv;
  },
  
  //------------------------------------------------------------------------------
  //- Private Methods ------------------------------------------------------------
  //------------------------------------------------------------------------------
  /**
   * @Private 
   * Generates a customised exception and throws with the message.
   * 
   * @param {String} msg
   * @throws AlignmentViewerException with the specified message.
   */
  _throw: function( msg ){
    
    throw { name : 'AlignmentViewerException',
            message: msg,
            toString: function(){ return this.message ;}
          };
    
  } // end of _throw
   
} );  // end of Class.create
 
