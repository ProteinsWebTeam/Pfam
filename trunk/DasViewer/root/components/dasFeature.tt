[%
# dasFeature.tt
# pg6 20100215 WTSI
# 
# page wrapper for the feature viewer
#
# $Id: dasFeature.tt,v 1.1 2010-02-16 09:45:49 pg6 Exp $

META naked = 1;

-%]
<div style="position:relative;">

  <h2>Feature Viewer</h2>
  <h3>Uniprot accession: "[% acc %]"([% seqLength %] Aminoacids)</h3>
  
  <div id="canvasWrapper" style="float:left;overflow-x:auto;width:1000px">
    <div id="scroller" style="width:1px;background-color:black;position:absolute;z-index:10"></div>
    <div id="backgroundDiv" style="background-color:#C7F3C5;position:absolute;z-index:-1"></div>
    <canvas id="canvasEl" style="border:1px black solid;z-index:1;"></canvas>
    
  </div>    
  
  <div style="clear:both;"></div>  
  <div id="resNum" style="color:#5828DC"></div>
  <p/>
        
  <script type="text/javascript">
    
    console.log("start of the response");
    
    var graphicXOffset = 150;
    var extraXspace    = 40;
    var Yincrement     = 20;
    
    // so to calculate the width of the canvas based on the reswidth,
    var canvasHeight = [% dasTracks %] * Yincrement;
    
    var resWidth     = 1;
    var sequenceLength = (  [% seqLength %] * resWidth );
    
    console.log( "the canvas height ahs to be "+canvasHeight );
    
    var canvasWidth    = sequenceLength + graphicXOffset + extraXspace; 
    
    // now set the canva height to be this value;
    $('canvasEl').setAttribute( 'height', canvasHeight );
    $('canvasEl').setAttribute( 'width', canvasWidth );
    
    // set the height of the scroller to the canvas height;
    $('scroller').setAttribute( 'height', canvasHeight );
  //  $('sources').setAttribute( 'width', canvasWidth );
    
    var sources = $A( eval( [% json_sources %] ) );
    
    console.log('teh sources is '+sources );
    
    var graphicYOffset = 0;
    var imgParams     = {
                            xscale: 1,
                            yscale: 1,
                            residueWidth: resWidth,
                            envOpacity:-1,
                            sequenceEndPadding: 0,
                            xOffset: graphicXOffset  // das source names were written using canvas;
                           };
       
    var features =  $H( eval( [% dasFeatures %] ) );
    
    // I need the canvas for drwaing the text so get the canvas object;
    var ctx;
    
    if( $('canvasEl').getContext ){
      console.log( "canvas can be used in this browser" );
      ctx = $( 'canvasEl' ).getContext( '2d' );
      
      ctx.font         = "bold 10px 'optimer'";
      ctx.textAlign    = "center";
      ctx.textBaseline = "middle";
      ctx.lineWidth    = 2;
    }
    
    // define the baseline here so that this value is used to calculate the scroller height;
    var baseline;  
    sources.each( function( ds_id ){
      console.log( "the sources is "+ds_id );
      
      var seqObj = $A( features.get( ds_id ) );
      
      // now draw the track for each of the seqObject;
      seqObj.each( function( seq ){
        
        // draw the grpahic using the sequnece;
        var pg1 = new PfamGraphic( "canvasWrapper" );
        pg1.setCanvas( 'canvasEl' );
        pg1.setNewCanvas( false );  
        pg1.setImageParams( imgParams );
        pg1.setImageParams( { yOffset : graphicYOffset } );
        pg1.setSequence( seq );
        
        baseline = pg1.getBaseline();
        
        // draw the text
        ctx.strokeStyle = "#eeeeee";
        ctx.strokeText( ds_id, 75, graphicYOffset+baseline );
        ctx.strokeStyle = "#000000";
            
        // add the text here;
        ctx.fillStyle = 'black';
        ctx.fillText( ds_id, 75, graphicYOffset + baseline );
        
        pg1.render();
        
        graphicYOffset +=Yincrement; 
      } );
      
      // now show the other div sources;
     // $( 'dasSources').show();   
    });
    
    // now look for teh alignment start and end;
    var diff_size = ( alignEnd - alignStart ) + 1 + 1;
    var leftPos   = graphicXOffset + parseInt( alignStart ) + 1;
    var divHeight = graphicYOffset - Yincrement +baseline;
    
    $('backgroundDiv').setStyle( {
          'height': divHeight+'px',
          'left'  : leftPos+'px',
          'width' : diff_size+'px'
        });
    
    
    // now add an event listener to the canvasElement;
    $( 'canvasEl' ).observe( 'mousemove' , function( e ){
      
      // if we have any columns with class columnColor remove it;
      if( $$( '.columnColor' ) !== undefined ){
        
        $$( '.columnColor' ).each( function( element){ 
                //console.log( "the element is "+element.identify() );
                element.removeClassName( 'columnColor' );
                
              });
      }
      
      //console.log( "the event is "+e );
      // calculate the offset position of the element;
      var offset = $('canvasEl').up().cumulativeOffset();
      
      // calulate the x position
      var x = e.pointerX() - offset[ 0 ];
      var y = e.pointerY() - offset[ 1 ];
      
      if( x > graphicXOffset && x < ( canvasWidth - extraXspace ) ){
        //console.log( 'the x and y is |%d|%d|',x,y );  
        
        // now calculate the size of the scroller to be displayed
        var height = graphicYOffset - Yincrement +baseline;
        $('scroller').setStyle( {
          'height': height+'px',
          'left'  : x+'px'
        } );
        
        // now update the resNum div to say which residue is currently shown;
        var res = ( x / resWidth ) - graphicXOffset;
        $('resNum').update( "Residue Number: "+ res ); 
        
        // use the accession and residue number get the column number and change the color.
        var seqEl = $( acc+'seq' ).getElementsByClassName( 'R'+res );
        
        if( seqEl[ 0 ] !== undefined ){
          var classNames = $A( seqEl[0].classNames() );
          
          classNames.each( function( className ){
            if( /C\d+/.test( className ) ){
              //console.log( "the column number I am looking for is "+className );
              
              $$( '.'+className ).each( function( element){ 
                //console.log( "the element is "+element.identify() );
                element.addClassName( 'columnColor' );
                
              });
              
            }

          });

        }
        //console.log( 'teh accessiosn whcih is cliked is '+seqEl[0].inspect() );
        // get the seq coresponding to the acc,
        
      } // because we start to draw the sequence from 100px;
      
    });
   
   // NOW GET THE error_sources;
   var error_sources = $H( eval(  [% json_error_sources %] ) ); 
   
   if( error_sources !== undefined ){
     colourSources( error_sources );
   }
    
  </script>  
</div>