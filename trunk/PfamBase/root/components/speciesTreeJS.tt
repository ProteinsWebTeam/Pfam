
[%
# speciesTreeJS.tt
# jt6 20070626 WTSI
#
# build the javascript boiler plate that controls loading of the species
# tree
#
# $Id: speciesTreeJS.tt,v 1.5 2010-01-19 10:00:08 jt6 Exp $

stUri = c.uri_for( "/speciestree" );
%]

<script type="text/javascript">
  // <![CDATA[

  var ielt8 = true;

  //]]>
</script>

<!--[if lt IE 8]>
<script type="text/javascript">
  // <![CDATA[
  var ielt8 = false;
  //]]>
</script>
<![endif]-->

<script type="text/javascript">
  // <![CDATA[

  // set parameters that are used by the tree controls 
  
  // the URL for storing the list of selected IDs 
  var selectStoreURI     = "[% stUri %]/store_ids";

  // the URL to visit when the user selects nodes and wants to view the
  // selected sequences as domain graphics
  var selectGraphicsURI  = "[% stUri %]/graphics";

  [%# there are two URIs for generating alignments. We have one specific to
    # Pfam, which needs to run hmmalign to align selected sequences against
    # the HMM. We have another that's specific to Rfam, which only needs to
    # retrieve alignment snippets from a table and then format them as 
    # a Stockholm file -%]

  // the URL to visit when the user selects nodes and wants to view the 
  // selected sequences as an alignment - Pfam specific
  var selectPfamAlignmentURI = "[% c.uri_for( '/family/alignment/builder' ) %]";

  // the URL to visit when the user selects nodes and wants to download the 
  // selected sequences as an alignment - Rfam specific
  var selectRfamAlignmentURI = "[% stUri %]/alignment";

  // the URL to visit when the user selects nodes and wants to download the 
  // selected sequence accessions
  var selectAccessionsURI = "[% stUri %]/accessions";

  // the URL to visit when the user selects nodes and wants to download the 
  // selected sequences in FASTA format
  var selectFastaURI = "[% stUri %]/sequences";

  // a hash that maps between the ID of the summary node and the TaskNode object
  var nodeMapping = {};

  // a hash that maps between the ID of the summary node and string of sequence 
  // accessions
  var nodeSequences = {};

  // a flag showing whether the tree was build and has nodes
  var treeBuiltSuccessfully;

  // the function that loads the tree and renders it
  var tree;
  var stSuccess = function( oResponse ) {

    // build the tree widget and get a handle on the root, which we'll need
    // when eval'ing the javascript from the server
    tree = new YAHOO.widget.TreeView("treeDiv");
    var root = tree.getRoot();

    // eval the JS that the server generates. This is the set of calls that
    // build the TreeView widget object tree
    try {
      eval( oResponse.responseText );
    } catch( e ) {
      // don't care
    }

    tree.subscribe( "clickEvent", tree.onEventToggleHighlight );
    tree.setNodesProperty( "propagateHighlightUp",   true );
    tree.setNodesProperty( "propagateHighlightDown", true );

    // by this point the tree was successfully built, but the response might
    // have contained a message rather than tree components. If there was a
    // a tree, we must have more than just the root node
    if ( treeBuiltSuccessfully ) {

      // we got a tree; render it
      tree.render();

      // bring back the control panel
      $("treeTools").show();
    
    } else {

      // if this flag isn't even set, then the AJAX response didn't contain
      // the javascript to set it, so we assume instead that there's an 
      // error message in there
      if ( treeBuiltSuccessfully == undefined ) {
        $("treeDiv").update( oResponse.responseText );
      } else {
        $("treeDiv").update( "There was a problem building the species tree." );
      }

      // hide the control panel too
      $("treeTools").hide();
    }
  };

  var stFailure = function() {
    $("treeDiv").update( "Tree loading failed." );
  }

  // this is an extra method to submit a new ajax request, this time with
  // the "loadTree" flag set, which tells the controller to load the tree
  // even it's large
  var forceLoad = function() {
  
    // show the new spinner and disable the button
    $("secondaryLoadingSpinner").show();
    $("generateButton").disable();

    // override the test for IE and the "loadTree" check, to force tree loading
    var r = new Ajax.Request(
      "[% stUri %]/interactive",
      {
        method:     'get',
        parameters: { acc:      "[% acc %]",
                      ie:       false,
                      loadTree: 1 },
        onSuccess:  stSuccess,
        onFailure:  stFailure
      }
    );
  };

  // the parameters for the initial ajax call to build the tree
  var stUri;
  if( Prototype.Browser.IE && ielt8 ) {
    stUri = "[% stUri %]/text";
  } else {
    stUri = "[% stUri %]/interactive";
  }

  // fire off the request to load the tree
  document.observe( "dom:loaded", function() {
    var r = new Ajax.Request(
      stUri,
      {
        method:     'get',
        parameters: { acc: "[% acc %]",
                      ie:  Prototype.Browser.IE },
        onSuccess:  stSuccess,
        onFailure:  stFailure
      }
    );
  } );

  // ]]>
</script>
[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: Rob Finn (rdf@sanger.ac.uk), John Tate (jt6@sanger.ac.uk)

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
-%]
