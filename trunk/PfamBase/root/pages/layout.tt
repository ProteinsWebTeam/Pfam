
[%
# layout.tt
# jt6 20060406 WTSI
# 
# build a tab-layout page
#
# $Id: layout.tt,v 1.10 2009-10-07 14:31:33 jt6 Exp $

USE String;
USE date;

#-------------------------------------------------------------------------------
# specify required stylesheets and javascript files 

PROCESS "components/require.tt";

requirements.css.push( "tab_layout.css" );
requirements.cssIe.push( "tab_layout_ie.css" );

# get the javascript for the curved corners from the shared area, but the CSS
# from the application-specific area, so that we can have differently coloured
# backgrounds
sharedRequirements.js.push( "cb.js" );
requirements.css.push( "cb.css" );

#--------------------------------------
# a BLOCK that will generate a sidebar tab

BLOCK generateTab; -%]

  <li id="[% blockName %]Selector" 
      class="[% IF index == 1; "selected"; END; IF NOT active; " disabled"; END %]">
    <a href="#[% blockName %]">[% blockTitle %]</a>
  </li>
[%-

  # see if the tab should be activated or not
#  suffix = String.new;
#  IF NOT active OR firstTab;
#    CALL suffix.append( "inactive" )  IF NOT active;
#    CALL suffix.append( " selected" ) IF firstTab;
#    CALL suffix.trim();
#  END
-%]

<!--
  <li id="[% blockName %]Selector"[% IF suffix %] class="[% suffix %]"[% END %]>
    [% IF active;
	    # this div is purely to avoid the IE box model bug... -%]
      <div>
        <span class="link" 
              onclick="switchTab('[% blockName %]');">
          [% blockTitle %]</span>
      </div>
    [% ELSE -%]
      <div class="inactive">[% blockTitle %]</div>
    [% END -%]
  </li>
-->
[% END; # of BLOCK

#--------------------------------------
# actually generate the blocks for this page

firstTab    = 1;
tabsContent = String.new;
pageContent = String.new;

activity = {};

FOREACH block IN layouts.${pageType}.blocks;

  blockName  = block.keys.first;
  blockFile  = blocks.${blockName};
  blockTitle = block.values.first;

  # build the contents of the tab, if it's active
  
  # if we're in debug mode, just try to render the file, without a safety net,
  # so that we can see where the template breaks (if it breaks at all)

  # a bit dangerous. If we happen to leave debugging on in the live server, we
  # expose all sorts of stuff when we hit an error.
  # jt6 20071212 WTSI. 
  IF c.debug;
    CALL c.log.debug( "layout.tt: processing '$blockFile'" );
    pageOutput = PROCESS $blockFile;
    IF pageOutput;
      # we got some output from the block template; add it to the page content
      CALL pageContent.append( pageOutput );
    ELSE;
      # there was no content from the block template, meaning that the block
      # should be disabled. However, we still need a placeholder div in the 
      # body of the page, otherwise TabView gets confused
      CALL pageContent.append( "<div><!-- disabled --></div>" );
    END;

  ELSE;
    # we're not debugging, so catch the errors from the template and carry on
    TRY;
      pageOutput = PROCESS $blockFile;
      IF pageOutput;
        CALL pageContent.append( pageOutput );
      ELSE;
        CALL pageContent.append( "<div><!-- disabled --></div>" );
      END;
    CATCH;
      CALL c.log.error( "layout.tt: Couldn't render template file \"$blockFile\"" );
    END;
  END;

  blockActive = pageOutput ? 1 : 0;
  activity.$blockName = blockActive;

  # build the tab label
  tabsOutput = PROCESS generateTab, active = blockActive, index = loop.index+1;
  CALL tabsContent.append( tabsOutput );

  firstTab = 0;

END; # of "FOREACH block"

#--------------------------------------
# add the icons

PROCESS components/icons.tt;

#--------------------------------------
# and construct the page from the components that we've assembled

# page components that are needed by the history manager %]

<div id="tabTitle">
  [%
  titleFile = "components/blocks/${pageType}/title.tt";
  TRY;
    PROCESS $titleFile titleType="tab";
  CATCH;
    CALL c.log.error( "layout.tt: Couldn't render title file \"$titleFile\" (page type \"$pageType\")" )
      IF c.debug;
  END
  %]
</div>

<div id="loadingComponents" 
     class="loading" 
     style="display: none">
  Loading page components<span id="loadingComponentsCount"></span>&hellip;
</div>

<div class="cleaner"><!-- empty --></div>

[%-#--------------------------------------
   # this script block set up the YUI history and tab management components -%]

<script type="text/javascript">
  // <![CDATA[

  [%-# set up the legacy tab switching mechanism. We need to continue support bookmarks
     # that used the block names -%]

  var switchTab = function( id ) {

    [%-# get a list of all list items in the sidebar, i.e. the tab selectors -%]
    var tabs =  $("sidebar")
                  .descendants()
                  .findAll( function(el) { 
                    return el.nodeName == "LI";
                  } );

    if ( $(id) ) {

      [%-# the argument was an id, so switch to that block -%]
      var selector = id+"Selector";
      var tabIndex = tabs.indexOf( $(selector) );

      try {
        tv.selectTab( tabIndex );
      } catch ( e ) { }

    } else {

      [%-# the argument doesn't appear to be a block; assume it's "next" or "prev".
         # This is a bit more complicated, because we need to take into account
         # any disabled tabs in the list... -%]
      var selectedLi = $$("#sidebar li.selected").first();
      var selectedLiIndex = tabs.indexOf( selectedLi );

      [%-# walk up/down the tabs list %]
      var limit = ( id == "next" ) ? tabs.size() - selectedLiIndex
                                   : selectedLiIndex;
      var newTabSelector;
      for ( var i = 0; i < limit; i++ ) {
        if ( id == "next" ) {
          newTabSelector = selectedLi.next("li", i);
        } else if ( id == "prev" ) {
          newTabSelector = selectedLi.previous("li", i);
        }
        if ( $(newTabSelector) && 
             ! $(newTabSelector).hasClassName("disabled") ) {
          break;
        }
      }

      if ( newTabSelector == undefined ) {
        return;
      }

      var tabIndex = tabs.indexOf( $(newTabSelector) );
      try {
        tv.selectTab( tabIndex );
      } catch ( e ) { }

    }
      
  };

  //--------------------------------------

  [%-# a function to set up the final few bits of the page behaviour -%]
  var pageSetup = function() {

    if ( $(showTab) ) {
      switchTab( showTab );
    } else if ( $$(".error").size() > 0 ) {
      [%-# see if there's an error message in the page. If there is, we walk back
         # up the DOM tree from that error message node until we find the "block"
         # that encloses it, grab the ID for that block and use the tab switcher
         # to select it... -%]
      switchTab( $$(".error")
                   .first()
                   .up("div.block")
                   .identify() );
    }

    [%-# keep track of post-loading calls -%]
    
    [%-# register listeners for the start and end of each ajax call -%]
    Ajax.Responders.register( {
      onCreate: function() {
        $('loadingComponentsCount').update( '&nbsp;(' + Ajax.activeRequestCount + ' remaining)' );
        $('loadingComponents').show();
      },
      onComplete: function() {
        $('loadingComponentsCount').update( '&nbsp;(' + Ajax.activeRequestCount + ' remaining)' );
        if( Ajax.activeRequestCount < 1 ) {
          $('loadingComponents').hide();
        }
      }
    } );

    document.observe( "keypress", function(e){

      [%-# don't capture events that originate on an input or textarea -%]
      var targetNodeType = e.findElement().nodeName;
      if ( targetNodeType == 'INPUT' ||
           targetNodeType == 'TEXTAREA' ) {
        return;
      }

      var code;
      if ( e.keyCode ) {
        code = e.keyCode;
      }
      else if ( e.which ) {
        code = e.which;
      }

      switch (code) {
        case  75:            // "K"
        case 107:            // "k"
        case  80:            // "P"
        case 112:            // "p"
        /* case Event.KEY_UP:   // up arrow */
          switchTab("prev");
          break;
        case  74:            // "J"
        case 106:            // "j"
        case  78:            // "N"
        case 110:            // "n"
        /* case Event.KEY_DOWN: // down arrow */
          switchTab("next");
          break;
      }

    } );

  };
  
  //--------------------------------------

  [%-# this is all lifted directly from the YUI example page:
     # http://developer.yahoo.com/yui/examples/history/history-tabview.html

     # see if we got here via a bookmark -%]
  var bookmarkedTabViewState = YAHOO.util.History.getBookmarkedState( "tabview" );
  var initialTabViewState = bookmarkedTabViewState || "tab0";

  [%-# register the "tabview" module with the history manager -%]
  YAHOO.util.History.register( "tabview", initialTabViewState, function (state) {
    tv.set( "activeIndex", state.substr(3) );
  } );

  [%-# a function to initialise the TabView widget -%]
  var tv;
  var initTabView = function() {
    tv = new YAHOO.widget.TabView( "tabset" );
    tv.addListener( "activeTabChange", handleTabViewActiveTabChange );
    pageSetup();
  };

  [%-# when the history manager is ready, initialise the TabView widget with whatever
     # state we get from the history manager. The state is stored as "tabN", where
     # "N" is the index number of the tab -%]
  YAHOO.util.History.onReady( function () {
    initTabView();
    var currentState = YAHOO.util.History.getCurrentState("tabview");
    tv.set ("activeIndex", currentState.substr(3) );
  });

  [%-# a handler function that is called whenever the TabView widget changes the tab.
     # This is used to register the change with the history manager -%]
  var handleTabViewActiveTabChange = function( e ) {
    var newState, currentState;

    newState = "tab" + this.getTabIndex( e.newValue );

    try {
      currentState = YAHOO.util.History.getCurrentState("tabview");
      [%-# only change tabs if we're not currently showing the requested tab,
         # otherwise we end up in an infinite loop -%]
      if ( newState != currentState ) {
        YAHOO.util.History.navigate( "tabview", newState );
      }
    } catch (e) {
    [%-# if the history manager doesn't work, change the tab anyway -%]
      tv.set( "activeIndex", newState.substr(3) );
    }
  };

  [%-# finally, initialise the history manager, which will, in turn, initialise the 
     # TabView widget. If initialising the history manager fails, we fall back on the
     # function that initialises just the TabView, so that at least the page is usable -%]
  try {
    YAHOO.util.History.initialize( "yui-history-field", "yui-history-iframe" );
  } catch (e) {
    initTabView();
  }

  //--------------------------------------

  var section    = "[% pageType # the site section, e.g. family, protein, etc. %]";
  var showTab    = "[% showTab  # the tab, specified by a parameter %]";

  // ]]>
</script> 

[%-#--------------------------------------
   #
   # build the mark up for the page proper. Everything is classed appropriately for the 
   # YUI components -%]

<div id="wrap">

[%#  <div id="topBorder"><!-- empty --></div> %]

  <div id="tabset" class="yui-navset">

    <div id="sidebar">
      <ul class="yui-nav">
        [% tabsContent %]
      </ul>

      [% PROCESS components/jumpBox.tt %]

    </div> <!-- end of "sidebar" -->

    <div id="content" class="yui-content">
      [% pageContent %]
    </div> <!-- end of "content" -->

  </div>

  <div class="cleaner"></div>

</div> <!-- end of "wrap" -->

<!-- ====================================================================== -->
[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: Rob Finn (rdf@sanger.ac.uk), John Tate (jt6@sanger.ac.uk)

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
-%]
