#!/usr/local/bin/perl -w

BEGIN {
    $rfam_mod_dir = 
        (defined $ENV{'RFAM_MODULES_DIR'})
            ?$ENV{'RFAM_MODULES_DIR'}:"/pfam/db/Rfam/scripts/Modules";
    $bioperl_dir =
        (defined $ENV{'BIOPERL_DIR'})
            ?$ENV{'BIOPERL_DIR'}:"/pfam/db/bioperl";
}

use lib $rfam_mod_dir;
use lib $bioperl_dir;

use strict;
use IO::File;
use Rfam::RfamAlign;

sub usage {
    print STDERR <<EOF;
Usage: $0 <alignfile> <outfile>
EOF
}

my $alnfile = shift;
if( not $alnfile ) {
    &usage();
    exit(1);
}

my $pfold_bindir = '/pfam/db/Rfam/software/pfold/bin';
my $queue = 'pfam_fast';

open( O, ">$$.col" ) or die;
print O "; generated by fasta2col\n";
print O "; ============================================================\n";

open( A, $alnfile ) or die;
my $aln = new Rfam::RfamAlign;
$aln -> read_stockholm( \*A );
foreach my $seq ( $aln -> eachSeq() ) {
    print O "; TYPE              RNA\n";
    print O "; COL 1             label\n";
    print O "; COL 2             residue\n";
    print O "; COL 3             seqpos\n";
    print O "; COL 4             alignpos\n";
    print O "; ENTRY             ", $seq->id, "/", $seq->start, "-", $seq->end, "\n";
    print O "; ----------\n";
    my( $i, $j );

    foreach ( split( //, $seq->seq ) ) {
	if( /[\.\-]/ ) {
	    printf O ("G  %s      .  %5d\n", $_, ++$i);
	}
	else {
	    printf O ("N  %s  %5d  %5d\n", $_, ++$j, ++$i);
	}
    }
    print O "; **********\n";
}
close A;
close O;

my $fh = new IO::File;
$fh -> open("| bsub -I -q $queue -Rlinux -o pfold.err") or die "$!";
$fh -> print("$pfold_bindir/findphyl $pfold_bindir/scfg.rate $$.col > /tmp/$$.nj.col\n");
$fh -> print("$pfold_bindir/mltree $pfold_bindir/scfg.rate /tmp/$$.nj.col > /tmp/$$.ml.col\n");
$fh -> print("$pfold_bindir/scfg --treeinfile $pfold_bindir/article.grm /tmp/$$.ml.col > /tmp/$$.res.col\n");
$fh -> print("$pfold_bindir/addparen /tmp/$$.res.col | $pfold_bindir/col2fasta > $$.out.fa\n");
$fh -> close;

open( O, ">$$.out.stk" ) or die;
open( S, "$$.out.fa" ) or die;
my $str;
my %seq;
my $nse;
while(<S>) {
    if( /^\>(\S+)/ ) {
	$nse = $1;
	$str = undef;
    }
    elsif( /^[\.\(\)]+$/ ) {
	$str .= $_;
    }
    else {
	$seq{ $nse } .= $_;
    }
}
close S;
foreach my $nse ( keys %seq ) {
    print O ">$nse\n$seq{$nse}";
}
$str =~ tr/\(\)/\<\>/;
print O ">#=GC_SS_cons\n$str";
close O;

system "sreformat -u -r --gapsym '.' --mingap stockholm $$.out.stk | sed 's/GC_SS_cons/GC SS_cons/g'" and die;
